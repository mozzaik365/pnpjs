{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PnPjs is a collection of fluent libraries for consuming SharePoint, Graph, and Office 365 REST APIs in a type-safe way. You can use it within SharePoint Framework, Nodejs, or any JavaScript project. This an open source initiative and we encourage contributions and constructive feedback from the community. These articles provide general guidance for working with the libraries. If you are migrating from V2 please review the transition guide . Getting Started Authentication Get Started Contributing Animation of the library in use, note intellisense help in building your queries Packages \u00b6 Patterns and Practices client side libraries (PnPjs) are comprised of the packages listed below. All of the packages are published as a set and depend on their peers within the @pnp scope. The latest published version is . @pnp/ core Provides shared functionality across all pnp libraries graph Provides a fluent api for working with Microsoft Graph logging Light-weight, subscribable logging framework msaljsclient Provides an msal wrapper suitable for use with PnPjs nodejs Provides functionality enabling the @pnp libraries within nodejs queryable Provides shared query functionality and base classes sp Provides a fluent api for working with SharePoint REST Authentication \u00b6 We have a new section dedicated to helping you figure out the best way to handle authentication in your application, check it out! Issues, Questions, Ideas \u00b6 Please log an issue using our template as a guide. This will let us track your request and ensure we respond. We appreciate any constructive feedback, questions, ideas, or bug reports with our thanks for giving back to the project. Changelog \u00b6 Please review the CHANGELOG for release details on all library changes. Code of Conduct \u00b6 This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. \"Sharing is Caring\" \u00b6 Please use http://aka.ms/sppnp for the latest updates around the whole SharePoint Patterns and Practices (PnP) program . Disclaimer \u00b6 THIS CODE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.","title":"Home"},{"location":"#packages","text":"Patterns and Practices client side libraries (PnPjs) are comprised of the packages listed below. All of the packages are published as a set and depend on their peers within the @pnp scope. The latest published version is . @pnp/ core Provides shared functionality across all pnp libraries graph Provides a fluent api for working with Microsoft Graph logging Light-weight, subscribable logging framework msaljsclient Provides an msal wrapper suitable for use with PnPjs nodejs Provides functionality enabling the @pnp libraries within nodejs queryable Provides shared query functionality and base classes sp Provides a fluent api for working with SharePoint REST","title":"Packages"},{"location":"#authentication","text":"We have a new section dedicated to helping you figure out the best way to handle authentication in your application, check it out!","title":"Authentication"},{"location":"#issues-questions-ideas","text":"Please log an issue using our template as a guide. This will let us track your request and ensure we respond. We appreciate any constructive feedback, questions, ideas, or bug reports with our thanks for giving back to the project.","title":"Issues, Questions, Ideas"},{"location":"#changelog","text":"Please review the CHANGELOG for release details on all library changes.","title":"Changelog"},{"location":"#code-of-conduct","text":"This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"#sharing-is-caring","text":"Please use http://aka.ms/sppnp for the latest updates around the whole SharePoint Patterns and Practices (PnP) program .","title":"\"Sharing is Caring\""},{"location":"#disclaimer","text":"THIS CODE IS PROVIDED AS IS WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.","title":"Disclaimer"},{"location":"getting-started/","text":"Getting Started \u00b6 This library is geared towards folks working with TypeScript but will work equally well for JavaScript projects. To get started you need to install the libraries you need via npm. Many of the packages have a peer dependency to other packages with the @pnp namespace meaning you may need to install more than one package. All packages are released together eliminating version confusion - all packages will depend on packages with the same version number. If you need to support older browsers please revert to version 2 of the library and see related documentation on polyfills for required functionality. Minimal Requirements \u00b6 - NodeJs: >= 14 - TypeScript: 4.x - Node Modules Supported: ESM Only Install \u00b6 First you will need to install those libraries you want to use in your application. Here we will install the most frequently used packages. @pnp/sp to access the SharePoint REST API and @pnp/graph to access some of the Microsoft Graph API. This step applies to any environment or project. npm install @pnp/sp @pnp/graph --save Next we can import and use the functionality within our application. Below is a very simple example, please see the individual package documentation for more details and examples. import { getRandomString } from \"@pnp/core\"; (function() { // get and log a random string console.log(getRandomString(20)); })() Getting Started with SharePoint Framework \u00b6 The @pnp/sp and @pnp/graph libraries are designed to work seamlessly within SharePoint Framework projects with a small amount of upfront configuration. If you are running in 2016 or 2019 on-premises you will need to use version 2 of the library. If you are targeting SharePoint online you will need to take the additional steps outlined below based on the version of the SharePoint Framework you are targeting. The SharePoint Framework supports different versions of TypeScript natively and as of 1.14 release still doesn't natively support TypeScript 4.x. Sadly, this means that to use Version 3 of PnPjs you will need to take a few additional configuration steps to get them to work together. SPFx Version 1.12.1 & later \u00b6 Update the rush stack compiler to 4.2. This is covered in this great article by Elio , but the steps are listed below. Uninstall existing rush stack compiler (replace the ? with the version that is currently referenced in your package.json): npm uninstall @microsoft/rush-stack-compiler-3.? Install 4.2 version: npm i @microsoft/rush-stack-compiler-4.2 Update tsconfig.json to extend the 4.2 config: \"extends\": \"./node_modules/@microsoft/rush-stack-compiler-4.2/includes/tsconfig-web.json\" Replace the contents of the gulpfile.js with: >Note: The only change is the addition of the line to disable tslint. ```JS 'use strict'; const build = require('@microsoft/sp-build-web'); build.addSuppression(`Warning - [sass] The local CSS class 'ms-Grid' is not camelCase and will not be type-safe.`); var getTasks = build.rig.getTasks; build.rig.getTasks = function () { var result = getTasks.call(build.rig); result.set('serve', result.get('serve-deprecated')); return result; }; // ********* ADDED ******* // disable tslint build.tslintCmd.enabled = false; // ********* ADDED ******* build.initialize(require('gulp')); ``` SPFx Version 1.11.0 & earlier \u00b6 At this time there is no documented method to use version 3.x with SPFx versions earlier than 1.12.1. We recommend that you fall back to using version 2 of the library or update your SPFx version. Imports and usage \u00b6 Because SharePoint Framework provides a local context to each component we need to set that context within the library. This allows us to determine request urls as well as use the SPFx HttpGraphClient within @pnp/graph. To establish context within the library you will need to use the SharePoint or Graph Factory Interface depending on which set of APIs you want to utilize. For SharePoint you will use the spfi interface and for the Microsoft Graph you will use the graphfi interface whic are both in the main export of the corresponding package. Examples of both methods are shown below. Depending on how you architect your solution establishing context is done where you want to make calls to the API. The examples demonstrate doing so in the onInit method as a local variable but this could also be done to a private variable or passed into a service. Note if you are going to use both the @pnp/sp and @pnp/graph packages in SPFx you will need to alias the SPFx behavior import, please see the section below for more details. Using @pnp/sp spfi factory interface in SPFx \u00b6 import { spfi, SPFx } from \"@pnp/sp\"; // ... protected async onInit(): Promise<void> { await super.onInit(); const sp = spfi().using(spSPFx(this.context)); } // ... Using @pnp/graph graphfi factory interface in SPFx \u00b6 import { graphfi, SPFx } from \"@pnp/graph\"; // ... protected async onInit(): Promise<void> { await super.onInit(); const graph = graphfi().using(SPFx(this.context)); } // ... Using both @pnp/sp and @pnp/graph in SPFx \u00b6 import { spfi, SPFx as spSPFx } from \"@pnp/sp\"; import { graphfi, SPFx as graphSPFx} from \"@pnp/graph\"; // ... protected async onInit(): Promise<void> { await super.onInit(); const sp = spfi().using(spSPFx(this.context)); const graph = graphfi().using(graphSPFx(this.context)); } // ... Establish context within an SPFx service \u00b6 Because you do not have full access to the context object within a service you need to setup things a little differently. If you do not need AAD tokens you can leave that part out and specify just the pageContext (Option 2). import { ServiceKey, ServiceScope } from \"@microsoft/sp-core-library\"; import { PageContext } from \"@microsoft/sp-page-context\"; import { AadTokenProviderFactory } from \"@microsoft/sp-http\"; import { spfi, SPFx } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; export interface ISampleService { getLists(): Promise<any[]>; } export class SampleService { public static readonly serviceKey: ServiceKey<ISampleService> = ServiceKey.create<ISampleService>('SPFx:SampleService', SampleService); private _sp: SPFI; constructor(serviceScope: ServiceScope) { serviceScope.whenFinished(() => { const pageContext = serviceScope.consume(PageContext.serviceKey); const tokenProviderFactory = serviceScope.consume(AadTokenProviderFactory.serviceKey); //Option 1 - with AADTokenProvider this._sp = spfi().using(SPFx({ aadTokenProviderFactory: tokenProviderFactory, pageContext: pageContext, })); //Option 2 - without AADTokenProvider this._sp = spfi().using(SPFx({ pageContext })); } public getLists(): Promise<any[]> { return this._sp.web.lists(); } } Getting started with NodeJS \u00b6 Due to the way in which Node resolves ESM modules when you use selective imports in node you must include the index.js part of the path. Meaning an import like import \"@pnp/sp/webs\" in examples must be import \"@pnp/sp/webs/index.js\" . Root level imports such as import { spfi } from \"@pnp/sp\" remain correct. The samples in this section demonstrate this for their selective imports. Authentication \u00b6 To call the SharePoint APIs via MSAL you are required to use certificate authentication with your application. Fully covering certificates is outside the scope of these docs, but the following commands were used with openssl to create testing certs for the sample code below. mkdir \\temp cd \\temp openssl req -x509 -newkey rsa:2048 -keyout keytmp.pem -out cert.pem -days 365 -passout pass:HereIsMySuperPass -subj '/C=US/ST=Washington/L=Seattle' openssl rsa -in keytmp.pem -out key.pem -passin pass:HereIsMySuperPass Using the above code you end up with three files, \"cert.pem\", \"key.pem\", and \"keytmp.pem\". The \"cert.pem\" file is uploaded to your AAD application registration. The \"key.pem\" is read as the private key for the configuration. Using @pnp/sp spfi factory interface in NodeJS \u00b6 Version 3 of this library only supports ESModules. If you still require commonjs modules please check out version 2 . The first step is to install the packages that will be needed. You can read more about what each package does starting on the packages page. npm i @pnp/sp @pnp/nodejs Once these are installed you need to import them into your project, to communicate with SharePoint from node we'll need the following imports: import { SPDefault } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; import { readFileSync } from 'fs'; import { Configuration } from \"@azure/msal-node\"; function() { // configure your node options (only once in your application) const buffer = readFileSync(\"c:/temp/key.pem\"); const config: Configuration = { auth: { authority: \"https://login.microsoftonline.com/{tenant id or common}/\", clientId: \"{application (client) i}\", clientCertificate: { thumbprint: \"{certificate thumbprint, displayed in AAD}\", privateKey: buffer.toString(), }, }, }; const sp = spfi().using(SPDefault({ baseUrl: 'https://{my tenant}.sharepoint.com/sites/dev/', msal: { config: config, scopes: [ 'https://{my tenant}.sharepoint.com/.default' ] } })); // make a call to SharePoint and log it in the console const w = await sp.web.select(\"Title\", \"Description\")(); console.log(JSON.stringify(w, null, 4)); }(); Using @pnp/graph graphfi factory interface in NodeJS \u00b6 Similar to the above you can also make calls to the Microsoft Graph API from node using the libraries. Again we start with installing the required resources. You can see ./debug/launch/graph.ts for a live example. npm i @pnp/graph @pnp/nodejs Now we need to import what we'll need to call graph import { graphfi } from \"@pnp/graph\"; import { GraphDefault } from \"@pnp/nodejs\"; import \"@pnp/graph/users/index.js\"; function() { const graph = graphfi().using(GraphDefault({ baseUrl: 'https://graph.microsoft.com', msal: { config: config, scopes: [ 'https://graph.microsoft.com/.default' ] } })); // make a call to Graph and get all the groups const userInfo = await graph.users.top(1)(); console.log(JSON.stringify(userInfo, null, 4)); }(); Node project using TypeScript producing commonjs modules \u00b6 For TypeScript projects which output commonjs but need to import esm modules you will need to take a few additional steps to use the pnp esm modules. This is true of any esm module with a project structured in this way, not specific to PnP's implementation. It is very possible there are other configurations that make this work, but these steps worked in our testing. We have also provided a basic sample showing this setup. You must install TypeScript @next or you will get errors using node12 module resolution. This may change but is the current behavior when we did our testing. npm install -D typescript@next The tsconfig file for your project should have the \"module\": \"CommonJS\" and \"moduleResolution\": \"node12\", settings in addition to whatever else you need. tsconfig.json { \"compilerOptions\": { \"module\": \"CommonJS\", \"moduleResolution\": \"node12\" } You must then import the esm dependencies using the async import pattern. This works as expected with our selective imports, and vscode will pick up the intellisense as expected. index.ts import { settings } from \"./settings.js\"; // this is a simple example as async await is not supported with commonjs output // at the root. setTimeout(async () => { const { spfi } = await import(\"@pnp/sp\"); const { SPDefault } = await import(\"@pnp/nodejs\"); await import(\"@pnp/sp/webs/index.js\"); const sp = spfi().using(SPDefault({ baseUrl: settings.testing.sp.url, msal: { config: settings.testing.sp.msal.init, scopes: settings.testing.sp.msal.scopes } })); // make a call to SharePoint and log it in the console const w = await sp.web.select(\"Title\", \"Description\")(); console.log(JSON.stringify(w, null, 4)); }, 0); Finally, when launching node you need to include the `` flag with a setting of 'node'. node --experimental-specifier-resolution=node dist/index.js Read more in the releated TypeScript Issue , TS pull request Adding the functionality , and the TS Docs . Single Page Application Context \u00b6 In some cases you may be working in a client-side application that doesn't have context to the SharePoint site. In that case you will need to utilize the MSAL Client, you can get the details on creating that connection in this article . Selective Imports \u00b6 This library has a lot of functionality and you may not need all of it. For that reason, we support selective imports which allow you to only import the parts of the sp or graph library you need, which reduces your overall solution bundle size - and enables treeshaking . You can read more about selective imports . Error Handling \u00b6 This article describes the most common types of errors generated by the library. It provides context on the error object, and ways to handle the errors. As always you should tailor your error handling to what your application needs. These are ideas that can be applied to many different patterns. Extending the Library \u00b6 Because of the way the fluent library is designed by definition it's extendible. That means that if you want to build your own custom functions that extend the features of the library this can be done fairly simply. To get more information about creating your own custom extensions check out extending the library article. Connect to a different Web \u00b6 The new factory function allows you to create a connection to a different web maintaining the same setup as your existing interface. You have two options, either to 'AssignFrom' or 'CopyFrom' the base timeline's observers. The below example utilizes 'AssignFrom' but the method would be the same regadless of which route you choose. For more information on these behaviors see Core/Behaviors . import { spfi, SPFx } from \"@pnp/sp\"; import { AssignFrom } from \"@pnp/core\"; import \"@pnp/sp/webs\"; //Connection to the current context's Web const sp = spfi(...); // Option 1: Create a new instance of Queryable const spWebB = spfi({Other Web URL}).using(SPDefault(this.context)); // Option 2: Copy/Assign a new instance of Queryable using the existing const spWebB = spfi({Other Web URL}).using(AssignFrom(sp.web)); // Option 3: Create a new instance of Queryable using other credentials? const spWebB = spfi({Other Web URL}).using(SPDefault(this.context)); Next Steps \u00b6 For more complicated authentication scnearios please review the article describing all of the available authentication methods .","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"This library is geared towards folks working with TypeScript but will work equally well for JavaScript projects. To get started you need to install the libraries you need via npm. Many of the packages have a peer dependency to other packages with the @pnp namespace meaning you may need to install more than one package. All packages are released together eliminating version confusion - all packages will depend on packages with the same version number. If you need to support older browsers please revert to version 2 of the library and see related documentation on polyfills for required functionality.","title":"Getting Started"},{"location":"getting-started/#minimal-requirements","text":"- NodeJs: >= 14 - TypeScript: 4.x - Node Modules Supported: ESM Only","title":"Minimal Requirements"},{"location":"getting-started/#install","text":"First you will need to install those libraries you want to use in your application. Here we will install the most frequently used packages. @pnp/sp to access the SharePoint REST API and @pnp/graph to access some of the Microsoft Graph API. This step applies to any environment or project. npm install @pnp/sp @pnp/graph --save Next we can import and use the functionality within our application. Below is a very simple example, please see the individual package documentation for more details and examples. import { getRandomString } from \"@pnp/core\"; (function() { // get and log a random string console.log(getRandomString(20)); })()","title":"Install"},{"location":"getting-started/#getting-started-with-sharepoint-framework","text":"The @pnp/sp and @pnp/graph libraries are designed to work seamlessly within SharePoint Framework projects with a small amount of upfront configuration. If you are running in 2016 or 2019 on-premises you will need to use version 2 of the library. If you are targeting SharePoint online you will need to take the additional steps outlined below based on the version of the SharePoint Framework you are targeting. The SharePoint Framework supports different versions of TypeScript natively and as of 1.14 release still doesn't natively support TypeScript 4.x. Sadly, this means that to use Version 3 of PnPjs you will need to take a few additional configuration steps to get them to work together.","title":"Getting Started with SharePoint Framework"},{"location":"getting-started/#spfx-version-1121-later","text":"Update the rush stack compiler to 4.2. This is covered in this great article by Elio , but the steps are listed below. Uninstall existing rush stack compiler (replace the ? with the version that is currently referenced in your package.json): npm uninstall @microsoft/rush-stack-compiler-3.? Install 4.2 version: npm i @microsoft/rush-stack-compiler-4.2 Update tsconfig.json to extend the 4.2 config: \"extends\": \"./node_modules/@microsoft/rush-stack-compiler-4.2/includes/tsconfig-web.json\" Replace the contents of the gulpfile.js with: >Note: The only change is the addition of the line to disable tslint. ```JS 'use strict'; const build = require('@microsoft/sp-build-web'); build.addSuppression(`Warning - [sass] The local CSS class 'ms-Grid' is not camelCase and will not be type-safe.`); var getTasks = build.rig.getTasks; build.rig.getTasks = function () { var result = getTasks.call(build.rig); result.set('serve', result.get('serve-deprecated')); return result; }; // ********* ADDED ******* // disable tslint build.tslintCmd.enabled = false; // ********* ADDED ******* build.initialize(require('gulp')); ```","title":"SPFx Version 1.12.1 &amp; later"},{"location":"getting-started/#spfx-version-1110-earlier","text":"At this time there is no documented method to use version 3.x with SPFx versions earlier than 1.12.1. We recommend that you fall back to using version 2 of the library or update your SPFx version.","title":"SPFx Version 1.11.0 &amp; earlier"},{"location":"getting-started/#imports-and-usage","text":"Because SharePoint Framework provides a local context to each component we need to set that context within the library. This allows us to determine request urls as well as use the SPFx HttpGraphClient within @pnp/graph. To establish context within the library you will need to use the SharePoint or Graph Factory Interface depending on which set of APIs you want to utilize. For SharePoint you will use the spfi interface and for the Microsoft Graph you will use the graphfi interface whic are both in the main export of the corresponding package. Examples of both methods are shown below. Depending on how you architect your solution establishing context is done where you want to make calls to the API. The examples demonstrate doing so in the onInit method as a local variable but this could also be done to a private variable or passed into a service. Note if you are going to use both the @pnp/sp and @pnp/graph packages in SPFx you will need to alias the SPFx behavior import, please see the section below for more details.","title":"Imports and usage"},{"location":"getting-started/#using-pnpsp-spfi-factory-interface-in-spfx","text":"import { spfi, SPFx } from \"@pnp/sp\"; // ... protected async onInit(): Promise<void> { await super.onInit(); const sp = spfi().using(spSPFx(this.context)); } // ...","title":"Using @pnp/sp spfi factory interface in SPFx"},{"location":"getting-started/#using-pnpgraph-graphfi-factory-interface-in-spfx","text":"import { graphfi, SPFx } from \"@pnp/graph\"; // ... protected async onInit(): Promise<void> { await super.onInit(); const graph = graphfi().using(SPFx(this.context)); } // ...","title":"Using @pnp/graph graphfi factory interface in SPFx"},{"location":"getting-started/#using-both-pnpsp-and-pnpgraph-in-spfx","text":"import { spfi, SPFx as spSPFx } from \"@pnp/sp\"; import { graphfi, SPFx as graphSPFx} from \"@pnp/graph\"; // ... protected async onInit(): Promise<void> { await super.onInit(); const sp = spfi().using(spSPFx(this.context)); const graph = graphfi().using(graphSPFx(this.context)); } // ...","title":"Using both @pnp/sp and @pnp/graph in SPFx"},{"location":"getting-started/#establish-context-within-an-spfx-service","text":"Because you do not have full access to the context object within a service you need to setup things a little differently. If you do not need AAD tokens you can leave that part out and specify just the pageContext (Option 2). import { ServiceKey, ServiceScope } from \"@microsoft/sp-core-library\"; import { PageContext } from \"@microsoft/sp-page-context\"; import { AadTokenProviderFactory } from \"@microsoft/sp-http\"; import { spfi, SPFx } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; export interface ISampleService { getLists(): Promise<any[]>; } export class SampleService { public static readonly serviceKey: ServiceKey<ISampleService> = ServiceKey.create<ISampleService>('SPFx:SampleService', SampleService); private _sp: SPFI; constructor(serviceScope: ServiceScope) { serviceScope.whenFinished(() => { const pageContext = serviceScope.consume(PageContext.serviceKey); const tokenProviderFactory = serviceScope.consume(AadTokenProviderFactory.serviceKey); //Option 1 - with AADTokenProvider this._sp = spfi().using(SPFx({ aadTokenProviderFactory: tokenProviderFactory, pageContext: pageContext, })); //Option 2 - without AADTokenProvider this._sp = spfi().using(SPFx({ pageContext })); } public getLists(): Promise<any[]> { return this._sp.web.lists(); } }","title":"Establish context within an SPFx service"},{"location":"getting-started/#getting-started-with-nodejs","text":"Due to the way in which Node resolves ESM modules when you use selective imports in node you must include the index.js part of the path. Meaning an import like import \"@pnp/sp/webs\" in examples must be import \"@pnp/sp/webs/index.js\" . Root level imports such as import { spfi } from \"@pnp/sp\" remain correct. The samples in this section demonstrate this for their selective imports.","title":"Getting started with NodeJS"},{"location":"getting-started/#authentication","text":"To call the SharePoint APIs via MSAL you are required to use certificate authentication with your application. Fully covering certificates is outside the scope of these docs, but the following commands were used with openssl to create testing certs for the sample code below. mkdir \\temp cd \\temp openssl req -x509 -newkey rsa:2048 -keyout keytmp.pem -out cert.pem -days 365 -passout pass:HereIsMySuperPass -subj '/C=US/ST=Washington/L=Seattle' openssl rsa -in keytmp.pem -out key.pem -passin pass:HereIsMySuperPass Using the above code you end up with three files, \"cert.pem\", \"key.pem\", and \"keytmp.pem\". The \"cert.pem\" file is uploaded to your AAD application registration. The \"key.pem\" is read as the private key for the configuration.","title":"Authentication"},{"location":"getting-started/#using-pnpsp-spfi-factory-interface-in-nodejs","text":"Version 3 of this library only supports ESModules. If you still require commonjs modules please check out version 2 . The first step is to install the packages that will be needed. You can read more about what each package does starting on the packages page. npm i @pnp/sp @pnp/nodejs Once these are installed you need to import them into your project, to communicate with SharePoint from node we'll need the following imports: import { SPDefault } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; import { readFileSync } from 'fs'; import { Configuration } from \"@azure/msal-node\"; function() { // configure your node options (only once in your application) const buffer = readFileSync(\"c:/temp/key.pem\"); const config: Configuration = { auth: { authority: \"https://login.microsoftonline.com/{tenant id or common}/\", clientId: \"{application (client) i}\", clientCertificate: { thumbprint: \"{certificate thumbprint, displayed in AAD}\", privateKey: buffer.toString(), }, }, }; const sp = spfi().using(SPDefault({ baseUrl: 'https://{my tenant}.sharepoint.com/sites/dev/', msal: { config: config, scopes: [ 'https://{my tenant}.sharepoint.com/.default' ] } })); // make a call to SharePoint and log it in the console const w = await sp.web.select(\"Title\", \"Description\")(); console.log(JSON.stringify(w, null, 4)); }();","title":"Using @pnp/sp spfi factory interface in NodeJS"},{"location":"getting-started/#using-pnpgraph-graphfi-factory-interface-in-nodejs","text":"Similar to the above you can also make calls to the Microsoft Graph API from node using the libraries. Again we start with installing the required resources. You can see ./debug/launch/graph.ts for a live example. npm i @pnp/graph @pnp/nodejs Now we need to import what we'll need to call graph import { graphfi } from \"@pnp/graph\"; import { GraphDefault } from \"@pnp/nodejs\"; import \"@pnp/graph/users/index.js\"; function() { const graph = graphfi().using(GraphDefault({ baseUrl: 'https://graph.microsoft.com', msal: { config: config, scopes: [ 'https://graph.microsoft.com/.default' ] } })); // make a call to Graph and get all the groups const userInfo = await graph.users.top(1)(); console.log(JSON.stringify(userInfo, null, 4)); }();","title":"Using @pnp/graph graphfi factory interface in NodeJS"},{"location":"getting-started/#node-project-using-typescript-producing-commonjs-modules","text":"For TypeScript projects which output commonjs but need to import esm modules you will need to take a few additional steps to use the pnp esm modules. This is true of any esm module with a project structured in this way, not specific to PnP's implementation. It is very possible there are other configurations that make this work, but these steps worked in our testing. We have also provided a basic sample showing this setup. You must install TypeScript @next or you will get errors using node12 module resolution. This may change but is the current behavior when we did our testing. npm install -D typescript@next The tsconfig file for your project should have the \"module\": \"CommonJS\" and \"moduleResolution\": \"node12\", settings in addition to whatever else you need. tsconfig.json { \"compilerOptions\": { \"module\": \"CommonJS\", \"moduleResolution\": \"node12\" } You must then import the esm dependencies using the async import pattern. This works as expected with our selective imports, and vscode will pick up the intellisense as expected. index.ts import { settings } from \"./settings.js\"; // this is a simple example as async await is not supported with commonjs output // at the root. setTimeout(async () => { const { spfi } = await import(\"@pnp/sp\"); const { SPDefault } = await import(\"@pnp/nodejs\"); await import(\"@pnp/sp/webs/index.js\"); const sp = spfi().using(SPDefault({ baseUrl: settings.testing.sp.url, msal: { config: settings.testing.sp.msal.init, scopes: settings.testing.sp.msal.scopes } })); // make a call to SharePoint and log it in the console const w = await sp.web.select(\"Title\", \"Description\")(); console.log(JSON.stringify(w, null, 4)); }, 0); Finally, when launching node you need to include the `` flag with a setting of 'node'. node --experimental-specifier-resolution=node dist/index.js Read more in the releated TypeScript Issue , TS pull request Adding the functionality , and the TS Docs .","title":"Node project using TypeScript producing commonjs modules"},{"location":"getting-started/#single-page-application-context","text":"In some cases you may be working in a client-side application that doesn't have context to the SharePoint site. In that case you will need to utilize the MSAL Client, you can get the details on creating that connection in this article .","title":"Single Page Application Context"},{"location":"getting-started/#selective-imports","text":"This library has a lot of functionality and you may not need all of it. For that reason, we support selective imports which allow you to only import the parts of the sp or graph library you need, which reduces your overall solution bundle size - and enables treeshaking . You can read more about selective imports .","title":"Selective Imports"},{"location":"getting-started/#error-handling","text":"This article describes the most common types of errors generated by the library. It provides context on the error object, and ways to handle the errors. As always you should tailor your error handling to what your application needs. These are ideas that can be applied to many different patterns.","title":"Error Handling"},{"location":"getting-started/#extending-the-library","text":"Because of the way the fluent library is designed by definition it's extendible. That means that if you want to build your own custom functions that extend the features of the library this can be done fairly simply. To get more information about creating your own custom extensions check out extending the library article.","title":"Extending the Library"},{"location":"getting-started/#connect-to-a-different-web","text":"The new factory function allows you to create a connection to a different web maintaining the same setup as your existing interface. You have two options, either to 'AssignFrom' or 'CopyFrom' the base timeline's observers. The below example utilizes 'AssignFrom' but the method would be the same regadless of which route you choose. For more information on these behaviors see Core/Behaviors . import { spfi, SPFx } from \"@pnp/sp\"; import { AssignFrom } from \"@pnp/core\"; import \"@pnp/sp/webs\"; //Connection to the current context's Web const sp = spfi(...); // Option 1: Create a new instance of Queryable const spWebB = spfi({Other Web URL}).using(SPDefault(this.context)); // Option 2: Copy/Assign a new instance of Queryable using the existing const spWebB = spfi({Other Web URL}).using(AssignFrom(sp.web)); // Option 3: Create a new instance of Queryable using other credentials? const spWebB = spfi({Other Web URL}).using(SPDefault(this.context));","title":"Connect to a different Web"},{"location":"getting-started/#next-steps","text":"For more complicated authentication scnearios please review the article describing all of the available authentication methods .","title":"Next Steps"},{"location":"packages/","text":"Packages \u00b6 The following packages comprise the Patterns and Practices client side libraries. All of the packages are published as a set and depend on their peers within the @pnp scope. The latest published version is . Core \u00b6 Central to everything PnPjs builds on with utility methods, Timeline, the behavior plumbing, and the extendable framework. npm install @pnp/core --save Graph \u00b6 This package provides a fluent SDK for calling the Microsoft Graph. npm install @pnp/graph --save Logging \u00b6 A light-weight, subscribable logging framework. npm install @pnp/logging --save MSAL JS Client \u00b6 Provides an msal wrapper suitable for use with PnPjs's request structure. npm install @pnp/msaljsclient --save Nodejs \u00b6 Provides functionality enabling the @pnp libraries within nodejs, including extension methods for working with streams. npm install @pnp/nodejs --save Queryable \u00b6 Extending Timeline this package provides the base functionality to create web requests in a fluent manner. It defines the available moments to which observers are subscribed for building the request. npm install @pnp/queryable --save SP \u00b6 This package provides a fluent SDK for calling SharePoint. npm install @pnp/sp --save","title":"Packages"},{"location":"packages/#packages","text":"The following packages comprise the Patterns and Practices client side libraries. All of the packages are published as a set and depend on their peers within the @pnp scope. The latest published version is .","title":"Packages"},{"location":"packages/#core","text":"Central to everything PnPjs builds on with utility methods, Timeline, the behavior plumbing, and the extendable framework. npm install @pnp/core --save","title":"Core"},{"location":"packages/#graph","text":"This package provides a fluent SDK for calling the Microsoft Graph. npm install @pnp/graph --save","title":"Graph"},{"location":"packages/#logging","text":"A light-weight, subscribable logging framework. npm install @pnp/logging --save","title":"Logging"},{"location":"packages/#msal-js-client","text":"Provides an msal wrapper suitable for use with PnPjs's request structure. npm install @pnp/msaljsclient --save","title":"MSAL JS Client"},{"location":"packages/#nodejs","text":"Provides functionality enabling the @pnp libraries within nodejs, including extension methods for working with streams. npm install @pnp/nodejs --save","title":"Nodejs"},{"location":"packages/#queryable","text":"Extending Timeline this package provides the base functionality to create web requests in a fluent manner. It defines the available moments to which observers are subscribed for building the request. npm install @pnp/queryable --save","title":"Queryable"},{"location":"packages/#sp","text":"This package provides a fluent SDK for calling SharePoint. npm install @pnp/sp --save","title":"SP"},{"location":"transition-guide/","text":"Transition Guide \u00b6 It is our hope that the transition from version 2.* to 3.* will be as painless as possible, however given the transition we have made from a global sp object to an instance based object some architectural and inital setup changes will need to be addressed. In the following sections we endevor to provide an overview of what changes will be required. If we missed something, please let us know in the issues list so we can update the guide. Thanks! For a full, detailed list of what's been added, updated, and removed please see our CHANGELOG For a full sample project, utilizing SPFx 1.14 and V3 that showcases some of the more dramatic changes to the library check out this sample . Benefits and Advancements in V3 \u00b6 For version 2 the core themes were selective imports, a model based on factory functions & interfaces, and improving the docs. This foundation gave us the opportunity to re-write the entire request pipeline internals with minimal external library changes - showing a bit of long-term planning \ud83d\ude42. With version 3 your required updates are likely to only affect the initial configuration of the library, a huge accomplishment when updating the entire internals. Our request pipeline remained largely unchanged since it was first written ~5 years ago, hard to change something so central to the library. The advantage of this update it is now easy for developers to inject their own logic into the request process. As always, this work was based on feedback over the years and understanding how we can be a better library. The new observer design allows you to customize every aspect of the request, in a much clearer way than was previously possible. In addition this work greatly reduced internal boilerplate code and optimized for library size. We reduced the size of sp & graph libraries by almost 2/3. As well we embraced a fully async design built around the new Timeline . Check out the new model around authoring observers and understand how they relate to moments . We feel this new architecture will allow far greater flexibility for consumers of the library to customize the behavior to exactly meet their needs. We also used this as an opportunity to remove duplicate methods, clean up and improve our typings & method signatures, and drop legacy methods. Be sure to review the changelog . As always we do our best to minimize breaking changes but major versions are breaking versions. We thank you for using the library. Your continued feedback drives these improvements, and we look forward to seeing what you build! Global vs Instance Architecture \u00b6 The biggest change in version 3 of the library is the movement away from the globally defined sp and graph objects. Starting in version 2.1.0 we added the concept of Isolated Runtime which allowed you to create a separate instance of the global object that would have a separate configuration. We found that the implementation was finicky and prone to issues, so we have rebuilt the internals of the library from the ground up to better address this need. In doing so, we decided not to offer a global object at all. Because of this change, any architecture that relies on the sp or graph objects being configured during initialization and then reused throughout the solution will need to be rethought. Essentially you have three options: Create a new spfi / graphfi object wherever it's required. Create a service architecture that can return a previously configured instance or utilize an instance and return the results Utilize a Project Preset file . In other words, the sp and graph objects have been deprecated and will need to be replaced. For more information on getting started with these new setup methods please see the Getting Started docs for a deeper look into the Queryable interface see Queryable . AssignFrom and CopyFrom \u00b6 With the new Querable instance architecture we have provided a way to branch from one instance to another. To do this we provide two methods: AssignFrom and CopyFrom. These methods can be helpful when you want to establish a new instance to which you might apply other behaviors but want to reuse the configuration from a source. To learn more about them check out the Core/Behaviors documentation. Dropping \".get()\" \u00b6 If you are still using the queryableInstance.get() method of queryable you must replace it with a direct invoke call queryableInstance() . Batching \u00b6 Another benefit of the new updated internals is a significantly streamlined and simplified process for batching requests. Essentially, the interface for SP and Graph now function the same. A new module called \"batching\" will need to be imported which then provides the batched interface which will return a tuple with a new Querable instance and an execute function. To see more details check out Batching . Web -> SPFI \u00b6 In V2, to connect to a different web you would use the function const web = Web({Other Web URL}); In V3 you would create a new instance of queryable connecting to the web of your choice. This new method provides you significantly more flexibility by not only allowing you to easily connect to other webs in the same tenant but also to webs in other tenants. import { spfi, SPFx } from \"@pnp/sp\"; import { Web } from \"@pnp/sp/webs\"; const spWebA = spfi().using(SPFx(this.context)); // Create a new instance of Queryable const spWebB = spfi(\"{Other Web URL}\").using(SPFx(this.context)); // Copy/Assign a new instance of Queryable using the existing const spWebC = spfi(\"{Other Web URL}\").using(AssignFrom(sp.web)); // Create a new instance of Queryable using other credentials? const spWebD = spfi(\"{Other Web URL}\").using(SPFx(this.context)); // as well you can use the tuple pattern and the Web constructor, which will copy all the observers from the object but set the url to the one provided const spWebE = Web([spWebA.web, \"{Absolute URL of Other Web}\"]); Please see the documentation for more information on the updated Web constructor . Dropping -Commonjs Packages \u00b6 Starting with v3 we are dropping the commonjs versions of all packages. Previously we released these as we worked to transition to esm and the current node didn't yet support esm. With esm now a supported module type, and having done the work to ensure they work in node we feel it is a good time to drop the -commonjs variants. Please see documentation on Getting started with NodeJS Project using TypeScript producing CommonJS modules","title":"V2->V3 Transition"},{"location":"transition-guide/#transition-guide","text":"It is our hope that the transition from version 2.* to 3.* will be as painless as possible, however given the transition we have made from a global sp object to an instance based object some architectural and inital setup changes will need to be addressed. In the following sections we endevor to provide an overview of what changes will be required. If we missed something, please let us know in the issues list so we can update the guide. Thanks! For a full, detailed list of what's been added, updated, and removed please see our CHANGELOG For a full sample project, utilizing SPFx 1.14 and V3 that showcases some of the more dramatic changes to the library check out this sample .","title":"Transition Guide"},{"location":"transition-guide/#benefits-and-advancements-in-v3","text":"For version 2 the core themes were selective imports, a model based on factory functions & interfaces, and improving the docs. This foundation gave us the opportunity to re-write the entire request pipeline internals with minimal external library changes - showing a bit of long-term planning \ud83d\ude42. With version 3 your required updates are likely to only affect the initial configuration of the library, a huge accomplishment when updating the entire internals. Our request pipeline remained largely unchanged since it was first written ~5 years ago, hard to change something so central to the library. The advantage of this update it is now easy for developers to inject their own logic into the request process. As always, this work was based on feedback over the years and understanding how we can be a better library. The new observer design allows you to customize every aspect of the request, in a much clearer way than was previously possible. In addition this work greatly reduced internal boilerplate code and optimized for library size. We reduced the size of sp & graph libraries by almost 2/3. As well we embraced a fully async design built around the new Timeline . Check out the new model around authoring observers and understand how they relate to moments . We feel this new architecture will allow far greater flexibility for consumers of the library to customize the behavior to exactly meet their needs. We also used this as an opportunity to remove duplicate methods, clean up and improve our typings & method signatures, and drop legacy methods. Be sure to review the changelog . As always we do our best to minimize breaking changes but major versions are breaking versions. We thank you for using the library. Your continued feedback drives these improvements, and we look forward to seeing what you build!","title":"Benefits and Advancements in V3"},{"location":"transition-guide/#global-vs-instance-architecture","text":"The biggest change in version 3 of the library is the movement away from the globally defined sp and graph objects. Starting in version 2.1.0 we added the concept of Isolated Runtime which allowed you to create a separate instance of the global object that would have a separate configuration. We found that the implementation was finicky and prone to issues, so we have rebuilt the internals of the library from the ground up to better address this need. In doing so, we decided not to offer a global object at all. Because of this change, any architecture that relies on the sp or graph objects being configured during initialization and then reused throughout the solution will need to be rethought. Essentially you have three options: Create a new spfi / graphfi object wherever it's required. Create a service architecture that can return a previously configured instance or utilize an instance and return the results Utilize a Project Preset file . In other words, the sp and graph objects have been deprecated and will need to be replaced. For more information on getting started with these new setup methods please see the Getting Started docs for a deeper look into the Queryable interface see Queryable .","title":"Global vs Instance Architecture"},{"location":"transition-guide/#assignfrom-and-copyfrom","text":"With the new Querable instance architecture we have provided a way to branch from one instance to another. To do this we provide two methods: AssignFrom and CopyFrom. These methods can be helpful when you want to establish a new instance to which you might apply other behaviors but want to reuse the configuration from a source. To learn more about them check out the Core/Behaviors documentation.","title":"AssignFrom and CopyFrom"},{"location":"transition-guide/#dropping-get","text":"If you are still using the queryableInstance.get() method of queryable you must replace it with a direct invoke call queryableInstance() .","title":"Dropping \".get()\""},{"location":"transition-guide/#batching","text":"Another benefit of the new updated internals is a significantly streamlined and simplified process for batching requests. Essentially, the interface for SP and Graph now function the same. A new module called \"batching\" will need to be imported which then provides the batched interface which will return a tuple with a new Querable instance and an execute function. To see more details check out Batching .","title":"Batching"},{"location":"transition-guide/#web-spfi","text":"In V2, to connect to a different web you would use the function const web = Web({Other Web URL}); In V3 you would create a new instance of queryable connecting to the web of your choice. This new method provides you significantly more flexibility by not only allowing you to easily connect to other webs in the same tenant but also to webs in other tenants. import { spfi, SPFx } from \"@pnp/sp\"; import { Web } from \"@pnp/sp/webs\"; const spWebA = spfi().using(SPFx(this.context)); // Create a new instance of Queryable const spWebB = spfi(\"{Other Web URL}\").using(SPFx(this.context)); // Copy/Assign a new instance of Queryable using the existing const spWebC = spfi(\"{Other Web URL}\").using(AssignFrom(sp.web)); // Create a new instance of Queryable using other credentials? const spWebD = spfi(\"{Other Web URL}\").using(SPFx(this.context)); // as well you can use the tuple pattern and the Web constructor, which will copy all the observers from the object but set the url to the one provided const spWebE = Web([spWebA.web, \"{Absolute URL of Other Web}\"]); Please see the documentation for more information on the updated Web constructor .","title":"Web -&gt; SPFI"},{"location":"transition-guide/#dropping-commonjs-packages","text":"Starting with v3 we are dropping the commonjs versions of all packages. Previously we released these as we worked to transition to esm and the current node didn't yet support esm. With esm now a supported module type, and having done the work to ensure they work in node we feel it is a good time to drop the -commonjs variants. Please see documentation on Getting started with NodeJS Project using TypeScript producing CommonJS modules","title":"Dropping -Commonjs Packages"},{"location":"concepts/adv-clientside-pages/","text":"Client-Side Pages \u00b6 The client-side pages API included in this library is an implementation that was reverse engineered from the first-party API's and is unsupported by Microsoft. Given how flexible pages are we've done our best to give you the endpoints that will provide the functionality you need but that said, implementing these APIs is one of the more complicated tasks you can do. It's especially important to understand the product team is constantly changing the features of pages and often that will also end up changing how the APIs that we've leveraged behave and because they are not offical third-party APIs this can cause our implementation to break. In order to fix those breaks we need to go back to the beginning and re-validate how the endpoints work searching for what has changed and then implementing those changes in our code. This is by no means simple. If you are reporting an issue with the pages API be aware that it may take significant time for us to unearth what is happening and fix it. Any research that you can provide when sharing your issue will go a long way in expediating that process, or better yet, if you can track it down and submit a PR with a fix we would be most greatful. Tricks to help you figure out how to add first-party web parts to your page \u00b6 This section is to offer you methods to be able to reverse engineer some of the first party web parts to help figure out how to add them to the page using the addControl method. Your first step needs to be creating a test page that you can inspect. Create a new Site Page. Open the browser console, and navigate to the network tab Filter the network tab for Fetch/XHR and then type SavePage to filter for the specific network calls. Add and configure the web part you want to reverse engineer and then save the page as draft. The network tab will now show a SavePageAsDraft call and you can then look at the Payload of that call You then want to specifically look at the CanvasContent1 property and copy that value. You can then paste it into a temporary file with the .json extension in your code editor so you can inspect the payload. The value is an array of objects, and each object (except the last) is the definition of the web part. Below is an example (as of the last change date of this document) of what the QuickLinks web part looks like. One key takeaway from this file is the webPartId property which can be used when filtering for the right web part definition after getting a collection from sp.web.getClientsideWebParts(); . Note that it could change at any time so please do not rely on this data, please use it as an example only. { \"position\": { \"layoutIndex\": 1, \"zoneIndex\": 1, \"sectionIndex\": 1, \"sectionFactor\": 12, \"controlIndex\": 1 }, \"controlType\": 3, \"id\": \"00000000-58fd-448c-9e40-6691ce30e3e4\", \"webPartId\": \"c70391ea-0b10-4ee9-b2b4-006d3fcad0cd\", \"addedFromPersistedData\": true, \"reservedHeight\": 141, \"reservedWidth\": 909, \"webPartData\": { \"id\": \"c70391ea-0b10-4ee9-b2b4-006d3fcad0cd\", \"instanceId\": \"00000000-58fd-448c-9e40-6691ce30e3e4\", \"title\": \"Quick links\", \"description\": \"Show a collection of links to content such as documents, images, videos, and more in a variety of layouts with options for icons, images, and audience targeting.\", \"audiences\": [], \"serverProcessedContent\": { \"htmlStrings\": {}, \"searchablePlainTexts\": { \"items[0].title\": \"PnPjs Title\" }, \"imageSources\": {}, \"links\": { \"baseUrl\": \"https://contoso.sharepoint.com/sites/PnPJS\", \"items[0].sourceItem.url\": \"/sites/PnPJS/SitePages/pnpjsTestV2.aspx\" }, \"componentDependencies\": { \"layoutComponentId\": \"706e33c8-af37-4e7b-9d22-6e5694d92a6f\" } }, \"dataVersion\": \"2.2\", \"properties\": { \"items\": [ { \"sourceItem\": { \"guids\": { \"siteId\": \"00000000-4657-40d2-843d-3d6c72e647ff\", \"webId\": \"00000000-e714-4de6-88db-b0ac40d17850\", \"listId\": \"{00000000-8ED8-4E43-82BD-56794D9AB290}\", \"uniqueId\": \"00000000-6779-4979-adad-c120a39fe311\" }, \"itemType\": 0, \"fileExtension\": \".ASPX\", \"progId\": null }, \"thumbnailType\": 2, \"id\": 1, \"description\": \"\", \"fabricReactIcon\": { \"iconName\": \"heartfill\" }, \"altText\": \"\", \"rawPreviewImageMinCanvasWidth\": 32767 } ], \"isMigrated\": true, \"layoutId\": \"CompactCard\", \"shouldShowThumbnail\": true, \"imageWidth\": 100, \"buttonLayoutOptions\": { \"showDescription\": false, \"buttonTreatment\": 2, \"iconPositionType\": 2, \"textAlignmentVertical\": 2, \"textAlignmentHorizontal\": 2, \"linesOfText\": 2 }, \"listLayoutOptions\": { \"showDescription\": false, \"showIcon\": true }, \"waffleLayoutOptions\": { \"iconSize\": 1, \"onlyShowThumbnail\": false }, \"hideWebPartWhenEmpty\": true, \"dataProviderId\": \"QuickLinks\", \"webId\": \"00000000-e714-4de6-88db-b0ac40d17850\", \"siteId\": \"00000000-4657-40d2-843d-3d6c72e647ff\" } } } At this point the only aspect of the above JSON payload you're going to be paying attention to is the webPartData . We have exposed title , description , and dataVersion as default properties of the ClientsideWebpart class. In addition we provide a getProperties , setProperties , getServerProcessedContent , setServerProcessedContent methods. The difference in this case in these set base methods is that it will merge the object you pass into those methods with the values already on the object. The code below gives a incomplete but demonstrative example of how you would extend the ClientsideWebpart class to provide an interface to build a custom class for the QuickLinks web part illustrated in our JSON payload above. This code assumes you have already added the control to a section. For more information about that step see the documentation for Add Controls import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { ClientsideWebpart } from \"@pnp/sp/clientside-pages\"; //Define interface based on JSON object above interface IQLItem { sourceItem: { guids: { siteId: string; webId: string; listId: string; uniqueId: string; }, itemType: number; fileExtension: string; progId: string; } thumbnailType: number; id: number; description: string; fabricReactIcon: { iconName: string; }; altText: string; rawPreviewImageMinCanvasWidth: number; } // we create a class to wrap our functionality in a reusable way class QuickLinksWebpart extends ClientsideWebpart { constructor(control: ClientsideWebpart) { super((<any>control).json); } // add property getter/setter for what we need, in this case items array within properties public get items(): IQLItem[] { return this.json.webPartData?.properties?.items || []; } public set items(value: IQLItem[]) { this.json.webPartData.properties?.items = value; } } // now we load our page const page = await sp.web.loadClientsidePage(\"/sites/PnPJS/SitePages/QuickLinks-Web-Part-Test.aspx\"); // get our part and pass it to the constructor of our wrapper class. const part = new QuickLinksWebpart(page.sections[0].columns[0].getControl(0)); //Need to set all the properties part.items = [{IQLItem_properties}]; await page.save();","title":"Client-Side Pages"},{"location":"concepts/adv-clientside-pages/#client-side-pages","text":"The client-side pages API included in this library is an implementation that was reverse engineered from the first-party API's and is unsupported by Microsoft. Given how flexible pages are we've done our best to give you the endpoints that will provide the functionality you need but that said, implementing these APIs is one of the more complicated tasks you can do. It's especially important to understand the product team is constantly changing the features of pages and often that will also end up changing how the APIs that we've leveraged behave and because they are not offical third-party APIs this can cause our implementation to break. In order to fix those breaks we need to go back to the beginning and re-validate how the endpoints work searching for what has changed and then implementing those changes in our code. This is by no means simple. If you are reporting an issue with the pages API be aware that it may take significant time for us to unearth what is happening and fix it. Any research that you can provide when sharing your issue will go a long way in expediating that process, or better yet, if you can track it down and submit a PR with a fix we would be most greatful.","title":"Client-Side Pages"},{"location":"concepts/adv-clientside-pages/#tricks-to-help-you-figure-out-how-to-add-first-party-web-parts-to-your-page","text":"This section is to offer you methods to be able to reverse engineer some of the first party web parts to help figure out how to add them to the page using the addControl method. Your first step needs to be creating a test page that you can inspect. Create a new Site Page. Open the browser console, and navigate to the network tab Filter the network tab for Fetch/XHR and then type SavePage to filter for the specific network calls. Add and configure the web part you want to reverse engineer and then save the page as draft. The network tab will now show a SavePageAsDraft call and you can then look at the Payload of that call You then want to specifically look at the CanvasContent1 property and copy that value. You can then paste it into a temporary file with the .json extension in your code editor so you can inspect the payload. The value is an array of objects, and each object (except the last) is the definition of the web part. Below is an example (as of the last change date of this document) of what the QuickLinks web part looks like. One key takeaway from this file is the webPartId property which can be used when filtering for the right web part definition after getting a collection from sp.web.getClientsideWebParts(); . Note that it could change at any time so please do not rely on this data, please use it as an example only. { \"position\": { \"layoutIndex\": 1, \"zoneIndex\": 1, \"sectionIndex\": 1, \"sectionFactor\": 12, \"controlIndex\": 1 }, \"controlType\": 3, \"id\": \"00000000-58fd-448c-9e40-6691ce30e3e4\", \"webPartId\": \"c70391ea-0b10-4ee9-b2b4-006d3fcad0cd\", \"addedFromPersistedData\": true, \"reservedHeight\": 141, \"reservedWidth\": 909, \"webPartData\": { \"id\": \"c70391ea-0b10-4ee9-b2b4-006d3fcad0cd\", \"instanceId\": \"00000000-58fd-448c-9e40-6691ce30e3e4\", \"title\": \"Quick links\", \"description\": \"Show a collection of links to content such as documents, images, videos, and more in a variety of layouts with options for icons, images, and audience targeting.\", \"audiences\": [], \"serverProcessedContent\": { \"htmlStrings\": {}, \"searchablePlainTexts\": { \"items[0].title\": \"PnPjs Title\" }, \"imageSources\": {}, \"links\": { \"baseUrl\": \"https://contoso.sharepoint.com/sites/PnPJS\", \"items[0].sourceItem.url\": \"/sites/PnPJS/SitePages/pnpjsTestV2.aspx\" }, \"componentDependencies\": { \"layoutComponentId\": \"706e33c8-af37-4e7b-9d22-6e5694d92a6f\" } }, \"dataVersion\": \"2.2\", \"properties\": { \"items\": [ { \"sourceItem\": { \"guids\": { \"siteId\": \"00000000-4657-40d2-843d-3d6c72e647ff\", \"webId\": \"00000000-e714-4de6-88db-b0ac40d17850\", \"listId\": \"{00000000-8ED8-4E43-82BD-56794D9AB290}\", \"uniqueId\": \"00000000-6779-4979-adad-c120a39fe311\" }, \"itemType\": 0, \"fileExtension\": \".ASPX\", \"progId\": null }, \"thumbnailType\": 2, \"id\": 1, \"description\": \"\", \"fabricReactIcon\": { \"iconName\": \"heartfill\" }, \"altText\": \"\", \"rawPreviewImageMinCanvasWidth\": 32767 } ], \"isMigrated\": true, \"layoutId\": \"CompactCard\", \"shouldShowThumbnail\": true, \"imageWidth\": 100, \"buttonLayoutOptions\": { \"showDescription\": false, \"buttonTreatment\": 2, \"iconPositionType\": 2, \"textAlignmentVertical\": 2, \"textAlignmentHorizontal\": 2, \"linesOfText\": 2 }, \"listLayoutOptions\": { \"showDescription\": false, \"showIcon\": true }, \"waffleLayoutOptions\": { \"iconSize\": 1, \"onlyShowThumbnail\": false }, \"hideWebPartWhenEmpty\": true, \"dataProviderId\": \"QuickLinks\", \"webId\": \"00000000-e714-4de6-88db-b0ac40d17850\", \"siteId\": \"00000000-4657-40d2-843d-3d6c72e647ff\" } } } At this point the only aspect of the above JSON payload you're going to be paying attention to is the webPartData . We have exposed title , description , and dataVersion as default properties of the ClientsideWebpart class. In addition we provide a getProperties , setProperties , getServerProcessedContent , setServerProcessedContent methods. The difference in this case in these set base methods is that it will merge the object you pass into those methods with the values already on the object. The code below gives a incomplete but demonstrative example of how you would extend the ClientsideWebpart class to provide an interface to build a custom class for the QuickLinks web part illustrated in our JSON payload above. This code assumes you have already added the control to a section. For more information about that step see the documentation for Add Controls import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { ClientsideWebpart } from \"@pnp/sp/clientside-pages\"; //Define interface based on JSON object above interface IQLItem { sourceItem: { guids: { siteId: string; webId: string; listId: string; uniqueId: string; }, itemType: number; fileExtension: string; progId: string; } thumbnailType: number; id: number; description: string; fabricReactIcon: { iconName: string; }; altText: string; rawPreviewImageMinCanvasWidth: number; } // we create a class to wrap our functionality in a reusable way class QuickLinksWebpart extends ClientsideWebpart { constructor(control: ClientsideWebpart) { super((<any>control).json); } // add property getter/setter for what we need, in this case items array within properties public get items(): IQLItem[] { return this.json.webPartData?.properties?.items || []; } public set items(value: IQLItem[]) { this.json.webPartData.properties?.items = value; } } // now we load our page const page = await sp.web.loadClientsidePage(\"/sites/PnPJS/SitePages/QuickLinks-Web-Part-Test.aspx\"); // get our part and pass it to the constructor of our wrapper class. const part = new QuickLinksWebpart(page.sections[0].columns[0].getControl(0)); //Need to set all the properties part.items = [{IQLItem_properties}]; await page.save();","title":"Tricks to help you figure out how to add first-party web parts to your page"},{"location":"concepts/authentication/","text":"Authentication \u00b6 One of the more challenging aspects of web development is ensuring you are properly authenticated to access the resources you need. This section is designed to guide you through connecting to the resources you need using the appropriate methods. The new queryable pattern exposes a dedicated auth moment . That moment expects observers with the signature: async function(url, init) { // logic to apply authentication to the request return [url, init]; } If you want to handle authentication yourself, you can follow this example as a general pattern. You can then wrap your authentication in a behavior for easy reuse. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using({behaviors}); const web = sp.web; // we will use custom auth on this web web.on.auth(async function(url, init) { // some code to get a token const token = getToken(); // set the Authorization header in the init (this init is what is passed directly to the fetch call) init.headers[\"Authorization\"] = `Bearer ${token}`; return [url, init]; }); Of course we don't want you to need to write your own authentication so we provide functionality to cover the key scenarios. SharePoint Framework \u00b6 When building in SharePoint Framework you only need to provide the context to either sp or graph to ensure proper authentication. This will use the default SharePoint AAD application to manage scopes. If you would prefer to use a different AAD application please see the MSAL section below. SPFx + SharePoint \u00b6 import { SPFx, spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; // within a webpart, application customizer, or adaptive card extension where the context object is available const sp = spfi().using(SPFx(this.context)); const webData = await sp.web(); SPFx + Graph \u00b6 import { SPFx, graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; // within a webpart, application customizer, or adaptive card extension where the context object is available const graph = graphfi().using(SPFx(this.context)); const meData = await graph.me(); MSAL in Browser \u00b6 We support MSAL for both browser and nodejs by providing a thin wrapper around the official libraries. We won't document the fully possible MSAL configuration, but any parameters supplied are passed through to the underlying implementation. To use the browser MSAL package you'll need to install the @pnp/msaljsclient package which is deployed as a standalone due to the large MSAL dependency. npm install @pnp/msaljsclient --save MSAL + SPFx \u00b6 import { spfi, SPBrowser } from \"@pnp/sp\"; import { MSAL } from \"@pnp/msaljsclient\"; import \"@pnp/sp/webs\"; const sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPBrowser(), MSAL(configuration, authParams)); const webData = await sp.web(); MSAL + SP + Browser \u00b6 import { spfi, SPBrowser } from \"@pnp/sp\"; import { MSAL } from \"@pnp/msaljsclient\"; import \"@pnp/sp/webs\"; const sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPBrowser(), MSAL(configuration, authParams)); const webData = await sp.web(); MSAL + SPFx + Graph \u00b6 import { SPFx, graphfi } from \"@pnp/graph\"; import { MSAL } from \"@pnp/msaljsclient\"; import \"@pnp/graph/users\"; // within a webpart, application customizer, or adaptive card extension where the context object is available const graph = graphfi().using(SPFx(this.context), MSAL(configuration, authParams)); const meData = await graph.me(); MSAL + Graph + Browser \u00b6 import { GraphBrowser, graphfi } from \"@pnp/graph\"; import { MSAL } from \"@pnp/msaljsclient\"; import \"@pnp/graph/users\"; // within a webpart, application customizer, or adaptive card extension where the context object is available const graph = graphfi().using(GraphBrowser(), MSAL(configuration, authParams)); const meData = await graph.me(); MSAL Nodejs \u00b6 Be sure to review getting authentication setup for Nodejs. For nodejs we support MSAL through the msal-node library. Again we provide a thin wrapper to allow it to work within our request flow. MSAL + SP + Nodejs \u00b6 The SPDefault exported by the nodejs library include MSAL and takes the parameters directly. import { SPDefault } from \"@pnp/nodejs\"; import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(\"https://318studios.sharepoint.com/sites/dev\").using(SPDefault({ msal: { config, scopes, }, })); const webData = await sp.web(); MSAL + Graph + Nodejs \u00b6 The GraphDefault exported by the nodejs library include MSAL and takes the parameters directly. import { GraphDefault } from \"@pnp/nodejs\"; import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi().using(GraphDefault({ msal: { config, scopes, }, })); const meData = await graph.me();","title":"Authentication"},{"location":"concepts/authentication/#authentication","text":"One of the more challenging aspects of web development is ensuring you are properly authenticated to access the resources you need. This section is designed to guide you through connecting to the resources you need using the appropriate methods. The new queryable pattern exposes a dedicated auth moment . That moment expects observers with the signature: async function(url, init) { // logic to apply authentication to the request return [url, init]; } If you want to handle authentication yourself, you can follow this example as a general pattern. You can then wrap your authentication in a behavior for easy reuse. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using({behaviors}); const web = sp.web; // we will use custom auth on this web web.on.auth(async function(url, init) { // some code to get a token const token = getToken(); // set the Authorization header in the init (this init is what is passed directly to the fetch call) init.headers[\"Authorization\"] = `Bearer ${token}`; return [url, init]; }); Of course we don't want you to need to write your own authentication so we provide functionality to cover the key scenarios.","title":"Authentication"},{"location":"concepts/authentication/#sharepoint-framework","text":"When building in SharePoint Framework you only need to provide the context to either sp or graph to ensure proper authentication. This will use the default SharePoint AAD application to manage scopes. If you would prefer to use a different AAD application please see the MSAL section below.","title":"SharePoint Framework"},{"location":"concepts/authentication/#spfx-sharepoint","text":"import { SPFx, spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; // within a webpart, application customizer, or adaptive card extension where the context object is available const sp = spfi().using(SPFx(this.context)); const webData = await sp.web();","title":"SPFx + SharePoint"},{"location":"concepts/authentication/#spfx-graph","text":"import { SPFx, graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; // within a webpart, application customizer, or adaptive card extension where the context object is available const graph = graphfi().using(SPFx(this.context)); const meData = await graph.me();","title":"SPFx + Graph"},{"location":"concepts/authentication/#msal-in-browser","text":"We support MSAL for both browser and nodejs by providing a thin wrapper around the official libraries. We won't document the fully possible MSAL configuration, but any parameters supplied are passed through to the underlying implementation. To use the browser MSAL package you'll need to install the @pnp/msaljsclient package which is deployed as a standalone due to the large MSAL dependency. npm install @pnp/msaljsclient --save","title":"MSAL in Browser"},{"location":"concepts/authentication/#msal-spfx","text":"import { spfi, SPBrowser } from \"@pnp/sp\"; import { MSAL } from \"@pnp/msaljsclient\"; import \"@pnp/sp/webs\"; const sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPBrowser(), MSAL(configuration, authParams)); const webData = await sp.web();","title":"MSAL + SPFx"},{"location":"concepts/authentication/#msal-sp-browser","text":"import { spfi, SPBrowser } from \"@pnp/sp\"; import { MSAL } from \"@pnp/msaljsclient\"; import \"@pnp/sp/webs\"; const sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPBrowser(), MSAL(configuration, authParams)); const webData = await sp.web();","title":"MSAL + SP + Browser"},{"location":"concepts/authentication/#msal-spfx-graph","text":"import { SPFx, graphfi } from \"@pnp/graph\"; import { MSAL } from \"@pnp/msaljsclient\"; import \"@pnp/graph/users\"; // within a webpart, application customizer, or adaptive card extension where the context object is available const graph = graphfi().using(SPFx(this.context), MSAL(configuration, authParams)); const meData = await graph.me();","title":"MSAL + SPFx + Graph"},{"location":"concepts/authentication/#msal-graph-browser","text":"import { GraphBrowser, graphfi } from \"@pnp/graph\"; import { MSAL } from \"@pnp/msaljsclient\"; import \"@pnp/graph/users\"; // within a webpart, application customizer, or adaptive card extension where the context object is available const graph = graphfi().using(GraphBrowser(), MSAL(configuration, authParams)); const meData = await graph.me();","title":"MSAL + Graph + Browser"},{"location":"concepts/authentication/#msal-nodejs","text":"Be sure to review getting authentication setup for Nodejs. For nodejs we support MSAL through the msal-node library. Again we provide a thin wrapper to allow it to work within our request flow.","title":"MSAL Nodejs"},{"location":"concepts/authentication/#msal-sp-nodejs","text":"The SPDefault exported by the nodejs library include MSAL and takes the parameters directly. import { SPDefault } from \"@pnp/nodejs\"; import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(\"https://318studios.sharepoint.com/sites/dev\").using(SPDefault({ msal: { config, scopes, }, })); const webData = await sp.web();","title":"MSAL + SP + Nodejs"},{"location":"concepts/authentication/#msal-graph-nodejs","text":"The GraphDefault exported by the nodejs library include MSAL and takes the parameters directly. import { GraphDefault } from \"@pnp/nodejs\"; import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi().using(GraphDefault({ msal: { config, scopes, }, })); const meData = await graph.me();","title":"MSAL + Graph + Nodejs"},{"location":"concepts/batching-caching/","text":"Batching and Caching \u00b6 When optimizing for performance you can combine batching and caching to reduce the overall number of requests. On the first request any cachable data is stored as expected once the request completes. On subsequent requests if data is found in the cache it is returned immediately and that request is not added to the batch, in fact the batch will never register the request. This can work across many requests such that some returned cached data and others do not - the non-cached requests will be added to and processed by the batch as expected. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import { Caching } from \"@pnp/queryable\"; const sp = spfi(...); const [batchedSP, execute] = await sp.batched(); batchedSP.using(Caching()); batchedSP.web().then(console.log); batchedSP.web.lists().then(console.log); // execute the first set of batched requests, no information is currently cached await execute(); // create a new batch const [batchedSP2, execute2] = await sp.batched(); batchedSP2.using(Caching()); // add the same requests - this simulates the user navigating away from or reloading the page batchedSP2.web().then(console.log); batchedSP2.web.lists().then(console.log); // executing the batch will return the cached values from the initial requests await execute2(); In this second example we include an update to the web's title. Because non-get requests are never cached the update code will always run, but the results from the two get requests will resolve from the cache prior to being added to the batch. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import { Caching } from \"@pnp/queryable\"; const sp = spfi(...); const [batchedSP, execute] = await sp.batched(); batchedSP.using(Caching()); batchedSP.web().then(console.log); batchedSP.web.lists().then(console.log); // this will never be cached batchedSP.web.update({ Title: \"dev web 1\", }); // execute the first set of batched requests, no information is currently cached await execute(); // create a new batch const [batchedSP2, execute2] = await sp.batched(); batchedSP2.using(Caching()); // add the same requests - this simulates the user navigating away from or reloading the page batchedSP2.web().then(console.log); batchedSP2.web.lists().then(console.log); // this will never be cached batchedSP2.web.update({ Title: \"dev web 2\", }); // executing the batch will return the cached values from the initial requests await execute2();","title":"Batching & Caching"},{"location":"concepts/batching-caching/#batching-and-caching","text":"When optimizing for performance you can combine batching and caching to reduce the overall number of requests. On the first request any cachable data is stored as expected once the request completes. On subsequent requests if data is found in the cache it is returned immediately and that request is not added to the batch, in fact the batch will never register the request. This can work across many requests such that some returned cached data and others do not - the non-cached requests will be added to and processed by the batch as expected. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import { Caching } from \"@pnp/queryable\"; const sp = spfi(...); const [batchedSP, execute] = await sp.batched(); batchedSP.using(Caching()); batchedSP.web().then(console.log); batchedSP.web.lists().then(console.log); // execute the first set of batched requests, no information is currently cached await execute(); // create a new batch const [batchedSP2, execute2] = await sp.batched(); batchedSP2.using(Caching()); // add the same requests - this simulates the user navigating away from or reloading the page batchedSP2.web().then(console.log); batchedSP2.web.lists().then(console.log); // executing the batch will return the cached values from the initial requests await execute2(); In this second example we include an update to the web's title. Because non-get requests are never cached the update code will always run, but the results from the two get requests will resolve from the cache prior to being added to the batch. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import { Caching } from \"@pnp/queryable\"; const sp = spfi(...); const [batchedSP, execute] = await sp.batched(); batchedSP.using(Caching()); batchedSP.web().then(console.log); batchedSP.web.lists().then(console.log); // this will never be cached batchedSP.web.update({ Title: \"dev web 1\", }); // execute the first set of batched requests, no information is currently cached await execute(); // create a new batch const [batchedSP2, execute2] = await sp.batched(); batchedSP2.using(Caching()); // add the same requests - this simulates the user navigating away from or reloading the page batchedSP2.web().then(console.log); batchedSP2.web.lists().then(console.log); // this will never be cached batchedSP2.web.update({ Title: \"dev web 2\", }); // executing the batch will return the cached values from the initial requests await execute2();","title":"Batching and Caching"},{"location":"concepts/batching/","text":"Batching \u00b6 Where possible batching can significantly increase application performance by combining multiple requests to the server into one. This is especially useful when first establishing state, but applies for any scenario where you need to make multiple requests before loading or based on a user action. Batching is supported within the sp and graph libraries as shown below. SP Example \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/batching\"; const sp = spfi(...); const [batchedSP, execute] = sp.batched(); let res = []; // you need to use .then syntax here as otherwise the application will stop and await the result batchedSP.web().then(r => res.push(r)); // you need to use .then syntax here as otherwise the application will stop and await the result // ODATA operations such as select, filter, and expand are supported as normal batchedSP.web.lists.select(\"Title\")().then(r => res.push(r)); // Executes the batched calls await execute(); // Results for all batched calls are available for(let i = 0; i < res.length; i++) { ///Do something with the results } Using a batched web \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/batching\"; const sp = spfi(...); const [batchedWeb, execute] = sp.web.batched(); let res = []; // you need to use .then syntax here as otherwise the application will stop and await the result batchedWeb().then(r => res.push(r)); // you need to use .then syntax here as otherwise the application will stop and await the result // ODATA operations such as select, filter, and expand are supported as normal batchedWeb.lists.select(\"Title\")().then(r => res.push(r)); // Executes the batched calls await execute(); // Results for all batched calls are available for(let i = 0; i < res.length; i++) { ///Do something with the results } Batches must be for the same web, you cannot combine requests from multiple webs into a batch. Graph Example \u00b6 import { graphfi } from \"@pnp/graph\"; import { GraphDefault } from \"@pnp/nodejs\"; import \"@pnp/graph/users\"; import \"@pnp/graph/groups\"; import \"@pnp/graph/batching\"; const graph = graphfi().using(GraphDefault({ /* ... */ })); const [batchedGraph, execute] = graph.batched(); let res = []; // Pushes the results of these calls to an array // you need to use .then syntax here as otherwise the application will stop and await the result batchedGraph.users().then(r => res.push(r)); // you need to use .then syntax here as otherwise the application will stop and await the result // ODATA operations such as select, filter, and expand are supported as normal batchedGraph.groups.select(\"Id\")().then(r => res.push(r)); // Executes the batched calls await execute(); // Results for all batched calls are available for(let i=0; i<res.length; i++){ // Do something with the results } Advanced Batching \u00b6 For most cases the above usage should be sufficient, however you may be in a situation where you do not have convenient access to either an spfi instance or a web. Let's say for example you want to add a lot of items to a list and have an IList. You can in these cases use the createBatch function directly. We recommend as much as possible using the sp or web or graph batched method, but also provide this additional flexibility if you need it. import { createBatch } from \"@pnp/sp/batching\"; import { SPDefault } from \"@pnp/nodejs\"; import { IList } from \"@pnp/sp/lists\"; import \"@pnp/sp/items/list\"; const sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPDefault({ /* ... */ })); // in one part of your application you setup a list instance const list: IList = sp.web.lists.getByTitle(\"MyList\"); // in another part of your application you want to batch requests, but do not have the sp instance available, just the IList // note here the first part of the tuple is NOT the object, rather the behavior that enables batching. You must still register it with `using`. const [batchedListBehavior, execute] = createBatch(list); // this list is now batching all its requests list.using(batchedListBehavior); // these will all occur within a single batch list.items.add({ Title: `1: ${getRandomString(4)}` }); list.items.add({ Title: `2: ${getRandomString(4)}` }); list.items.add({ Title: `3: ${getRandomString(4)}` }); list.items.add({ Title: `4: ${getRandomString(4)}` }); await execute(); This is of course also possible with the graph library as shown below. import { graphfi } from \"@pnp/graph\"; import { createBatch } from \"@pnp/graph/batching\"; import { GraphDefault } from \"@pnp/nodejs\"; import \"@pnp/graph/users\"; const graph = graphfi().using(GraphDefault({ /* ... */ })); const users = graph.users; const [batchedBehavior, execute] = createBatch(users); users.using(batchedBehavior); users(); // we can only place the 'users' instance into the batch once graph.users.using(batchedBehavior)(); graph.users.using(batchedBehavior)(); graph.users.using(batchedBehavior)(); await execute(); Don't reuse objects in Batching \u00b6 It shouldn't come up often, but you can not make multiple requests using the same instance of a queryable in a batch. Let's consider the incorrect example below: The error message will be \"This instance is already part of a batch. Please review the docs at https://pnp.github.io/pnpjs/concepts/batching#reuse .\" import { graphfi } from \"@pnp/graph\"; import { createBatch } from \"@pnp/graph/batching\"; import { GraphDefault } from \"@pnp/nodejs\"; import \"@pnp/graph/users\"; const graph = graphfi().using(GraphDefault({ /* ... */ })); // gain a batched instance of the graph const [batchedGraph, execute] = graph.batched(); // we take a reference to the value returned from .users const users = batchedGraph.users; // we invoke it, adding it to the batch (this is a request to /users), it will succeed users(); // we invoke it again, because this instance has already been added to the batch, this request will throw an error users(); // we execute the batch, this promise will resolve await execute(); To overcome this you can either start a new fluent chain or use the factory method. Starting a new fluent chain at any point will create a new instance. Please review the corrected sample below. import { graphfi } from \"@pnp/graph\"; import { createBatch } from \"@pnp/graph/batching\"; import { GraphDefault } from \"@pnp/nodejs\"; import { Users } from \"@pnp/graph/users\"; const graph = graphfi().using(GraphDefault({ /* ... */ })); // gain a batched instance of the graph const [batchedGraph, execute] = graph.batched(); // we invoke a new instance of users from the batchedGraph batchedGraph.users(); // we again invoke a new instance of users from the batchedGraph, this is fine batchedGraph.users(); const users = batchedGraph.users; // we can do this once users(); // by creating a new users instance using the Users factory we can keep adding things to the batch // users2 will be part of the same batch const users2 = Users(users); users2(); // we execute the batch, this promise will resolve await execute(); In addition you cannot continue using a batch after execute. Once execute has resolved the batch is done. You should create a new batch using one of the described methods to conduct another batched call. Case where batch result returns an object that can be invoked \u00b6 In the following example, the results of adding items to the list is an object with a type of IItemAddResult which is {data: any, item: IItem} . Since version v1 the expectation is that the item object is immediately usable to make additional queries. When this object is the result of a batched call, this was not the case so we have added additional code to reset the observers using the original base from witch the batch was created, mimicing the behavior had the IItem been created from that base withyout a batch involved. We use CopyFrom to ensure that we maintain the references to the InternalResolve and InternalReject events through the end of this timelines lifecycle. import { createBatch } from \"@pnp/sp/batching\"; import { SPDefault } from \"@pnp/nodejs\"; import { IList } from \"@pnp/sp/lists\"; import \"@pnp/sp/items/list\"; const sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPDefault({ /* ... */ })); // in one part of your application you setup a list instance const list: IList = sp.web.lists.getByTitle(\"MyList\"); const [batchedListBehavior, execute] = createBatch(list); // this list is now batching all its requests list.using(batchedListBehavior); let res: IItemAddResult[] = []; // these will all occur within a single batch list.items.add({ Title: `1: ${getRandomString(4)}` }).then(r => res.push(r)); list.items.add({ Title: `2: ${getRandomString(4)}` }).then(r => res.push(r)); list.items.add({ Title: `3: ${getRandomString(4)}` }).then(r => res.push(r)); list.items.add({ Title: `4: ${getRandomString(4)}` }).then(r => res.push(r)); await execute(); let newItems: IItem[] = []; for(let i=0; i<res.length; i++){ //This line will correctly resolve const newItem = await res[i].item.select(\"Title\")<{Title: string}>(); newItems.push(newItem); }","title":"Batching"},{"location":"concepts/batching/#batching","text":"Where possible batching can significantly increase application performance by combining multiple requests to the server into one. This is especially useful when first establishing state, but applies for any scenario where you need to make multiple requests before loading or based on a user action. Batching is supported within the sp and graph libraries as shown below.","title":"Batching"},{"location":"concepts/batching/#sp-example","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/batching\"; const sp = spfi(...); const [batchedSP, execute] = sp.batched(); let res = []; // you need to use .then syntax here as otherwise the application will stop and await the result batchedSP.web().then(r => res.push(r)); // you need to use .then syntax here as otherwise the application will stop and await the result // ODATA operations such as select, filter, and expand are supported as normal batchedSP.web.lists.select(\"Title\")().then(r => res.push(r)); // Executes the batched calls await execute(); // Results for all batched calls are available for(let i = 0; i < res.length; i++) { ///Do something with the results }","title":"SP Example"},{"location":"concepts/batching/#using-a-batched-web","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/batching\"; const sp = spfi(...); const [batchedWeb, execute] = sp.web.batched(); let res = []; // you need to use .then syntax here as otherwise the application will stop and await the result batchedWeb().then(r => res.push(r)); // you need to use .then syntax here as otherwise the application will stop and await the result // ODATA operations such as select, filter, and expand are supported as normal batchedWeb.lists.select(\"Title\")().then(r => res.push(r)); // Executes the batched calls await execute(); // Results for all batched calls are available for(let i = 0; i < res.length; i++) { ///Do something with the results } Batches must be for the same web, you cannot combine requests from multiple webs into a batch.","title":"Using a batched web"},{"location":"concepts/batching/#graph-example","text":"import { graphfi } from \"@pnp/graph\"; import { GraphDefault } from \"@pnp/nodejs\"; import \"@pnp/graph/users\"; import \"@pnp/graph/groups\"; import \"@pnp/graph/batching\"; const graph = graphfi().using(GraphDefault({ /* ... */ })); const [batchedGraph, execute] = graph.batched(); let res = []; // Pushes the results of these calls to an array // you need to use .then syntax here as otherwise the application will stop and await the result batchedGraph.users().then(r => res.push(r)); // you need to use .then syntax here as otherwise the application will stop and await the result // ODATA operations such as select, filter, and expand are supported as normal batchedGraph.groups.select(\"Id\")().then(r => res.push(r)); // Executes the batched calls await execute(); // Results for all batched calls are available for(let i=0; i<res.length; i++){ // Do something with the results }","title":"Graph Example"},{"location":"concepts/batching/#advanced-batching","text":"For most cases the above usage should be sufficient, however you may be in a situation where you do not have convenient access to either an spfi instance or a web. Let's say for example you want to add a lot of items to a list and have an IList. You can in these cases use the createBatch function directly. We recommend as much as possible using the sp or web or graph batched method, but also provide this additional flexibility if you need it. import { createBatch } from \"@pnp/sp/batching\"; import { SPDefault } from \"@pnp/nodejs\"; import { IList } from \"@pnp/sp/lists\"; import \"@pnp/sp/items/list\"; const sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPDefault({ /* ... */ })); // in one part of your application you setup a list instance const list: IList = sp.web.lists.getByTitle(\"MyList\"); // in another part of your application you want to batch requests, but do not have the sp instance available, just the IList // note here the first part of the tuple is NOT the object, rather the behavior that enables batching. You must still register it with `using`. const [batchedListBehavior, execute] = createBatch(list); // this list is now batching all its requests list.using(batchedListBehavior); // these will all occur within a single batch list.items.add({ Title: `1: ${getRandomString(4)}` }); list.items.add({ Title: `2: ${getRandomString(4)}` }); list.items.add({ Title: `3: ${getRandomString(4)}` }); list.items.add({ Title: `4: ${getRandomString(4)}` }); await execute(); This is of course also possible with the graph library as shown below. import { graphfi } from \"@pnp/graph\"; import { createBatch } from \"@pnp/graph/batching\"; import { GraphDefault } from \"@pnp/nodejs\"; import \"@pnp/graph/users\"; const graph = graphfi().using(GraphDefault({ /* ... */ })); const users = graph.users; const [batchedBehavior, execute] = createBatch(users); users.using(batchedBehavior); users(); // we can only place the 'users' instance into the batch once graph.users.using(batchedBehavior)(); graph.users.using(batchedBehavior)(); graph.users.using(batchedBehavior)(); await execute();","title":"Advanced Batching"},{"location":"concepts/batching/#dont-reuse-objects-in-batching","text":"It shouldn't come up often, but you can not make multiple requests using the same instance of a queryable in a batch. Let's consider the incorrect example below: The error message will be \"This instance is already part of a batch. Please review the docs at https://pnp.github.io/pnpjs/concepts/batching#reuse .\" import { graphfi } from \"@pnp/graph\"; import { createBatch } from \"@pnp/graph/batching\"; import { GraphDefault } from \"@pnp/nodejs\"; import \"@pnp/graph/users\"; const graph = graphfi().using(GraphDefault({ /* ... */ })); // gain a batched instance of the graph const [batchedGraph, execute] = graph.batched(); // we take a reference to the value returned from .users const users = batchedGraph.users; // we invoke it, adding it to the batch (this is a request to /users), it will succeed users(); // we invoke it again, because this instance has already been added to the batch, this request will throw an error users(); // we execute the batch, this promise will resolve await execute(); To overcome this you can either start a new fluent chain or use the factory method. Starting a new fluent chain at any point will create a new instance. Please review the corrected sample below. import { graphfi } from \"@pnp/graph\"; import { createBatch } from \"@pnp/graph/batching\"; import { GraphDefault } from \"@pnp/nodejs\"; import { Users } from \"@pnp/graph/users\"; const graph = graphfi().using(GraphDefault({ /* ... */ })); // gain a batched instance of the graph const [batchedGraph, execute] = graph.batched(); // we invoke a new instance of users from the batchedGraph batchedGraph.users(); // we again invoke a new instance of users from the batchedGraph, this is fine batchedGraph.users(); const users = batchedGraph.users; // we can do this once users(); // by creating a new users instance using the Users factory we can keep adding things to the batch // users2 will be part of the same batch const users2 = Users(users); users2(); // we execute the batch, this promise will resolve await execute(); In addition you cannot continue using a batch after execute. Once execute has resolved the batch is done. You should create a new batch using one of the described methods to conduct another batched call.","title":"Don't reuse objects in Batching"},{"location":"concepts/batching/#case-where-batch-result-returns-an-object-that-can-be-invoked","text":"In the following example, the results of adding items to the list is an object with a type of IItemAddResult which is {data: any, item: IItem} . Since version v1 the expectation is that the item object is immediately usable to make additional queries. When this object is the result of a batched call, this was not the case so we have added additional code to reset the observers using the original base from witch the batch was created, mimicing the behavior had the IItem been created from that base withyout a batch involved. We use CopyFrom to ensure that we maintain the references to the InternalResolve and InternalReject events through the end of this timelines lifecycle. import { createBatch } from \"@pnp/sp/batching\"; import { SPDefault } from \"@pnp/nodejs\"; import { IList } from \"@pnp/sp/lists\"; import \"@pnp/sp/items/list\"; const sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPDefault({ /* ... */ })); // in one part of your application you setup a list instance const list: IList = sp.web.lists.getByTitle(\"MyList\"); const [batchedListBehavior, execute] = createBatch(list); // this list is now batching all its requests list.using(batchedListBehavior); let res: IItemAddResult[] = []; // these will all occur within a single batch list.items.add({ Title: `1: ${getRandomString(4)}` }).then(r => res.push(r)); list.items.add({ Title: `2: ${getRandomString(4)}` }).then(r => res.push(r)); list.items.add({ Title: `3: ${getRandomString(4)}` }).then(r => res.push(r)); list.items.add({ Title: `4: ${getRandomString(4)}` }).then(r => res.push(r)); await execute(); let newItems: IItem[] = []; for(let i=0; i<res.length; i++){ //This line will correctly resolve const newItem = await res[i].item.select(\"Title\")<{Title: string}>(); newItems.push(newItem); }","title":"Case where batch result returns an object that can be invoked"},{"location":"concepts/custom-bundle/","text":"Custom Bundling \u00b6 With the introduction of selective imports it is now possible to create your own bundle to exactly fit your needs. This provides much greater control over how your solutions are deployed and what is included in your bundles. Scenarios could include: Deploying a company-wide PnPjs custom bundle shared by all your components so it only needs to be downloaded once. Creating SPFx libraries either for one project or a single webpart. Create a single library containing the PnPjs code you need bundled along with your custom extensions . Create a custom bundle \u00b6 Webpack \u00b6 You can see/clone a sample project of this example here .","title":"Custom Bundle"},{"location":"concepts/custom-bundle/#custom-bundling","text":"With the introduction of selective imports it is now possible to create your own bundle to exactly fit your needs. This provides much greater control over how your solutions are deployed and what is included in your bundles. Scenarios could include: Deploying a company-wide PnPjs custom bundle shared by all your components so it only needs to be downloaded once. Creating SPFx libraries either for one project or a single webpart. Create a single library containing the PnPjs code you need bundled along with your custom extensions .","title":"Custom Bundling"},{"location":"concepts/custom-bundle/#create-a-custom-bundle","text":"","title":"Create a custom bundle"},{"location":"concepts/custom-bundle/#webpack","text":"You can see/clone a sample project of this example here .","title":"Webpack"},{"location":"concepts/error-handling/","text":"Error Handling \u00b6 This article describes the most common types of errors generated by the library. It provides context on the error object, and ways to handle the errors. As always you should tailor your error handling to what your application needs. These are ideas that can be applied to many different patterns. For 429, 503, and 504 errors we include retry logic within the library The HttpRequestError \u00b6 All errors resulting from executed web requests will be returned as an HttpRequestError object which extends the base Error . In addition to the standard Error properties it has some other properties to help you figure out what went wrong. We used a custom error to attempt to normalize what can be a wide assortment of http related errors, while also seeking to provide as much information to library consumers as possible. Property Name Description name Standard Error.name property. Always 'Error' message Normalized string containing the status, status text, and the full response text stack The callstack producing the error isHttpRequestError Always true, allows you to reliably determine if you have an HttpRequestError instance response Unread copy of the Response object resulting in the thrown error status The Response.status value (such as 404) statusText The Response.statusText value (such as 'Not Found') Basic Handling \u00b6 For all operations involving a web request you should account for the possibility they might fail. That failure might be transient or permanent - you won't know until they happen \ud83d\ude09. The most basic type of error handling involves a simple try-catch when using the async/await promises pattern . import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; try { // get a list that doesn't exist const w = await sp.web.lists.getByTitle(\"no\")(); } catch (e) { console.error(e); } This will produce output like: Error making HttpClient request in queryable [404] Not Found ::> {\"odata.error\":{\"code\":\"-1, System.ArgumentException\",\"message\":{\"lang\":\"en-US\",\"value\":\"List 'no' does not exist at site with URL 'https://tenant.sharepoint.com/sites/dev'.\"}}} Data: {\"response\":{\"size\":0,\"timeout\":0},\"status\":404,\"statusText\":\"Not Found\",\"isHttpRequestError\":true} This is very descriptive and provides full details as to what happened, but you might want to handle things a little more cleanly. Reading the Response \u00b6 In some cases the response body will have additional details such as a localized error messages which can be nicer to display rather than our normalized string. You can read the response directly and process it however you desire: import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { HttpRequestError } from \"@pnp/queryable\"; try { // get a list that doesn't exist const w = await sp.web.lists.getByTitle(\"no\")(); } catch (e) { // are we dealing with an HttpRequestError? if (e?.isHttpRequestError) { // we can read the json from the response const json = await (<HttpRequestError>e).response.json(); // if we have a value property we can show it console.log(typeof json[\"odata.error\"] === \"object\" ? json[\"odata.error\"].message.value : e.message); // add of course you have access to the other properties and can make choices on how to act if ((<HttpRequestError>e).status === 404) { console.error((<HttpRequestError>e).statusText); // maybe create the resource, or redirect, or fallback to a secondary data source // just ideas, handle any of the status codes uniquely as needed } } else { // not an HttpRequestError so we just log message console.log(e.message); } } Logging errors \u00b6 Using the PnPjs Logging Framework you can directly pass the error object and the normalized message will be logged. These techniques can be applied to any logging framework. import { Logger } from \"@pnp/logging\"; import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; try { // get a list that doesn't exist const w = await sp.web.lists.getByTitle(\"no\")(); } catch (e) { Logger.error(e); } You may want to read the response and customize the message as described above: import { Logger } from \"@pnp/logging\"; import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { HttpRequestError } from \"@pnp/queryable\"; try { // get a list that doesn't exist const w = await sp.web.lists.getByTitle(\"no\")(); } catch (e) { if (e?.isHttpRequestError) { // we can read the json from the response const data = await (<HttpRequestError>e).response.json(); // parse this however you want const message = typeof data[\"odata.error\"] === \"object\" ? data[\"odata.error\"].message.value : e.message; // we use the status to determine a custom logging level const level: LogLevel = (<HttpRequestError>e).status === 404 ? LogLevel.Warning : LogLevel.Info; // create a custom log entry Logger.log({ data, level, message, }); } else { // not an HttpRequestError so we just log message Logger.error(e); } } Putting it All Together \u00b6 After reviewing the above section you might have thought it seems like a lot of work to include all that logic for every error. One approach is to establish a single function you use application wide to process errors. This allows all the error handling logic to be easily updated and consistent across the application. errorhandler.ts \u00b6 import { Logger } from \"@pnp/logging\"; import { HttpRequestError } from \"@pnp/queryable\"; import { hOP } from \"@pnp/core\"; export async function handleError(e: Error | HttpRequestError): Promise<void> { if (hOP(e, \"isHttpRequestError\")) { // we can read the json from the response const data = await (<HttpRequestError>e).response.json(); // parse this however you want const message = typeof data[\"odata.error\"] === \"object\" ? data[\"odata.error\"].message.value : e.message; // we use the status to determine a custom logging level const level: LogLevel = (<HttpRequestError>e).status === 404 ? LogLevel.Warning : LogLevel.Info; // create a custom log entry Logger.log({ data, level, message, }); } else { // not an HttpRequestError so we just log message Logger.error(e); } } web-request.ts \u00b6 import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { handleError } from \"./errorhandler\"; try { const w = await sp.web.lists.getByTitle(\"no\")(); } catch (e) { await handleError(e); } web-request2.ts \u00b6 import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { handleError } from \"./errorhandler\"; try { const w = await sp.web.lists(); } catch (e) { await handleError(e); } Building a Custom Error Handler \u00b6 In Version 3 the library introduced the concept of a Timeline object and moments. One of the broadcast moments is error. To create your own custom error handler you can define a special handler for the error moment something like the following: //Custom Error Behavior export function CustomError(): TimelinePipe<Queryable> { return (instance: Queryable) => { instance.on.error((err) => { if (logging) { console.log(`\ud83d\uded1 PnPjs Testing Error - ${err.toString()}`); } }); return instance; }; } //Adding our CustomError behavior to our timline const sp = spfi().using(SPDefault(this.context)).using(CustomError());","title":"Error-Handling"},{"location":"concepts/error-handling/#error-handling","text":"This article describes the most common types of errors generated by the library. It provides context on the error object, and ways to handle the errors. As always you should tailor your error handling to what your application needs. These are ideas that can be applied to many different patterns. For 429, 503, and 504 errors we include retry logic within the library","title":"Error Handling"},{"location":"concepts/error-handling/#the-httprequesterror","text":"All errors resulting from executed web requests will be returned as an HttpRequestError object which extends the base Error . In addition to the standard Error properties it has some other properties to help you figure out what went wrong. We used a custom error to attempt to normalize what can be a wide assortment of http related errors, while also seeking to provide as much information to library consumers as possible. Property Name Description name Standard Error.name property. Always 'Error' message Normalized string containing the status, status text, and the full response text stack The callstack producing the error isHttpRequestError Always true, allows you to reliably determine if you have an HttpRequestError instance response Unread copy of the Response object resulting in the thrown error status The Response.status value (such as 404) statusText The Response.statusText value (such as 'Not Found')","title":"The HttpRequestError"},{"location":"concepts/error-handling/#basic-handling","text":"For all operations involving a web request you should account for the possibility they might fail. That failure might be transient or permanent - you won't know until they happen \ud83d\ude09. The most basic type of error handling involves a simple try-catch when using the async/await promises pattern . import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; try { // get a list that doesn't exist const w = await sp.web.lists.getByTitle(\"no\")(); } catch (e) { console.error(e); } This will produce output like: Error making HttpClient request in queryable [404] Not Found ::> {\"odata.error\":{\"code\":\"-1, System.ArgumentException\",\"message\":{\"lang\":\"en-US\",\"value\":\"List 'no' does not exist at site with URL 'https://tenant.sharepoint.com/sites/dev'.\"}}} Data: {\"response\":{\"size\":0,\"timeout\":0},\"status\":404,\"statusText\":\"Not Found\",\"isHttpRequestError\":true} This is very descriptive and provides full details as to what happened, but you might want to handle things a little more cleanly.","title":"Basic Handling"},{"location":"concepts/error-handling/#reading-the-response","text":"In some cases the response body will have additional details such as a localized error messages which can be nicer to display rather than our normalized string. You can read the response directly and process it however you desire: import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { HttpRequestError } from \"@pnp/queryable\"; try { // get a list that doesn't exist const w = await sp.web.lists.getByTitle(\"no\")(); } catch (e) { // are we dealing with an HttpRequestError? if (e?.isHttpRequestError) { // we can read the json from the response const json = await (<HttpRequestError>e).response.json(); // if we have a value property we can show it console.log(typeof json[\"odata.error\"] === \"object\" ? json[\"odata.error\"].message.value : e.message); // add of course you have access to the other properties and can make choices on how to act if ((<HttpRequestError>e).status === 404) { console.error((<HttpRequestError>e).statusText); // maybe create the resource, or redirect, or fallback to a secondary data source // just ideas, handle any of the status codes uniquely as needed } } else { // not an HttpRequestError so we just log message console.log(e.message); } }","title":"Reading the Response"},{"location":"concepts/error-handling/#logging-errors","text":"Using the PnPjs Logging Framework you can directly pass the error object and the normalized message will be logged. These techniques can be applied to any logging framework. import { Logger } from \"@pnp/logging\"; import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; try { // get a list that doesn't exist const w = await sp.web.lists.getByTitle(\"no\")(); } catch (e) { Logger.error(e); } You may want to read the response and customize the message as described above: import { Logger } from \"@pnp/logging\"; import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { HttpRequestError } from \"@pnp/queryable\"; try { // get a list that doesn't exist const w = await sp.web.lists.getByTitle(\"no\")(); } catch (e) { if (e?.isHttpRequestError) { // we can read the json from the response const data = await (<HttpRequestError>e).response.json(); // parse this however you want const message = typeof data[\"odata.error\"] === \"object\" ? data[\"odata.error\"].message.value : e.message; // we use the status to determine a custom logging level const level: LogLevel = (<HttpRequestError>e).status === 404 ? LogLevel.Warning : LogLevel.Info; // create a custom log entry Logger.log({ data, level, message, }); } else { // not an HttpRequestError so we just log message Logger.error(e); } }","title":"Logging errors"},{"location":"concepts/error-handling/#putting-it-all-together","text":"After reviewing the above section you might have thought it seems like a lot of work to include all that logic for every error. One approach is to establish a single function you use application wide to process errors. This allows all the error handling logic to be easily updated and consistent across the application.","title":"Putting it All Together"},{"location":"concepts/error-handling/#errorhandlerts","text":"import { Logger } from \"@pnp/logging\"; import { HttpRequestError } from \"@pnp/queryable\"; import { hOP } from \"@pnp/core\"; export async function handleError(e: Error | HttpRequestError): Promise<void> { if (hOP(e, \"isHttpRequestError\")) { // we can read the json from the response const data = await (<HttpRequestError>e).response.json(); // parse this however you want const message = typeof data[\"odata.error\"] === \"object\" ? data[\"odata.error\"].message.value : e.message; // we use the status to determine a custom logging level const level: LogLevel = (<HttpRequestError>e).status === 404 ? LogLevel.Warning : LogLevel.Info; // create a custom log entry Logger.log({ data, level, message, }); } else { // not an HttpRequestError so we just log message Logger.error(e); } }","title":"errorhandler.ts"},{"location":"concepts/error-handling/#web-requestts","text":"import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { handleError } from \"./errorhandler\"; try { const w = await sp.web.lists.getByTitle(\"no\")(); } catch (e) { await handleError(e); }","title":"web-request.ts"},{"location":"concepts/error-handling/#web-request2ts","text":"import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { handleError } from \"./errorhandler\"; try { const w = await sp.web.lists(); } catch (e) { await handleError(e); }","title":"web-request2.ts"},{"location":"concepts/error-handling/#building-a-custom-error-handler","text":"In Version 3 the library introduced the concept of a Timeline object and moments. One of the broadcast moments is error. To create your own custom error handler you can define a special handler for the error moment something like the following: //Custom Error Behavior export function CustomError(): TimelinePipe<Queryable> { return (instance: Queryable) => { instance.on.error((err) => { if (logging) { console.log(`\ud83d\uded1 PnPjs Testing Error - ${err.toString()}`); } }); return instance; }; } //Adding our CustomError behavior to our timline const sp = spfi().using(SPDefault(this.context)).using(CustomError());","title":"Building a Custom Error Handler"},{"location":"concepts/invokable/","text":"Invokables \u00b6 For people who have been using the library since the early days you are familiar with the need to use the () method to invoke a method chain: Starting with v3 this is no longer possible, you must invoke the object directly to execute the default action for that class: const lists = await sp.web.lists();","title":"Custom Call/Path"},{"location":"concepts/invokable/#invokables","text":"For people who have been using the library since the early days you are familiar with the need to use the () method to invoke a method chain: Starting with v3 this is no longer possible, you must invoke the object directly to execute the default action for that class: const lists = await sp.web.lists();","title":"Invokables"},{"location":"concepts/project-preset/","text":"Project Presets \u00b6 Due to the introduction of selective imports it can be somewhat frustrating to import all of the needed dependencies every time you need them across many files. Instead the preferred approach, especially for SPFx, is to create a project preset file. This centralizes the imports, configuration, and optionally extensions to PnPjs in a single place. If you have multiple projects that share dependencies on PnPjs you can benefit from creating a custom bundle and using them across your projects. These steps reference an SPFx solution, but apply to any solution. Install the library \u00b6 npm install @pnp/sp --save Create a Preset File \u00b6 Within the src directory create a new file named pnpjs-presets.ts and copy in the below content. import { WebPartContext } from \"@microsoft/sp-webpart-base\"; // import pnp, pnp logging system, and any other selective imports needed import { spfi, SPFI, SPFx } from \"@pnp/sp\"; import { LogLevel, PnPLogging } from \"@pnp/logging\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import \"@pnp/sp/batching\"; var _sp: SPFI = null; export const getSP = (context?: WebPartContext): SPFI => { if (_sp === null && context != null) { //You must add the @pnp/logging package to include the PnPLogging behavior it is no longer a peer dependency // The LogLevel set's at what level a message will be written to the console _sp = spfi().using(SPFx(context)).using(PnPLogging(LogLevel.Warning)); } return _sp; }; To initialize the configuration, from the onInit function (or whatever function runs first in your code) make a call to getSP passing in the SPFx context object (or whatever configuration you would require for your setup). protected async onInit(): Promise<void> { this._environmentMessage = this._getEnvironmentMessage(); super.onInit(); //Initialize our _sp object that we can then use in other packages without having to pass around the context. // Check out pnpjsConfig.ts for an example of a project setup file. getSP(this.context); } Now you can consume your configured _sp object from anywhere else in your code by simply referencing the pnpjs-presets.ts file via an import statement and then getting a local instance of the _sp object using the getSP() method without passing any context. import { getSP } from './pnpjs-resets.ts'; ... export default class PnPjsExample extends React.Component<IPnPjsExampleProps, IIPnPjsExampleState> { private _sp: SPFI; constructor(props: IPnPjsExampleProps) { super(props); // set initial state this.state = { items: [], errors: [] }; this._sp = getSP(); } ... } For a full sample, please see our PnPjs Version 3 Sample Project","title":"Project Presets"},{"location":"concepts/project-preset/#project-presets","text":"Due to the introduction of selective imports it can be somewhat frustrating to import all of the needed dependencies every time you need them across many files. Instead the preferred approach, especially for SPFx, is to create a project preset file. This centralizes the imports, configuration, and optionally extensions to PnPjs in a single place. If you have multiple projects that share dependencies on PnPjs you can benefit from creating a custom bundle and using them across your projects. These steps reference an SPFx solution, but apply to any solution.","title":"Project Presets"},{"location":"concepts/project-preset/#install-the-library","text":"npm install @pnp/sp --save","title":"Install the library"},{"location":"concepts/project-preset/#create-a-preset-file","text":"Within the src directory create a new file named pnpjs-presets.ts and copy in the below content. import { WebPartContext } from \"@microsoft/sp-webpart-base\"; // import pnp, pnp logging system, and any other selective imports needed import { spfi, SPFI, SPFx } from \"@pnp/sp\"; import { LogLevel, PnPLogging } from \"@pnp/logging\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import \"@pnp/sp/batching\"; var _sp: SPFI = null; export const getSP = (context?: WebPartContext): SPFI => { if (_sp === null && context != null) { //You must add the @pnp/logging package to include the PnPLogging behavior it is no longer a peer dependency // The LogLevel set's at what level a message will be written to the console _sp = spfi().using(SPFx(context)).using(PnPLogging(LogLevel.Warning)); } return _sp; }; To initialize the configuration, from the onInit function (or whatever function runs first in your code) make a call to getSP passing in the SPFx context object (or whatever configuration you would require for your setup). protected async onInit(): Promise<void> { this._environmentMessage = this._getEnvironmentMessage(); super.onInit(); //Initialize our _sp object that we can then use in other packages without having to pass around the context. // Check out pnpjsConfig.ts for an example of a project setup file. getSP(this.context); } Now you can consume your configured _sp object from anywhere else in your code by simply referencing the pnpjs-presets.ts file via an import statement and then getting a local instance of the _sp object using the getSP() method without passing any context. import { getSP } from './pnpjs-resets.ts'; ... export default class PnPjsExample extends React.Component<IPnPjsExampleProps, IIPnPjsExampleState> { private _sp: SPFI; constructor(props: IPnPjsExampleProps) { super(props); // set initial state this.state = { items: [], errors: [] }; this._sp = getSP(); } ... } For a full sample, please see our PnPjs Version 3 Sample Project","title":"Create a Preset File"},{"location":"concepts/selective-imports/","text":"Selective Imports \u00b6 As the libraries have grown to support more of the SharePoint and Graph API they have also grown in size. On one hand this is good as more functionality becomes available but you had to include lots of code you didn't use if you were only doing simple operations. To solve this we introduced selective imports. This allows you to only import the parts of the sp or graph library you need, allowing you to greatly reduce your overall solution bundle size - and enables treeshaking . This concept works well with custom bundling to create a shared package tailored exactly to your needs. If you would prefer to not worry about selective imports please see the section on presets . A quick note on how TypeScript handles type only imports. If you have a line like import { IWeb } from \"@pnp/sp/webs\" everything will transpile correctly but you will get runtime errors because TS will see that line as a type only import and drop it. You need to include both import { IWeb } from \"@pnp/sp/webs\" and import \"@pnp/sp/webs\" to ensure the webs functionality is correctly included. You can see this in the last example below. // the sp var now has almost nothing attached at import time and relies on // we need to import each of the pieces we need to \"attach\" them for chaining // here we are importing the specific sub modules we need and attaching the functionality for lists to web and items to list import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items/list\"; // placeholder for fully configuring the sp interface const sp = spfi(); const itemData = await sp.web.lists.getById('00000000-0000-0000-0000-000000000000').items.getById(1)(); Above we are being very specific in what we are importing, but you can also import entire sub-modules and be slightly less specific // the sp var now has almost nothing attached at import time and relies on // we need to import each of the pieces we need to \"attach\" them for chaining // here we are importing the specific sub modules we need and attaching the functionality for lists to web and items to list import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; // placeholder for fully configuring the sp interface const sp = spfi(); const itemData = await sp.web.lists.getById('00000000-0000-0000-0000-000000000000').items.getById(1)(); The above two examples both work just fine but you may end up with slightly smaller bundle sizes using the first. Consider this example: // this import statement will attach content-type functionality to list, web, and item import \"@pnp/sp/content-types\"; // this import statement will only attach content-type functionality to web import \"@pnp/sp/content-types/web\"; If you only need to access content types on the web object you can reduce size by only importing that piece. The below example shows the need to import types and module augmentation separately. // this will fail import \"@pnp/sp/webs\"; import { IList } from \"@pnp/sp/lists\"; // do this instead import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import { IList } from \"@pnp/sp/lists\"; // placeholder for fully configuring the sp interface const sp = spfi(); const lists = await sp.web.lists(); Presets \u00b6 Sometimes you don't care as much about bundle size - testing or node development for example. In these cases we have provided what we are calling presets to allow you to skip importing each module individually. Both libraries supply an \"all\" preset that will attach all of the available library functionality. While the presets provided may be useful, we encourage you to look at making your own project presets or custom bundles as a preferred solution. Use of the presets in client-side solutions is not recommended. SP \u00b6 import \"@pnp/sp/presets/all\"; // placeholder for fully configuring the sp interface const sp = spfi(); // sp.* will have all of the library functionality bound to it, tree shaking will not work const lists = await sp.web.lists(); Graph \u00b6 The graph library contains a single preset, \"all\" mimicking the v1 structure. import \"@pnp/graph/presets/all\"; import { graphfi } from \"@pnp/graph\"; // placeholder for fully configuring the sp interface const graph = graphfi(); // graph.* will have all of the library functionality bound to it, tree shaking will not work const me = await graph.me();","title":"Selective Imports"},{"location":"concepts/selective-imports/#selective-imports","text":"As the libraries have grown to support more of the SharePoint and Graph API they have also grown in size. On one hand this is good as more functionality becomes available but you had to include lots of code you didn't use if you were only doing simple operations. To solve this we introduced selective imports. This allows you to only import the parts of the sp or graph library you need, allowing you to greatly reduce your overall solution bundle size - and enables treeshaking . This concept works well with custom bundling to create a shared package tailored exactly to your needs. If you would prefer to not worry about selective imports please see the section on presets . A quick note on how TypeScript handles type only imports. If you have a line like import { IWeb } from \"@pnp/sp/webs\" everything will transpile correctly but you will get runtime errors because TS will see that line as a type only import and drop it. You need to include both import { IWeb } from \"@pnp/sp/webs\" and import \"@pnp/sp/webs\" to ensure the webs functionality is correctly included. You can see this in the last example below. // the sp var now has almost nothing attached at import time and relies on // we need to import each of the pieces we need to \"attach\" them for chaining // here we are importing the specific sub modules we need and attaching the functionality for lists to web and items to list import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items/list\"; // placeholder for fully configuring the sp interface const sp = spfi(); const itemData = await sp.web.lists.getById('00000000-0000-0000-0000-000000000000').items.getById(1)(); Above we are being very specific in what we are importing, but you can also import entire sub-modules and be slightly less specific // the sp var now has almost nothing attached at import time and relies on // we need to import each of the pieces we need to \"attach\" them for chaining // here we are importing the specific sub modules we need and attaching the functionality for lists to web and items to list import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; // placeholder for fully configuring the sp interface const sp = spfi(); const itemData = await sp.web.lists.getById('00000000-0000-0000-0000-000000000000').items.getById(1)(); The above two examples both work just fine but you may end up with slightly smaller bundle sizes using the first. Consider this example: // this import statement will attach content-type functionality to list, web, and item import \"@pnp/sp/content-types\"; // this import statement will only attach content-type functionality to web import \"@pnp/sp/content-types/web\"; If you only need to access content types on the web object you can reduce size by only importing that piece. The below example shows the need to import types and module augmentation separately. // this will fail import \"@pnp/sp/webs\"; import { IList } from \"@pnp/sp/lists\"; // do this instead import { sp } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import { IList } from \"@pnp/sp/lists\"; // placeholder for fully configuring the sp interface const sp = spfi(); const lists = await sp.web.lists();","title":"Selective Imports"},{"location":"concepts/selective-imports/#presets","text":"Sometimes you don't care as much about bundle size - testing or node development for example. In these cases we have provided what we are calling presets to allow you to skip importing each module individually. Both libraries supply an \"all\" preset that will attach all of the available library functionality. While the presets provided may be useful, we encourage you to look at making your own project presets or custom bundles as a preferred solution. Use of the presets in client-side solutions is not recommended.","title":"Presets"},{"location":"concepts/selective-imports/#sp","text":"import \"@pnp/sp/presets/all\"; // placeholder for fully configuring the sp interface const sp = spfi(); // sp.* will have all of the library functionality bound to it, tree shaking will not work const lists = await sp.web.lists();","title":"SP"},{"location":"concepts/selective-imports/#graph","text":"The graph library contains a single preset, \"all\" mimicking the v1 structure. import \"@pnp/graph/presets/all\"; import { graphfi } from \"@pnp/graph\"; // placeholder for fully configuring the sp interface const graph = graphfi(); // graph.* will have all of the library functionality bound to it, tree shaking will not work const me = await graph.me();","title":"Graph"},{"location":"concepts/typings/","text":"Typing Return Objects \u00b6 Whenever you make a request of the library for data from an object and utilize the select method to reduce the size of the objects in the payload its preferable in Typescript to be able to type that returned object. The library provides you a method to do so by using TypeScript's Generics declaration. By defining the objects type in the <> after the closure of the select method the resulting object is typed. .select(\"Title\")<{Title: string}>() Below are some examples of typing the return payload: const _sp = spfi().using(SPFx(this.context)); //Typing the Title property of a field const field = await _sp.site.rootWeb.fields.getById(titleFieldId).select(\"Title\")<{ Title: string }>(); //Typing the ParentWebUrl property of the selected list. const testList = await _sp.web.lists.getByTitle('MyList').select(\"ParentWebUrl\")<{ ParentWebUrl: string }>(); There have been discussions in the past around auto-typing based on select and the expected properties of the return object. We haven't done so for a few reasons: there is no even mildly complex way to account for all the possibilities expand introduces to selects, and if we \"ignore\" expand it effectively makes the select typings back to \"any\". Looking at template types etc, we haven't yet seen a way to do this that makes it worth the effort and doesn't introduce some other limitation or confusion.","title":"Typings"},{"location":"concepts/typings/#typing-return-objects","text":"Whenever you make a request of the library for data from an object and utilize the select method to reduce the size of the objects in the payload its preferable in Typescript to be able to type that returned object. The library provides you a method to do so by using TypeScript's Generics declaration. By defining the objects type in the <> after the closure of the select method the resulting object is typed. .select(\"Title\")<{Title: string}>() Below are some examples of typing the return payload: const _sp = spfi().using(SPFx(this.context)); //Typing the Title property of a field const field = await _sp.site.rootWeb.fields.getById(titleFieldId).select(\"Title\")<{ Title: string }>(); //Typing the ParentWebUrl property of the selected list. const testList = await _sp.web.lists.getByTitle('MyList').select(\"ParentWebUrl\")<{ ParentWebUrl: string }>(); There have been discussions in the past around auto-typing based on select and the expected properties of the return object. We haven't done so for a few reasons: there is no even mildly complex way to account for all the possibilities expand introduces to selects, and if we \"ignore\" expand it effectively makes the select typings back to \"any\". Looking at template types etc, we haven't yet seen a way to do this that makes it worth the effort and doesn't introduce some other limitation or confusion.","title":"Typing Return Objects"},{"location":"contributing/","text":"Contributing to PnPjs \u00b6 Thank you for your interest in contributing to PnPjs. We have updated our contribution section to make things easier to get started, debug the library locally, and learn how to extend the functionality. Section Description NPM Scripts Explains the npm scripts and their uses Setup Dev Machine Covers setting up your machine to ensure you are ready to debug the solution Local Debug Configuration Discusses the steps required to establish local configuration used for debugging and running tests Debugging Describes how to debug PnPjs locally Extending the library Basic examples on how to extend the library such as adding a method or property Writing Tests How to write and debug tests Update Documentation Describes the steps required to edit and locally view the documentation Submit a Pull Request Outlines guidance for submitting a pull request Need Help? \u00b6 The PnP \"Sharing Is Caring\" initiative teaches the basics around making changes in GitHub, submitting pull requests to the PnP & Microsoft 365 open-source repositories such as PnPjs. Every month, we provide multiple live hands-on sessions that walk attendees through the process of using and contributing to PnP initiatives. To learn more and register for an upcoming session, please visit the Sharing is Caring website.","title":"Contributing"},{"location":"contributing/#contributing-to-pnpjs","text":"Thank you for your interest in contributing to PnPjs. We have updated our contribution section to make things easier to get started, debug the library locally, and learn how to extend the functionality. Section Description NPM Scripts Explains the npm scripts and their uses Setup Dev Machine Covers setting up your machine to ensure you are ready to debug the solution Local Debug Configuration Discusses the steps required to establish local configuration used for debugging and running tests Debugging Describes how to debug PnPjs locally Extending the library Basic examples on how to extend the library such as adding a method or property Writing Tests How to write and debug tests Update Documentation Describes the steps required to edit and locally view the documentation Submit a Pull Request Outlines guidance for submitting a pull request","title":"Contributing to PnPjs"},{"location":"contributing/#need-help","text":"The PnP \"Sharing Is Caring\" initiative teaches the basics around making changes in GitHub, submitting pull requests to the PnP & Microsoft 365 open-source repositories such as PnPjs. Every month, we provide multiple live hands-on sessions that walk attendees through the process of using and contributing to PnP initiatives. To learn more and register for an upcoming session, please visit the Sharing is Caring website.","title":"Need Help?"},{"location":"contributing/debug-tests/","text":"Writing Tests \u00b6 With version 2 we have made a significant effort to improve out test coverage. To keep that up, all changes submitted will require one or more tests be included. For new functionality at least a basic test that the method executes is required. For bug fixes please include a test that would have caught the bug (i.e. fail before your fix) and passes with your fix in place. How to write Tests \u00b6 We use Mocha and Chai for our testing framework. You can see many examples of writing tests within the ./test folder. Here is a sample with extra comments to help explain what's happening, taken from ./test/sp/items.ts : import { getRandomString } from \"@pnp/core\"; import { testSettings } from \"../main\"; import { expect } from \"chai\"; import { sp } from \"@pnp/sp\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items/list\"; import { IList } from \"@pnp/sp/lists\"; describe(\"Items\", () => { // any tests that make a web request should be withing a block checking if web tests are enabled if (testSettings.enableWebTests) { // a block scoped var we will use across our tests let list: IList = null; // we use the before block to setup // executed before all the tests in this block, see the mocha docs for more details // mocha prefers using function vs arrow functions and this is recommended before(async function () { // execute a request to ensure we have a list const ler = await sp.web.lists.ensure(\"ItemTestList\", \"Used to test item operations\"); list = ler.list; // in this case we want to have some items in the list for testing so we add those // only if the list was just created if (ler.created) { // add a few items to get started const batch = sp.web.createBatch(); list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` }); list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` }); list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` }); list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` }); list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` }); await batch.execute(); } }); // this test has a label \"get items\" and is run via an async function it(\"get items\", async function () { // make a request for the list's items const items = await list.items(); // report that we expect that result to be an array with more than 0 items expect(items.length).to.be.gt(0); }); // ... remainder of code removed } } General Guidelines for Writing Tests \u00b6 Tests should operate within the site defined in testSettings Tests should be able to run multiple times on the same site, but do not need to cleanup after themselves Each test should be self contained and not depend on other tests, they can depend on work done in before or beforeAll When writing tests you can use \"only\" and \"skip\" from mochajs to focus on only the tests you are writing Be sure to review the various options when running your tests If you are writing a test and the endpoint doesn't support app only permissions, you can skip writing a test - but please note that in the PR description Next Steps \u00b6 Now that you've written tests to cover your changes you'll need to update the docs .","title":"Tests"},{"location":"contributing/debug-tests/#writing-tests","text":"With version 2 we have made a significant effort to improve out test coverage. To keep that up, all changes submitted will require one or more tests be included. For new functionality at least a basic test that the method executes is required. For bug fixes please include a test that would have caught the bug (i.e. fail before your fix) and passes with your fix in place.","title":"Writing Tests"},{"location":"contributing/debug-tests/#how-to-write-tests","text":"We use Mocha and Chai for our testing framework. You can see many examples of writing tests within the ./test folder. Here is a sample with extra comments to help explain what's happening, taken from ./test/sp/items.ts : import { getRandomString } from \"@pnp/core\"; import { testSettings } from \"../main\"; import { expect } from \"chai\"; import { sp } from \"@pnp/sp\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items/list\"; import { IList } from \"@pnp/sp/lists\"; describe(\"Items\", () => { // any tests that make a web request should be withing a block checking if web tests are enabled if (testSettings.enableWebTests) { // a block scoped var we will use across our tests let list: IList = null; // we use the before block to setup // executed before all the tests in this block, see the mocha docs for more details // mocha prefers using function vs arrow functions and this is recommended before(async function () { // execute a request to ensure we have a list const ler = await sp.web.lists.ensure(\"ItemTestList\", \"Used to test item operations\"); list = ler.list; // in this case we want to have some items in the list for testing so we add those // only if the list was just created if (ler.created) { // add a few items to get started const batch = sp.web.createBatch(); list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` }); list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` }); list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` }); list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` }); list.items.inBatch(batch).add({ Title: `Item ${getRandomString(4)}` }); await batch.execute(); } }); // this test has a label \"get items\" and is run via an async function it(\"get items\", async function () { // make a request for the list's items const items = await list.items(); // report that we expect that result to be an array with more than 0 items expect(items.length).to.be.gt(0); }); // ... remainder of code removed } }","title":"How to write Tests"},{"location":"contributing/debug-tests/#general-guidelines-for-writing-tests","text":"Tests should operate within the site defined in testSettings Tests should be able to run multiple times on the same site, but do not need to cleanup after themselves Each test should be self contained and not depend on other tests, they can depend on work done in before or beforeAll When writing tests you can use \"only\" and \"skip\" from mochajs to focus on only the tests you are writing Be sure to review the various options when running your tests If you are writing a test and the endpoint doesn't support app only permissions, you can skip writing a test - but please note that in the PR description","title":"General Guidelines for Writing Tests"},{"location":"contributing/debug-tests/#next-steps","text":"Now that you've written tests to cover your changes you'll need to update the docs .","title":"Next Steps"},{"location":"contributing/debugging/","text":"Debugging \u00b6 Using the steps in this article you will be able to locally debug the library internals as well as new features you are working on. Before proceeding be sure you have reviewed how to setup for local configuration and debugging. Debugging Library Features \u00b6 The easiest way to debug the library when working on new features is using F5 in Visual Studio Code. This uses launch.json to build and run the library using ./debug/launch/main.ts as the entry point. Basic SharePoint Testing \u00b6 You can start the base debugging case by hitting F5. Before you do place a break point in ./debug/launch/sp.ts. You can also place a break point within any of the libraries or modules. Feel free to edit the sp.ts file to try things out, debug suspected issues, or test new features, etc - but please don't commit any changes as this is a shared file. See the section on creating your own debug modules . All of the setup for the node client is handled within sp.ts using the settings from the local configuration . Basic Graph Testing \u00b6 Testing and debugging Graph calls follows the same process as outlined for SharePoint, however you need to update main.ts to import graph instead of sp. You can place break points anywhere within the library code and they should be hit. All of the setup for the node client is handled within graph.ts using the settings from the local configuration . How to: Create a Debug Module \u00b6 If you are working on multiple features or want to save sample code for various tasks you can create your own debugging modules and leave them in the debug/launch folder locally. The gitignore file is setup to ignore any files that aren't already in git. Using ./debug/launch/sp.ts as a reference create a file in the debug/launch folder, let's call it mydebug.ts and add this content: // note we can use the actual package names for our imports (ex: @pnp/logging) import { Logger, LogLevel, ConsoleListener } from \"@pnp/logging\"; // using the all preset for simplicity in the example, selective imports work as expected import { sp, ListEnsureResult } from \"@pnp/sp/presets/all\"; declare var process: { exit(code?: number): void }; export async function MyDebug() { // configure your options // you can have different configs in different modules as needed for your testing/dev work sp.setup({ sp: { fetchClientFactory: () => { return new SPFetchClient(settings.testing.sp.url, settings.testing.sp.id, settings.testing.sp.secret); }, }, }); // run some debugging const list = await sp.web.lists.ensure(\"MyFirstList\"); Logger.log({ data: list.created, level: LogLevel.Info, message: \"Was list created?\", }); if (list.created) { Logger.log({ data: list.data, level: LogLevel.Info, message: \"Raw data from list creation.\", }); } else { Logger.log({ data: null, level: LogLevel.Info, message: \"List already existed!\", }); } process.exit(0); } Update main.ts to launch your module \u00b6 First comment out the import for the default example and then add the import and function call for yours, the updated launch/main.ts should look like this: // ... // comment out the example // import { Example } from \"./example\"; // Example(); import { MyDebug } from \"./mydebug\" MyDebug(); // ... Remember, please don't commit any changes to the shared files within the debug folder. (Unless you've found a bug that needs fixing in the original file) Debug \u00b6 Place a break point within the mydebug.ts file and hit F5. Your module should run and your break point hit. You can then examine the contents of the objects and see the run time state. Remember, you can also set breakpoints within the package src folders to see exactly how things are working during your debugging scenarios. Debug Module Next Steps \u00b6 Using this pattern you can create and preserve multiple debugging scenarios in separate modules locally - they won't be added to git. You just have to update main.ts to point to the one you want to run. In Browser Debugging \u00b6 You can also serve files locally to debug as a user in the browser by serving code using ./debug/serve/main.ts as the entry. The file is served as https://localhost:8080/assets/pnp.js , allowing you to create a single page in your tenant for in browser testing. The remainder of this section describes the process to setup a SharePoint page to debug in this manner. Start the local serve \u00b6 This will serve a package with ./debug/serve/main.ts as the entry. gulp serve Add reference to library \u00b6 Within a SharePoint page add a script editor web part and then paste in the following code. The div is to give you a place to target with visual updates should you desire. <script src=\"https://localhost:8080/assets/pnp.js\"></script> <div id=\"pnp-test\"></div> You should see an alert with the current web's title using the default main.ts. Feel free to update main.ts to do whatever you would like, but remember not to commit changes to the shared files. Debug \u00b6 Refresh the page and open the developer tools in your browser of choice. If the pnp.js file is blocked due to security restrictions you will need to allow it. Next Steps \u00b6 You can make changes to the library and immediately see them reflected in the browser. All files are watched so changes will be available as soon as webpack reloads the package. This allows you to rapidly test the library in the browser. Now you can learn about extending the library .","title":"Debugging"},{"location":"contributing/debugging/#debugging","text":"Using the steps in this article you will be able to locally debug the library internals as well as new features you are working on. Before proceeding be sure you have reviewed how to setup for local configuration and debugging.","title":"Debugging"},{"location":"contributing/debugging/#debugging-library-features","text":"The easiest way to debug the library when working on new features is using F5 in Visual Studio Code. This uses launch.json to build and run the library using ./debug/launch/main.ts as the entry point.","title":"Debugging Library Features"},{"location":"contributing/debugging/#basic-sharepoint-testing","text":"You can start the base debugging case by hitting F5. Before you do place a break point in ./debug/launch/sp.ts. You can also place a break point within any of the libraries or modules. Feel free to edit the sp.ts file to try things out, debug suspected issues, or test new features, etc - but please don't commit any changes as this is a shared file. See the section on creating your own debug modules . All of the setup for the node client is handled within sp.ts using the settings from the local configuration .","title":"Basic SharePoint Testing"},{"location":"contributing/debugging/#basic-graph-testing","text":"Testing and debugging Graph calls follows the same process as outlined for SharePoint, however you need to update main.ts to import graph instead of sp. You can place break points anywhere within the library code and they should be hit. All of the setup for the node client is handled within graph.ts using the settings from the local configuration .","title":"Basic Graph Testing"},{"location":"contributing/debugging/#how-to-create-a-debug-module","text":"If you are working on multiple features or want to save sample code for various tasks you can create your own debugging modules and leave them in the debug/launch folder locally. The gitignore file is setup to ignore any files that aren't already in git. Using ./debug/launch/sp.ts as a reference create a file in the debug/launch folder, let's call it mydebug.ts and add this content: // note we can use the actual package names for our imports (ex: @pnp/logging) import { Logger, LogLevel, ConsoleListener } from \"@pnp/logging\"; // using the all preset for simplicity in the example, selective imports work as expected import { sp, ListEnsureResult } from \"@pnp/sp/presets/all\"; declare var process: { exit(code?: number): void }; export async function MyDebug() { // configure your options // you can have different configs in different modules as needed for your testing/dev work sp.setup({ sp: { fetchClientFactory: () => { return new SPFetchClient(settings.testing.sp.url, settings.testing.sp.id, settings.testing.sp.secret); }, }, }); // run some debugging const list = await sp.web.lists.ensure(\"MyFirstList\"); Logger.log({ data: list.created, level: LogLevel.Info, message: \"Was list created?\", }); if (list.created) { Logger.log({ data: list.data, level: LogLevel.Info, message: \"Raw data from list creation.\", }); } else { Logger.log({ data: null, level: LogLevel.Info, message: \"List already existed!\", }); } process.exit(0); }","title":"How to: Create a Debug Module"},{"location":"contributing/debugging/#update-maints-to-launch-your-module","text":"First comment out the import for the default example and then add the import and function call for yours, the updated launch/main.ts should look like this: // ... // comment out the example // import { Example } from \"./example\"; // Example(); import { MyDebug } from \"./mydebug\" MyDebug(); // ... Remember, please don't commit any changes to the shared files within the debug folder. (Unless you've found a bug that needs fixing in the original file)","title":"Update main.ts to launch your module"},{"location":"contributing/debugging/#debug","text":"Place a break point within the mydebug.ts file and hit F5. Your module should run and your break point hit. You can then examine the contents of the objects and see the run time state. Remember, you can also set breakpoints within the package src folders to see exactly how things are working during your debugging scenarios.","title":"Debug"},{"location":"contributing/debugging/#debug-module-next-steps","text":"Using this pattern you can create and preserve multiple debugging scenarios in separate modules locally - they won't be added to git. You just have to update main.ts to point to the one you want to run.","title":"Debug Module Next Steps"},{"location":"contributing/debugging/#in-browser-debugging","text":"You can also serve files locally to debug as a user in the browser by serving code using ./debug/serve/main.ts as the entry. The file is served as https://localhost:8080/assets/pnp.js , allowing you to create a single page in your tenant for in browser testing. The remainder of this section describes the process to setup a SharePoint page to debug in this manner.","title":"In Browser Debugging"},{"location":"contributing/debugging/#start-the-local-serve","text":"This will serve a package with ./debug/serve/main.ts as the entry. gulp serve","title":"Start the local serve"},{"location":"contributing/debugging/#add-reference-to-library","text":"Within a SharePoint page add a script editor web part and then paste in the following code. The div is to give you a place to target with visual updates should you desire. <script src=\"https://localhost:8080/assets/pnp.js\"></script> <div id=\"pnp-test\"></div> You should see an alert with the current web's title using the default main.ts. Feel free to update main.ts to do whatever you would like, but remember not to commit changes to the shared files.","title":"Add reference to library"},{"location":"contributing/debugging/#debug_1","text":"Refresh the page and open the developer tools in your browser of choice. If the pnp.js file is blocked due to security restrictions you will need to allow it.","title":"Debug"},{"location":"contributing/debugging/#next-steps","text":"You can make changes to the library and immediately see them reflected in the browser. All files are watched so changes will be available as soon as webpack reloads the package. This allows you to rapidly test the library in the browser. Now you can learn about extending the library .","title":"Next Steps"},{"location":"contributing/documentation/","text":"Documentation \u00b6 Just like with tests we have invested much time in updating the documentation and when you make a change to the library you should update the associated documentation as part of the pull request. Writing Docs \u00b6 Our docs are all written in markdown and processed using MkDocs. You can use code blocks, tables, and other markdown formatting. You can review the other articles for examples on writing docs. Generally articles should focus on how to use the library and where appropriate link to official outside documents as needed. Official documentation could be Microsoft, other library project docs such as MkDocs, or other sources. Building Docs Locally \u00b6 Building the documentation locally can help you visualize change you are making to the docs. What you see locally will be what you see online. Documentation is built using MkDocs. You will need to latest version of Python (tested on version 3.7.1) and pip. If you're on the Windows operating system, make sure you have added Python to your Path environment variable . When executing the pip module on Windows you can prefix it with python -m . For example: python -m pip install mkdocs-material Install MkDocs pip install mkdocs Install the Material theme pip install mkdocs-material install the mkdocs-markdownextradata-plugin - this is used for the version variable pip install mkdocs-markdownextradata-plugin (doesn't work on Python v2.7) install redirect plugin - used to redirect from moved pages pip install mkdocs-redirects Serve it up mkdocs serve Open a browser to http://127.0.0.1:8000/ Please see the official mkdocs site for more details on working with mkdocs Next Steps \u00b6 After your changes are made, you've added/updated tests, and updated the docs you're ready to submit a pull request !","title":"Documentation"},{"location":"contributing/documentation/#documentation","text":"Just like with tests we have invested much time in updating the documentation and when you make a change to the library you should update the associated documentation as part of the pull request.","title":"Documentation"},{"location":"contributing/documentation/#writing-docs","text":"Our docs are all written in markdown and processed using MkDocs. You can use code blocks, tables, and other markdown formatting. You can review the other articles for examples on writing docs. Generally articles should focus on how to use the library and where appropriate link to official outside documents as needed. Official documentation could be Microsoft, other library project docs such as MkDocs, or other sources.","title":"Writing Docs"},{"location":"contributing/documentation/#building-docs-locally","text":"Building the documentation locally can help you visualize change you are making to the docs. What you see locally will be what you see online. Documentation is built using MkDocs. You will need to latest version of Python (tested on version 3.7.1) and pip. If you're on the Windows operating system, make sure you have added Python to your Path environment variable . When executing the pip module on Windows you can prefix it with python -m . For example: python -m pip install mkdocs-material Install MkDocs pip install mkdocs Install the Material theme pip install mkdocs-material install the mkdocs-markdownextradata-plugin - this is used for the version variable pip install mkdocs-markdownextradata-plugin (doesn't work on Python v2.7) install redirect plugin - used to redirect from moved pages pip install mkdocs-redirects Serve it up mkdocs serve Open a browser to http://127.0.0.1:8000/ Please see the official mkdocs site for more details on working with mkdocs","title":"Building Docs Locally"},{"location":"contributing/documentation/#next-steps","text":"After your changes are made, you've added/updated tests, and updated the docs you're ready to submit a pull request !","title":"Next Steps"},{"location":"contributing/extending-the-library/","text":"Extending PnPjs \u00b6 This article is targeted at people wishing to extend PnPjs itself, usually by adding a method or property. At the most basic level PnPjs is a set of libraries used to build and execute a web request and handle the response from that request. Conceptually each object in the fluent chain serves as input when creating the next object in the chain. This is how configuration, url, query, and other values are passed along. To get a sense for what this looks like see the code below. This is taken from inside the webs submodule and shows how the \"webs\" property is added to the web class. // TypeScript property, returning an interface public get webs(): IWebs { // using the Webs factory function and providing \"this\" as the first parameter return Webs(this); } Understanding Factory Functions \u00b6 PnPjs v3 is designed to only expose interfaces and factory functions. Let's look at the Webs factory function, used above as an example. All factory functions in sp and graph have a similar form. // create a constant which is a function of type ISPInvokableFactory having the name Webs // this is bound by the generic type param to return an IWebs instance // and it will use the _Webs concrete class to form the internal type of the invocable export const Webs = spInvokableFactory<IWebs>(_Webs); The ISPInvokableFactory type looks like: export type ISPInvokableFactory<R = any> = (baseUrl: string | ISharePointQueryable, path?: string) => R; And the matching graph type: <R>(f: any): (baseUrl: string | IGraphQueryable, path?: string) => R The general idea of a factory function is that it takes two parameters. The first is either a string or Queryable derivative which forms base for the new object. The second is the next part of the url. In some cases (like the webs property example above) you will note there is no second parameter. Some classes are decorated with defaultPath, which automatically fills the second param. Don't worry too much right now about the deep internals of the library, let's instead focus on some concrete examples. import { SPFx } from \"@pnp/sp\"; import { Web } from \"@pnp/sp/webs\"; // create a web from an absolute url const web = Web(\"https://tenant.sharepoint.com\").using(SPFx(this.context)); // as an example, create a new web using the first as a base // targets: https://tenant.sharepoint.com/sites/dev const web2 = Web(web, \"sites/dev\"); // or you can add any path components you want, here as an example we access the current user property const cu = Web(web, \"currentuser\"); const currentUserInfo = cu(); Now hey you might say - you can't create a request to current user using the Web factory. Well you can, since everything is just based on urls under the covers the actual factory names don't mean anything other than they have the appropriate properties and method hung off them. This is brought up as you will see in many cases objects being used to create queries within methods and properties that don't match their \"type\". It is an important concept when working with the library to always remember we are just building strings. Class structure \u00b6 Internally to the library we have a bit of complexity to make the whole invocable proxy architecture work and provide the typings folks expect. Here is an example implementation with extra comments explaining what is happening. You don't need to understand the entire stack to add a property or method /* The concrete class implementation. This is never exported or shown directly to consumers of the library. It is wrapped by the Proxy we do expose. It extends the _SharePointQueryableInstance class for which there is a matching _SharePointQueryableCollection. The generic parameter defines the return type of a get operation and the invoked result. Classes can have methods and properties as normal. This one has a single property as a simple example */ export class _HubSite extends _SharePointQueryableInstance<IHubSiteInfo> { /** * Gets the ISite instance associated with this hub site */ // the tag decorator is used to provide some additional telemetry on what methods are // being called. @tag(\"hs.getSite\") public async getSite(): Promise<ISite> { // we execute a request using this instance, selecting the SiteUrl property, and invoking it immediately and awaiting the result const d = await this.select(\"SiteUrl\")(); // we then return a new ISite instance created from the Site factory using the returned SiteUrl property as the baseUrl return Site(d.SiteUrl); } } /* This defines the interface we export and expose to consumers. In most cases this extends the concrete object but may add or remove some methods/properties in special cases */ export interface IHubSite extends _HubSite { } /* This defines the HubSite factory function as discussed above binding the spInvokableFactory to a generic param of IHubSite and a param of _HubSite. This is understood to mean that HubSite is a factory function that returns a types of IHubSite which the spInvokableFactory will create using _HubSite as the concrete underlying type. */ export const HubSite = spInvokableFactory<IHubSite>(_HubSite); Add a Property \u00b6 In most cases you won't need to create the class, interface, or factory - you just want to add a property or method. An example of this is sp.web.lists. web is a property of sp and lists is a property of web. You can have a look at those classes as examples. Let's have a look at the fields on the _View class. export class _View extends _SharePointQueryableInstance<IViewInfo> { // ... other code removed // add the property, and provide a return type // return types should be interfaces public get fields(): IViewFields { // we use the ViewFields factory function supplying \"this\" as the first parameter // this will create a url like \".../fields/viewfields\" due to the defaultPath decorator // on the _ViewFields class. This is equivalent to: ViewFields(this, \"viewfields\") return ViewFields(this); } // ... other code removed } There are many examples throughout the library that follow this pattern. Add a Method \u00b6 Adding a method is just like adding a property with the key difference that a method usually does something like make a web request or act like a property but take parameters. Let's look at the _Items getById method: @defaultPath(\"items\") export class _Items extends _SharePointQueryableCollection { /** * Gets an Item by id * * @param id The integer id of the item to retrieve */ // we declare a method and set the return type to an interface public getById(id: number): IItem { // here we use the tag helper to add some telemetry to our request // we create a new IItem using the factory and appending the id value to the end // this gives us a valid url path to a single item .../items/getById(2) // we can then use the returned IItem to extend our chain or execute a request return tag.configure(Item(this).concat(`(${id})`), \"is.getById\"); } // ... other code removed } Web Request Method \u00b6 A second example is a method that performs a request. Here we use the _Item recycle method as an example: /** * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item. */ // we use the tag decorator to add telemetry @tag(\"i.recycle\") // we return a promise public recycle(): Promise<string> { // we use the spPost method to post the request created by cloning our current instance IItem using // the Item factory and adding the path \"recycle\" to the end. Url will look like .../items/getById(2)/recycle return spPost<string>(Item(this, \"recycle\")); } Augment Using Selective Imports \u00b6 To understand is how to extend functionality within the selective imports structures look at list.ts file in the items submodule. Here you can see the code below, with extra comments to explain what is happening. Again, you will see this pattern repeated throughout the library so there are many examples available. // import the addProp helper import { addProp } from \"@pnp/queryable\"; // import the _List concrete class from the types module (not the index!) import { _List } from \"../lists/types\"; // import the interface and factory we are going to add to the List import { Items, IItems } from \"./types\"; // This module declaration fixes up the types, allowing .items to appear in intellisense // when you import \"@pnp/sp/items/list\"; declare module \"../lists/types\" { // we need to extend the concrete type interface _List { readonly items: IItems; } // we need to extend the interface // this may not be strictly necessary as the IList interface extends _List so it // should pick up the same additions, but we have seen in some cases this does seem // to be required. So we include it for safety as it will all be removed during // transpilation we don't need to care about the extra code interface IList { readonly items: IItems; } } // finally we add the property to the _List class // this method call says add a property to _List named \"items\" and that property returns a result using the Items factory // The factory will be called with \"this\" when the property is accessed. If needed there is a fourth parameter to append additional path // information to the property url addProp(_List, \"items\", Items); General Rules for Extending PnPjs \u00b6 Only expose interfaces to consumers Use the factory functions except in very special cases Look for other properties and methods as examples Simple is always preferable, but not always possible - use your best judgement If you find yourself writing a ton of code to solve a problem you think should be easy, ask If you find yourself deep within the core classes or odata library trying to make a change, ask - changes to the core classes are rarely needed Next Steps \u00b6 Now that you have extended the library you need to write a test to cover it!","title":"Expanding the Library"},{"location":"contributing/extending-the-library/#extending-pnpjs","text":"This article is targeted at people wishing to extend PnPjs itself, usually by adding a method or property. At the most basic level PnPjs is a set of libraries used to build and execute a web request and handle the response from that request. Conceptually each object in the fluent chain serves as input when creating the next object in the chain. This is how configuration, url, query, and other values are passed along. To get a sense for what this looks like see the code below. This is taken from inside the webs submodule and shows how the \"webs\" property is added to the web class. // TypeScript property, returning an interface public get webs(): IWebs { // using the Webs factory function and providing \"this\" as the first parameter return Webs(this); }","title":"Extending PnPjs"},{"location":"contributing/extending-the-library/#understanding-factory-functions","text":"PnPjs v3 is designed to only expose interfaces and factory functions. Let's look at the Webs factory function, used above as an example. All factory functions in sp and graph have a similar form. // create a constant which is a function of type ISPInvokableFactory having the name Webs // this is bound by the generic type param to return an IWebs instance // and it will use the _Webs concrete class to form the internal type of the invocable export const Webs = spInvokableFactory<IWebs>(_Webs); The ISPInvokableFactory type looks like: export type ISPInvokableFactory<R = any> = (baseUrl: string | ISharePointQueryable, path?: string) => R; And the matching graph type: <R>(f: any): (baseUrl: string | IGraphQueryable, path?: string) => R The general idea of a factory function is that it takes two parameters. The first is either a string or Queryable derivative which forms base for the new object. The second is the next part of the url. In some cases (like the webs property example above) you will note there is no second parameter. Some classes are decorated with defaultPath, which automatically fills the second param. Don't worry too much right now about the deep internals of the library, let's instead focus on some concrete examples. import { SPFx } from \"@pnp/sp\"; import { Web } from \"@pnp/sp/webs\"; // create a web from an absolute url const web = Web(\"https://tenant.sharepoint.com\").using(SPFx(this.context)); // as an example, create a new web using the first as a base // targets: https://tenant.sharepoint.com/sites/dev const web2 = Web(web, \"sites/dev\"); // or you can add any path components you want, here as an example we access the current user property const cu = Web(web, \"currentuser\"); const currentUserInfo = cu(); Now hey you might say - you can't create a request to current user using the Web factory. Well you can, since everything is just based on urls under the covers the actual factory names don't mean anything other than they have the appropriate properties and method hung off them. This is brought up as you will see in many cases objects being used to create queries within methods and properties that don't match their \"type\". It is an important concept when working with the library to always remember we are just building strings.","title":"Understanding Factory Functions"},{"location":"contributing/extending-the-library/#class-structure","text":"Internally to the library we have a bit of complexity to make the whole invocable proxy architecture work and provide the typings folks expect. Here is an example implementation with extra comments explaining what is happening. You don't need to understand the entire stack to add a property or method /* The concrete class implementation. This is never exported or shown directly to consumers of the library. It is wrapped by the Proxy we do expose. It extends the _SharePointQueryableInstance class for which there is a matching _SharePointQueryableCollection. The generic parameter defines the return type of a get operation and the invoked result. Classes can have methods and properties as normal. This one has a single property as a simple example */ export class _HubSite extends _SharePointQueryableInstance<IHubSiteInfo> { /** * Gets the ISite instance associated with this hub site */ // the tag decorator is used to provide some additional telemetry on what methods are // being called. @tag(\"hs.getSite\") public async getSite(): Promise<ISite> { // we execute a request using this instance, selecting the SiteUrl property, and invoking it immediately and awaiting the result const d = await this.select(\"SiteUrl\")(); // we then return a new ISite instance created from the Site factory using the returned SiteUrl property as the baseUrl return Site(d.SiteUrl); } } /* This defines the interface we export and expose to consumers. In most cases this extends the concrete object but may add or remove some methods/properties in special cases */ export interface IHubSite extends _HubSite { } /* This defines the HubSite factory function as discussed above binding the spInvokableFactory to a generic param of IHubSite and a param of _HubSite. This is understood to mean that HubSite is a factory function that returns a types of IHubSite which the spInvokableFactory will create using _HubSite as the concrete underlying type. */ export const HubSite = spInvokableFactory<IHubSite>(_HubSite);","title":"Class structure"},{"location":"contributing/extending-the-library/#add-a-property","text":"In most cases you won't need to create the class, interface, or factory - you just want to add a property or method. An example of this is sp.web.lists. web is a property of sp and lists is a property of web. You can have a look at those classes as examples. Let's have a look at the fields on the _View class. export class _View extends _SharePointQueryableInstance<IViewInfo> { // ... other code removed // add the property, and provide a return type // return types should be interfaces public get fields(): IViewFields { // we use the ViewFields factory function supplying \"this\" as the first parameter // this will create a url like \".../fields/viewfields\" due to the defaultPath decorator // on the _ViewFields class. This is equivalent to: ViewFields(this, \"viewfields\") return ViewFields(this); } // ... other code removed } There are many examples throughout the library that follow this pattern.","title":"Add a Property"},{"location":"contributing/extending-the-library/#add-a-method","text":"Adding a method is just like adding a property with the key difference that a method usually does something like make a web request or act like a property but take parameters. Let's look at the _Items getById method: @defaultPath(\"items\") export class _Items extends _SharePointQueryableCollection { /** * Gets an Item by id * * @param id The integer id of the item to retrieve */ // we declare a method and set the return type to an interface public getById(id: number): IItem { // here we use the tag helper to add some telemetry to our request // we create a new IItem using the factory and appending the id value to the end // this gives us a valid url path to a single item .../items/getById(2) // we can then use the returned IItem to extend our chain or execute a request return tag.configure(Item(this).concat(`(${id})`), \"is.getById\"); } // ... other code removed }","title":"Add a Method"},{"location":"contributing/extending-the-library/#web-request-method","text":"A second example is a method that performs a request. Here we use the _Item recycle method as an example: /** * Moves the list item to the Recycle Bin and returns the identifier of the new Recycle Bin item. */ // we use the tag decorator to add telemetry @tag(\"i.recycle\") // we return a promise public recycle(): Promise<string> { // we use the spPost method to post the request created by cloning our current instance IItem using // the Item factory and adding the path \"recycle\" to the end. Url will look like .../items/getById(2)/recycle return spPost<string>(Item(this, \"recycle\")); }","title":"Web Request Method"},{"location":"contributing/extending-the-library/#augment-using-selective-imports","text":"To understand is how to extend functionality within the selective imports structures look at list.ts file in the items submodule. Here you can see the code below, with extra comments to explain what is happening. Again, you will see this pattern repeated throughout the library so there are many examples available. // import the addProp helper import { addProp } from \"@pnp/queryable\"; // import the _List concrete class from the types module (not the index!) import { _List } from \"../lists/types\"; // import the interface and factory we are going to add to the List import { Items, IItems } from \"./types\"; // This module declaration fixes up the types, allowing .items to appear in intellisense // when you import \"@pnp/sp/items/list\"; declare module \"../lists/types\" { // we need to extend the concrete type interface _List { readonly items: IItems; } // we need to extend the interface // this may not be strictly necessary as the IList interface extends _List so it // should pick up the same additions, but we have seen in some cases this does seem // to be required. So we include it for safety as it will all be removed during // transpilation we don't need to care about the extra code interface IList { readonly items: IItems; } } // finally we add the property to the _List class // this method call says add a property to _List named \"items\" and that property returns a result using the Items factory // The factory will be called with \"this\" when the property is accessed. If needed there is a fourth parameter to append additional path // information to the property url addProp(_List, \"items\", Items);","title":"Augment Using Selective Imports"},{"location":"contributing/extending-the-library/#general-rules-for-extending-pnpjs","text":"Only expose interfaces to consumers Use the factory functions except in very special cases Look for other properties and methods as examples Simple is always preferable, but not always possible - use your best judgement If you find yourself writing a ton of code to solve a problem you think should be easy, ask If you find yourself deep within the core classes or odata library trying to make a change, ask - changes to the core classes are rarely needed","title":"General Rules for Extending PnPjs"},{"location":"contributing/extending-the-library/#next-steps","text":"Now that you have extended the library you need to write a test to cover it!","title":"Next Steps"},{"location":"contributing/local-debug-configuration/","text":"Local Debugging Configuration \u00b6 This article covers the local setup required to debug the library and run tests. This only needs to be done once (unless you update the app registrations, then you just need to update the settings.js file accordingly). Create settings.js \u00b6 Both local debugging and tests make use of a settings.js file located in the root of the project. Ensure you create a settings.js files by copying settings.example.js and renaming it to settings.js. For more information the settings file please see Settings Minimal Configuration \u00b6 You can control which tests are run by including or omitting sp and graph sections. If sp is present and graph is not, only sp tests are run. Include both and all tests are run, respecting the enableWebTests flag. The following configuration file allows you to run all the tests that do not contact services. var sets = { testing: { enableWebTests: false, } } module.exports = sets; Test your setup \u00b6 If you hit F5 in VSCode now you should be able to see the full response from getting the web's title in the internal console window. If not, ensure that you have properly updated the settings file and registered the add-in perms correctly.","title":"Local Debug Config"},{"location":"contributing/local-debug-configuration/#local-debugging-configuration","text":"This article covers the local setup required to debug the library and run tests. This only needs to be done once (unless you update the app registrations, then you just need to update the settings.js file accordingly).","title":"Local Debugging Configuration"},{"location":"contributing/local-debug-configuration/#create-settingsjs","text":"Both local debugging and tests make use of a settings.js file located in the root of the project. Ensure you create a settings.js files by copying settings.example.js and renaming it to settings.js. For more information the settings file please see Settings","title":"Create settings.js"},{"location":"contributing/local-debug-configuration/#minimal-configuration","text":"You can control which tests are run by including or omitting sp and graph sections. If sp is present and graph is not, only sp tests are run. Include both and all tests are run, respecting the enableWebTests flag. The following configuration file allows you to run all the tests that do not contact services. var sets = { testing: { enableWebTests: false, } } module.exports = sets;","title":"Minimal Configuration"},{"location":"contributing/local-debug-configuration/#test-your-setup","text":"If you hit F5 in VSCode now you should be able to see the full response from getting the web's title in the internal console window. If not, ensure that you have properly updated the settings file and registered the add-in perms correctly.","title":"Test your setup"},{"location":"contributing/npm-scripts/","text":"Supported NPM Scripts \u00b6 As you likely are aware you can embed scripts within package.json. Using this capability coupled with the knowledge that pretty much all of the tools we use now support code files (.js/.ts) as configuration we have removed gulp from our tooling and now execute our various actions via scripts. This is not a knock on gulp, it remains a great tool, rather an opportunity for us to remove some dependencies. This article outlines the current scripts we've implemented and how to use them, with available options and examples. Start \u00b6 Executes the serve command npm start Serve \u00b6 Starts a debugging server serving a bundled script with ./debug/serve/main.ts as the entry point. This allows you to run tests and debug code running within the context of a webpage rather than node. npm run serve Test \u00b6 Runs the tests and coverage for the library. More details on setting up MSAL for node. Options \u00b6 There are several options you can provide to the test command. All of these need to be separated using a \"--\" double hyphen so they are passed to the spawned sub-commands. Test a Single Package \u00b6 --package or -p This option will only run the tests associated with the package you specify. The values are the folder names within the ./packages directory. # run only sp tests npm test -- -p sp # run only logging tests npm test -- -package logging Run a Single Test File \u00b6 --single or --s You can also run a specific file with a package. This option must be used with the single package option as you are essentially specifying the folder and file. This option uses either the flags. # run only sp web tests npm test -- -p sp -s web # run only graph groups tests npm test -- -package graph -single groups Specify a Site \u00b6 --site By default every time you run the tests a new sub-site is created below the site specified in your settings file . You can choose to reuse a site for testing, which saves time when re-running a set of tests frequently. Testing content is not deleted after tests, so if you need to inspect the created content from testing you may wish to forgo this option. This option can be used with any or none of the other testing options. # run only sp web tests with a certain site npm test -- -p sp -s web --site https://some.site.com/sites/dev Cleanup \u00b6 --cleanup If you include this flag the testing web will be deleted once tests are complete. Useful for local testing where you do not need to inspect the web once the tests are complete. Works with any of the other options, be careful when specifying a web using --site as it will be deleted. # clean up our testing site npm test -- --cleanup Logging \u00b6 --logging If you include this flag a console logger will be subscribed and the log level will be set to Info. This will provide console output for all the requests being made during testing. This flag is compatible with all other flags - however unless you are trying to debug a specific test this will produce a lot of chatty output. # enable logging during testing npm test -- --logging spVerbose \u00b6 --spverbose This flag will enable \"verbose\" OData mode for SharePoint tests. This flag is compatible with other flags. npm test -- --spverbose build \u00b6 Invokes the pnpbuild cli to transpile the TypeScript into JavaScript. All behavior is controlled via the tsconfig.json in the root of the project and sub folders as needed. npm run build package \u00b6 Invokes the pnpbuild cli to create the package directories under the dist folder. This will allow you to see exactly what will end up in the npm packages once they are published. npm run package lint \u00b6 Runs the linter. npm run lint clean \u00b6 Removes any generated folders from the working directory. npm run clean","title":"Npm Scripts"},{"location":"contributing/npm-scripts/#supported-npm-scripts","text":"As you likely are aware you can embed scripts within package.json. Using this capability coupled with the knowledge that pretty much all of the tools we use now support code files (.js/.ts) as configuration we have removed gulp from our tooling and now execute our various actions via scripts. This is not a knock on gulp, it remains a great tool, rather an opportunity for us to remove some dependencies. This article outlines the current scripts we've implemented and how to use them, with available options and examples.","title":"Supported NPM Scripts"},{"location":"contributing/npm-scripts/#start","text":"Executes the serve command npm start","title":"Start"},{"location":"contributing/npm-scripts/#serve","text":"Starts a debugging server serving a bundled script with ./debug/serve/main.ts as the entry point. This allows you to run tests and debug code running within the context of a webpage rather than node. npm run serve","title":"Serve"},{"location":"contributing/npm-scripts/#test","text":"Runs the tests and coverage for the library. More details on setting up MSAL for node.","title":"Test"},{"location":"contributing/npm-scripts/#options","text":"There are several options you can provide to the test command. All of these need to be separated using a \"--\" double hyphen so they are passed to the spawned sub-commands.","title":"Options"},{"location":"contributing/npm-scripts/#test-a-single-package","text":"--package or -p This option will only run the tests associated with the package you specify. The values are the folder names within the ./packages directory. # run only sp tests npm test -- -p sp # run only logging tests npm test -- -package logging","title":"Test a Single Package"},{"location":"contributing/npm-scripts/#run-a-single-test-file","text":"--single or --s You can also run a specific file with a package. This option must be used with the single package option as you are essentially specifying the folder and file. This option uses either the flags. # run only sp web tests npm test -- -p sp -s web # run only graph groups tests npm test -- -package graph -single groups","title":"Run a Single Test File"},{"location":"contributing/npm-scripts/#specify-a-site","text":"--site By default every time you run the tests a new sub-site is created below the site specified in your settings file . You can choose to reuse a site for testing, which saves time when re-running a set of tests frequently. Testing content is not deleted after tests, so if you need to inspect the created content from testing you may wish to forgo this option. This option can be used with any or none of the other testing options. # run only sp web tests with a certain site npm test -- -p sp -s web --site https://some.site.com/sites/dev","title":"Specify a Site"},{"location":"contributing/npm-scripts/#cleanup","text":"--cleanup If you include this flag the testing web will be deleted once tests are complete. Useful for local testing where you do not need to inspect the web once the tests are complete. Works with any of the other options, be careful when specifying a web using --site as it will be deleted. # clean up our testing site npm test -- --cleanup","title":"Cleanup"},{"location":"contributing/npm-scripts/#logging","text":"--logging If you include this flag a console logger will be subscribed and the log level will be set to Info. This will provide console output for all the requests being made during testing. This flag is compatible with all other flags - however unless you are trying to debug a specific test this will produce a lot of chatty output. # enable logging during testing npm test -- --logging","title":"Logging"},{"location":"contributing/npm-scripts/#spverbose","text":"--spverbose This flag will enable \"verbose\" OData mode for SharePoint tests. This flag is compatible with other flags. npm test -- --spverbose","title":"spVerbose"},{"location":"contributing/npm-scripts/#build","text":"Invokes the pnpbuild cli to transpile the TypeScript into JavaScript. All behavior is controlled via the tsconfig.json in the root of the project and sub folders as needed. npm run build","title":"build"},{"location":"contributing/npm-scripts/#package","text":"Invokes the pnpbuild cli to create the package directories under the dist folder. This will allow you to see exactly what will end up in the npm packages once they are published. npm run package","title":"package"},{"location":"contributing/npm-scripts/#lint","text":"Runs the linter. npm run lint","title":"lint"},{"location":"contributing/npm-scripts/#clean","text":"Removes any generated folders from the working directory. npm run clean","title":"clean"},{"location":"contributing/pull-requests/","text":"Submitting Pull Requests \u00b6 Pull requests may be large or small - adding whole new features or fixing some misspellings. Regardless, they are all appreciated and help improve the library for everyone! By following the below guidelines we'll have an easier time merging your work and getting it into the next release. Target your pull requests to the version-2 branch Add/Update any relevant docs articles in the relevant package's docs folder related to your changes Include a test for any new functionality and ensure all existing tests are passing by running npm test Ensure linting checks pass by typing npm run lint Ensure everything works for a build by running npm run package Keep your PRs as simple as possible and describe the changes to help the reviewer understand your work If you have an idea for a larger change to the library please open an issue and let's discuss before you invest many hours - these are very welcome but want to ensure it is something we can merge before you spend the time :) If you need to target a PR for version 1, please target the \"version-1\" branch Sharing is Caring - Pull Request Guidance \u00b6 The PnP \"Sharing Is Caring\" initiative teaches the basics around making changes in GitHub, submitting pull requests to the PnP & Microsoft 365 open-source repositories such as PnPjs. Every month, we provide multiple live hands-on sessions that walk attendees through the process of using and contributing to PnP initiatives. To learn more and register for an upcoming session, please visit the Sharing is Caring website. Next Steps \u00b6 Now that you've submitted your PR please keep an eye on it as we might have questions. Once an initial review is complete we'll tag it with the expected version number for which it is targeted. Thank you for helping PnPjs grow and improve!!","title":"Pull Requests"},{"location":"contributing/pull-requests/#submitting-pull-requests","text":"Pull requests may be large or small - adding whole new features or fixing some misspellings. Regardless, they are all appreciated and help improve the library for everyone! By following the below guidelines we'll have an easier time merging your work and getting it into the next release. Target your pull requests to the version-2 branch Add/Update any relevant docs articles in the relevant package's docs folder related to your changes Include a test for any new functionality and ensure all existing tests are passing by running npm test Ensure linting checks pass by typing npm run lint Ensure everything works for a build by running npm run package Keep your PRs as simple as possible and describe the changes to help the reviewer understand your work If you have an idea for a larger change to the library please open an issue and let's discuss before you invest many hours - these are very welcome but want to ensure it is something we can merge before you spend the time :) If you need to target a PR for version 1, please target the \"version-1\" branch","title":"Submitting Pull Requests"},{"location":"contributing/pull-requests/#sharing-is-caring-pull-request-guidance","text":"The PnP \"Sharing Is Caring\" initiative teaches the basics around making changes in GitHub, submitting pull requests to the PnP & Microsoft 365 open-source repositories such as PnPjs. Every month, we provide multiple live hands-on sessions that walk attendees through the process of using and contributing to PnP initiatives. To learn more and register for an upcoming session, please visit the Sharing is Caring website.","title":"Sharing is Caring - Pull Request Guidance"},{"location":"contributing/pull-requests/#next-steps","text":"Now that you've submitted your PR please keep an eye on it as we might have questions. Once an initial review is complete we'll tag it with the expected version number for which it is targeted. Thank you for helping PnPjs grow and improve!!","title":"Next Steps"},{"location":"contributing/settings/","text":"Project Settings \u00b6 This article discusses creating a project settings file for use in local development and debugging of the libraries. The settings file contains authentication and other settings to enable you to run and debug the project locally. The settings file is a JavaScript file that exports a single object representing the settings of your project. You can view the example settings file in the project root . Settings File Format \u00b6 The settings file is configured with MSAL authentication for both SharePoint and Graph. For more information coinfiguring MSAL please review the section in the authentication section for node . MSAL configuration has two parts, these are the initialization which is passed directly to the MsalFetchClient (and on to the underlying msal-node instance) and the scopes. The scopes are always \"https://{tenant}.sharepoint.com/.default\" or \"https://graph.microsoft.com/.default\" depending on what you are calling. If you are calling Microsoft Graph sovereign or gov clouds the scope may need to be updated. You will need to create testing certs for the sample settings file below. Using the following code you end up with three files, \"cert.pem\", \"key.pem\", and \"keytmp.pem\". The \"cert.pem\" file is uploaded to your AAD application registration. The \"key.pem\" is read as the private key for the configuration. Copy the contents of the \"key.pem\" file and paste it in the privateKey variable below. The gitignore file in this repository will ignore the settings.js file. Replace HereIsMySuperPass with your own password mkdir \\temp cd \\temp openssl req -x509 -newkey rsa:2048 -keyout keytmp.pem -out cert.pem -days 365 -passout pass:HereIsMySuperPass -subj '/C=US/ST=Washington/L=Seattle' openssl rsa -in keytmp.pem -out key.pem -passin pass:HereIsMySuperPass const privateKey = `-----BEGIN RSA PRIVATE KEY----- your private key, read from a file or included here -----END RSA PRIVATE KEY----- `; var msalInit = { auth: { authority: \"https://login.microsoftonline.com/{tenant id}\", clientCertificate: { thumbprint: \"{certificate thumbnail}\", privateKey: privateKey, }, clientId: \"{AAD App registration id}\", } } export const settings = { testing: { enableWebTests: true, testUser: \"i:0#.f|membership|user@consto.com\", sp: { url: \"{required for MSAL - absolute url of test site}\", notificationUrl: \"{ optional: notification url }\", msal: { init: msalInit, scopes: [\"https://{tenant}.sharepoint.com/.default\"] }, }, graph: { msal: { init: msalInit, scopes: [\"https://graph.microsoft.com/.default\"] }, }, }, } The settings object has a single sub-object testing which contains the configuration used for debugging and testing PnPjs. The parts of this object are described in detail below. enableWebTests Flag to toggle if tests are run against the live services or not. If this is set to false none of the other sections are required. testUser AAD login account to be used when running tests. sp Settings used to configure SharePoint (sp library) debugging and tests graph Settings used to configure Microsoft Graph (graph library) debugging and tests SP values \u00b6 name description url The url of the site to use for all requests. If a site parameter is not specified a child web will be created under the web at this url. See scripts article for more details. notificationUrl Url used when registering test subscriptions msal Information about MSAL authentication setup Graph value \u00b6 The graph values are described in the table below and come from registering an AAD Application . The permissions required by the registered application are dictated by the tests you want to run or resources you wish to test against. name description msal Information about MSAL authentication setup Create Settings.js file \u00b6 Copy the example file and rename it settings.js. Place the file in the root of your project. Update the settings as needed for your environment. If you are only doing SharePoint testing you can leave the graph section off and vice-versa. Also, if you are not testing anything with hooks you can leave off the notificationUrl.","title":"Settings"},{"location":"contributing/settings/#project-settings","text":"This article discusses creating a project settings file for use in local development and debugging of the libraries. The settings file contains authentication and other settings to enable you to run and debug the project locally. The settings file is a JavaScript file that exports a single object representing the settings of your project. You can view the example settings file in the project root .","title":"Project Settings"},{"location":"contributing/settings/#settings-file-format","text":"The settings file is configured with MSAL authentication for both SharePoint and Graph. For more information coinfiguring MSAL please review the section in the authentication section for node . MSAL configuration has two parts, these are the initialization which is passed directly to the MsalFetchClient (and on to the underlying msal-node instance) and the scopes. The scopes are always \"https://{tenant}.sharepoint.com/.default\" or \"https://graph.microsoft.com/.default\" depending on what you are calling. If you are calling Microsoft Graph sovereign or gov clouds the scope may need to be updated. You will need to create testing certs for the sample settings file below. Using the following code you end up with three files, \"cert.pem\", \"key.pem\", and \"keytmp.pem\". The \"cert.pem\" file is uploaded to your AAD application registration. The \"key.pem\" is read as the private key for the configuration. Copy the contents of the \"key.pem\" file and paste it in the privateKey variable below. The gitignore file in this repository will ignore the settings.js file. Replace HereIsMySuperPass with your own password mkdir \\temp cd \\temp openssl req -x509 -newkey rsa:2048 -keyout keytmp.pem -out cert.pem -days 365 -passout pass:HereIsMySuperPass -subj '/C=US/ST=Washington/L=Seattle' openssl rsa -in keytmp.pem -out key.pem -passin pass:HereIsMySuperPass const privateKey = `-----BEGIN RSA PRIVATE KEY----- your private key, read from a file or included here -----END RSA PRIVATE KEY----- `; var msalInit = { auth: { authority: \"https://login.microsoftonline.com/{tenant id}\", clientCertificate: { thumbprint: \"{certificate thumbnail}\", privateKey: privateKey, }, clientId: \"{AAD App registration id}\", } } export const settings = { testing: { enableWebTests: true, testUser: \"i:0#.f|membership|user@consto.com\", sp: { url: \"{required for MSAL - absolute url of test site}\", notificationUrl: \"{ optional: notification url }\", msal: { init: msalInit, scopes: [\"https://{tenant}.sharepoint.com/.default\"] }, }, graph: { msal: { init: msalInit, scopes: [\"https://graph.microsoft.com/.default\"] }, }, }, } The settings object has a single sub-object testing which contains the configuration used for debugging and testing PnPjs. The parts of this object are described in detail below. enableWebTests Flag to toggle if tests are run against the live services or not. If this is set to false none of the other sections are required. testUser AAD login account to be used when running tests. sp Settings used to configure SharePoint (sp library) debugging and tests graph Settings used to configure Microsoft Graph (graph library) debugging and tests","title":"Settings File Format"},{"location":"contributing/settings/#sp-values","text":"name description url The url of the site to use for all requests. If a site parameter is not specified a child web will be created under the web at this url. See scripts article for more details. notificationUrl Url used when registering test subscriptions msal Information about MSAL authentication setup","title":"SP values"},{"location":"contributing/settings/#graph-value","text":"The graph values are described in the table below and come from registering an AAD Application . The permissions required by the registered application are dictated by the tests you want to run or resources you wish to test against. name description msal Information about MSAL authentication setup","title":"Graph value"},{"location":"contributing/settings/#create-settingsjs-file","text":"Copy the example file and rename it settings.js. Place the file in the root of your project. Update the settings as needed for your environment. If you are only doing SharePoint testing you can leave the graph section off and vice-versa. Also, if you are not testing anything with hooks you can leave off the notificationUrl.","title":"Create Settings.js file"},{"location":"contributing/setup-dev-machine/","text":"Setting up your Developer Machine \u00b6 If you are a longtime client side developer you likely have your machine already configured and can skip to forking the repo and debugging . Setup your development environment \u00b6 These steps will help you get your environment setup for contributing to the core library. Install Visual Studio Code - this is the development environment we use so the contribution sections expect you are as well. If you prefer you can use Visual Studio or any editor you like. Install Node JS - this provides two key capabilities; the first is the nodejs server which will act as our development server (think iisexpress), the second is npm a package manager (think nuget). This library requires node >= 10.18.0 On Windows: Install Python [Optional] Install the tslint extension in VS Code: Press Shift + Ctrl + \"p\" to open the command panel Begin typing \"install extension\" and select the command when it appears in view Begin typing \"tslint\" and select the package when it appears in view Restart Code after installation Fork The Repo \u00b6 All of our contributions come via pull requests and you'll need to fork the repository Now we need to fork and clone the git repository. This can be done using your console or using your preferred Git GUI tool. Once you have the code locally, navigate to the root of the project in your console. Type the following command: npm install Follow the guidance to complete the one-time local configuration required to debug and run tests. Then you can follow the guidance in the debugging article.","title":"Set Up Dev Machine"},{"location":"contributing/setup-dev-machine/#setting-up-your-developer-machine","text":"If you are a longtime client side developer you likely have your machine already configured and can skip to forking the repo and debugging .","title":"Setting up your Developer Machine"},{"location":"contributing/setup-dev-machine/#setup-your-development-environment","text":"These steps will help you get your environment setup for contributing to the core library. Install Visual Studio Code - this is the development environment we use so the contribution sections expect you are as well. If you prefer you can use Visual Studio or any editor you like. Install Node JS - this provides two key capabilities; the first is the nodejs server which will act as our development server (think iisexpress), the second is npm a package manager (think nuget). This library requires node >= 10.18.0 On Windows: Install Python [Optional] Install the tslint extension in VS Code: Press Shift + Ctrl + \"p\" to open the command panel Begin typing \"install extension\" and select the command when it appears in view Begin typing \"tslint\" and select the package when it appears in view Restart Code after installation","title":"Setup your development environment"},{"location":"contributing/setup-dev-machine/#fork-the-repo","text":"All of our contributions come via pull requests and you'll need to fork the repository Now we need to fork and clone the git repository. This can be done using your console or using your preferred Git GUI tool. Once you have the code locally, navigate to the root of the project in your console. Type the following command: npm install Follow the guidance to complete the one-time local configuration required to debug and run tests. Then you can follow the guidance in the debugging article.","title":"Fork The Repo"},{"location":"core/behavior-recipes/","text":"Behavior Recipes \u00b6 This article contains example recipes for building your own behaviors. We don't want to include every possible behavior within the library, but do want folks to have easy ways to solve the problems they encounter. If have ideas for a missing recipe, please let us know in the issues list OR submit them to this page as a PR! We want to see what types of behaviors folks build and will evaluate options to either include them in the main libraries, leave them here as a reference resource, or possibly release a community behaviors package. Alternatively we encourage you to publish your own behaviors as npm packages to share with others! Proxy \u00b6 At times you might need to introduce a proxy for requests for debugging or other networking needs. You can easily do so using your proxy of choice in Nodejs. This example uses \"https-proxy-agent\" but would work similarly for any implementation. proxy.ts import { TimelinePipe } from \"@pnp/core\"; import { Queryable } from \"@pnp/queryable\"; import { HttpsProxyAgent } from \"https-proxy-agent\"; export function Proxy(proxyInit: string): TimelinePipe<Queryable>; // eslint-disable-next-line no-redeclare export function Proxy(proxyInit: any): TimelinePipe<Queryable>; // eslint-disable-next-line no-redeclare export function Proxy(proxyInit: any): TimelinePipe<Queryable> { const proxy = typeof proxyInit === \"string\" ? new HttpsProxyAgent(proxyInit) : proxyInit; return (instance: Queryable) => { instance.on.pre(async (url, init, result) => { // we add the proxy to the request (<any>init).agent = proxy; return [url, init, result]; }); return instance; }; } usage import { Proxy } from \"./proxy.ts\"; import \"@pnp/sp/webs\"; import { SPDefault } from \"@pnp/nodejs\"; // would work with graph library in the same manner const sp = spfi(\"https://tenant.sharepoint.com/sites.dev\").using(SPDefault({ msal: { config: { config }, scopes: {scopes }, }, }), Proxy(\"http://127.0.0.1:8888\")); const webInfo = await sp.webs(); Add QueryString to bypass request caching \u00b6 In some instances users express a desire to append something to the querystring to avoid getting cached responses back for requests. This pattern is an example of doing that in v3. query-cache-param.ts export function CacheBust(): TimelinePipe<Queryable> { return (instance: Queryable) => { instance.on.pre(async (url, init, result) => { url += url.indexOf(\"?\") > -1 ? \"&\" : \"?\"; url += \"nonce=\" + encodeURIComponent(new Date().toISOString()); return [url, init, result]; }); return instance; }; } usage import { CacheBust } from \"./query-cache-param.ts\"; import \"@pnp/sp/webs\"; import { SPDefault } from \"@pnp/nodejs\"; // would work with graph library in the same manner const sp = spfi(\"https://tenant.sharepoint.com/sites.dev\").using(SPDefault({ msal: { config: { config }, scopes: { scopes }, }, }), CacheBust()); const webInfo = await sp.webs();","title":"Behavior Recipes"},{"location":"core/behavior-recipes/#behavior-recipes","text":"This article contains example recipes for building your own behaviors. We don't want to include every possible behavior within the library, but do want folks to have easy ways to solve the problems they encounter. If have ideas for a missing recipe, please let us know in the issues list OR submit them to this page as a PR! We want to see what types of behaviors folks build and will evaluate options to either include them in the main libraries, leave them here as a reference resource, or possibly release a community behaviors package. Alternatively we encourage you to publish your own behaviors as npm packages to share with others!","title":"Behavior Recipes"},{"location":"core/behavior-recipes/#proxy","text":"At times you might need to introduce a proxy for requests for debugging or other networking needs. You can easily do so using your proxy of choice in Nodejs. This example uses \"https-proxy-agent\" but would work similarly for any implementation. proxy.ts import { TimelinePipe } from \"@pnp/core\"; import { Queryable } from \"@pnp/queryable\"; import { HttpsProxyAgent } from \"https-proxy-agent\"; export function Proxy(proxyInit: string): TimelinePipe<Queryable>; // eslint-disable-next-line no-redeclare export function Proxy(proxyInit: any): TimelinePipe<Queryable>; // eslint-disable-next-line no-redeclare export function Proxy(proxyInit: any): TimelinePipe<Queryable> { const proxy = typeof proxyInit === \"string\" ? new HttpsProxyAgent(proxyInit) : proxyInit; return (instance: Queryable) => { instance.on.pre(async (url, init, result) => { // we add the proxy to the request (<any>init).agent = proxy; return [url, init, result]; }); return instance; }; } usage import { Proxy } from \"./proxy.ts\"; import \"@pnp/sp/webs\"; import { SPDefault } from \"@pnp/nodejs\"; // would work with graph library in the same manner const sp = spfi(\"https://tenant.sharepoint.com/sites.dev\").using(SPDefault({ msal: { config: { config }, scopes: {scopes }, }, }), Proxy(\"http://127.0.0.1:8888\")); const webInfo = await sp.webs();","title":"Proxy"},{"location":"core/behavior-recipes/#add-querystring-to-bypass-request-caching","text":"In some instances users express a desire to append something to the querystring to avoid getting cached responses back for requests. This pattern is an example of doing that in v3. query-cache-param.ts export function CacheBust(): TimelinePipe<Queryable> { return (instance: Queryable) => { instance.on.pre(async (url, init, result) => { url += url.indexOf(\"?\") > -1 ? \"&\" : \"?\"; url += \"nonce=\" + encodeURIComponent(new Date().toISOString()); return [url, init, result]; }); return instance; }; } usage import { CacheBust } from \"./query-cache-param.ts\"; import \"@pnp/sp/webs\"; import { SPDefault } from \"@pnp/nodejs\"; // would work with graph library in the same manner const sp = spfi(\"https://tenant.sharepoint.com/sites.dev\").using(SPDefault({ msal: { config: { config }, scopes: { scopes }, }, }), CacheBust()); const webInfo = await sp.webs();","title":"Add QueryString to bypass request caching"},{"location":"core/behaviors/","text":"@pnp/core : behaviors \u00b6 While you can always register observers to any Timeline's moments using the .on.moment syntax, to make things easier we have included the ability to create behaviors. Behaviors define one or more observer registrations abstracted into a single registration. To differentiate behaviors are applied with the .using method. The power of behaviors is they are composable so a behavior can apply other behaviors. Basic Example \u00b6 Let's create a behavior that will register two observers to a Timeline. We'll use error and log since they exist on all Timelines. In this example let's imagine we need to include some special secret into every lifecycle for logging to work. And we also want a company wide method to track errors. So we roll our own behavior. import { Timeline, TimelinePipe } from \"@pnp/core\"; import { MySpecialLoggingFunction } from \"../mylogging.js\"; // top level function allows binding of values within the closure export function MyBehavior(specialSecret: string): TimelinePipe { // returns the actual behavior function that is applied to the instance return (instance: Timeline<any>) => { // register as many observers as needed instance.on.log(function (message: string, severity: number) { MySpecialLoggingFunction(message, severity, specialSecret); }); instance.on.error(function (err: string | Error) { MySpecialLoggingFunction(typeof err === \"string\" ? err : err.toString(), severity, specialSecret); }); return instance; }; } // apply the behavior to a Timeline/Queryable obj.using(MyBehavior(\"HereIsMySuperSecretValue\")); Composing Behaviors \u00b6 We encourage you to use our defaults, or create your own default behavior appropriate to your needs. You can see all of the behaviors available in @pnp/nodejs , @pnp/queryable , @pnp/sp , and @pnp/graph . As an example, let's create our own behavior for a nodejs project. We want to call the graph, default to the beta endpoint, setup MSAL, and include a custom header we need for our environment. To do so we create a composed behavior consisting of graph's DefaultInit, graph's DefaultHeaders, nodejs's MSAL, nodejs's NodeFetchWithRetry, and queryable's DefaultParse & InjectHeaders. Then we can import this behavior into all our projects to configure them. company-default.ts import { TimelinePipe } from \"@pnp/core\"; import { DefaultParse, Queryable, InjectHeaders } from \"@pnp/queryable\"; import { DefaultHeaders, DefaultInit } from \"@pnp/graph\"; import { NodeFetchWithRetry, MSAL } from \"@pnp/nodejs\"; export function CompanyDefault(): TimelinePipe<Queryable> { return (instance: Queryable) => { instance.using( // use the default headers DefaultHeaders(), // use the default init, but change the base url to beta DefaultInit(\"https://graph.microsoft.com/beta\"), // use node-fetch with retry NodeFetchWithRetry(), // use the default parsing DefaultParse(), // inject our special header to all requests InjectHeaders({ \"X-SomeSpecialToken\": \"{THE SPECIAL TOKEN VALUE}\", }), // setup node's MSAL with configuration from the environment (or any source) MSAL(process.env.MSAL_CONFIG)); return instance; }; } index.ts import { CompanyDefault } from \"./company-default.ts\"; import { graphfi } from \"@pnp/graph\"; // we can consistently and easily setup our graph instance using a single behavior const graph = graphfi().using(CompanyDefault()); You can easily share your composed behaviors across your projects using library components in SPFx , a company CDN, or an npm package. Core Behaviors \u00b6 This section describes two behaviors provided by the @pnp/core library, AssignFrom and CopyFrom. Likely you won't often need them directly - they are used in some places internally - but they are made available should they prove useful. AssignFrom \u00b6 This behavior creates a ref to the supplied Timeline implementation's observers and resets the inheriting flag. This means that changes to the parent, here being the supplied Timeline, will begin affecting the target to which this behavior is applied. import { spfi, SPBrowser } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { AssignFrom } from \"@pnp/core\"; // some local project file import { MyCustomeBehavior } from \"./behaviors.ts\"; const source = spfi().using(SPBrowser()); const target = spfi().using(MyCustomeBehavior()); // target will now hold a reference to the observers contained in source // changes to the subscribed observers in source will apply to target // anything that was added by \"MyCustomeBehavior\" will no longer be present target.using(AssignFrom(source.web)); // you can always apply additional behaviors or register directly on the events // but once you modify target it will not longer ref source and changes to source will no longer apply target.using(SomeOtherBehavior()); target.on.log(console.log); CopyFrom \u00b6 Similar to AssignFrom, this method creates a copy of all the observers on the source and applies them to the target. This can be done either as a replace or append operation using the second parameter. The default is \"append\". \"replace\" will first clear each source moment's registered observers then apply each in source-order via the on operation. \"append\" will apply each source moment's registered observers in source-order via the on operation By design CopyFrom does NOT include moments defined by symbol keys. import { spfi, SPBrowser } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { CopyFrom } from \"@pnp/core\"; // some local project file import { MyCustomeBehavior } from \"./behaviors.ts\"; const source = spfi().using(SPBrowser()); const target = spfi().using(MyCustomeBehavior()); // target will have the observers copied from source, but no reference to source. Changes to source's registered observers will not affect target. // any previously registered observers in target are maintained as the default behavior is to append target.using(CopyFrom(source.web)); // target will have the observers copied from source, but no reference to source. Changes to source's registered observers will not affect target. // any previously registered observers in target are removed target.using(CopyFrom(source.web, \"replace\")); // you can always apply additional behaviors or register directly on the events // with CopyFrom no reference to source is maintained target.using(SomeOtherBehavior()); target.on.log(console.log); As well CopyFrom supports a filter parameter if you only want to copy the observers from a subset of moments. This filter is a predicate function taking a single string key and returning true if the observers from that moment should be copied to the target. import { spfi, SPBrowser } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { CopyFrom } from \"@pnp/core\"; // some local project file import { MyCustomeBehavior } from \"./behaviors.ts\"; const source = spfi().using(SPBrowser()); const target = spfi().using(MyCustomeBehavior()); // target will have the observers copied from source, but no reference to source. Changes to source's registered observers will not affect target. // any previously registered observers in target are maintained as the default behavior is to append target.using(CopyFrom(source.web)); // target will have the observers `auth` and `send` copied from source, but no reference to source. Changes to source's registered observers will not affect target. // any previously registered observers in target are removed target.using(CopyFrom(source.web, \"replace\", (k) => /(auth|send)/i.test(k))); // you can always apply additional behaviors or register directly on the events // with CopyFrom no reference to source is maintained target.using(SomeOtherBehavior()); target.on.log(console.log);","title":"Behaviors"},{"location":"core/behaviors/#pnpcore-behaviors","text":"While you can always register observers to any Timeline's moments using the .on.moment syntax, to make things easier we have included the ability to create behaviors. Behaviors define one or more observer registrations abstracted into a single registration. To differentiate behaviors are applied with the .using method. The power of behaviors is they are composable so a behavior can apply other behaviors.","title":"@pnp/core : behaviors"},{"location":"core/behaviors/#basic-example","text":"Let's create a behavior that will register two observers to a Timeline. We'll use error and log since they exist on all Timelines. In this example let's imagine we need to include some special secret into every lifecycle for logging to work. And we also want a company wide method to track errors. So we roll our own behavior. import { Timeline, TimelinePipe } from \"@pnp/core\"; import { MySpecialLoggingFunction } from \"../mylogging.js\"; // top level function allows binding of values within the closure export function MyBehavior(specialSecret: string): TimelinePipe { // returns the actual behavior function that is applied to the instance return (instance: Timeline<any>) => { // register as many observers as needed instance.on.log(function (message: string, severity: number) { MySpecialLoggingFunction(message, severity, specialSecret); }); instance.on.error(function (err: string | Error) { MySpecialLoggingFunction(typeof err === \"string\" ? err : err.toString(), severity, specialSecret); }); return instance; }; } // apply the behavior to a Timeline/Queryable obj.using(MyBehavior(\"HereIsMySuperSecretValue\"));","title":"Basic Example"},{"location":"core/behaviors/#composing-behaviors","text":"We encourage you to use our defaults, or create your own default behavior appropriate to your needs. You can see all of the behaviors available in @pnp/nodejs , @pnp/queryable , @pnp/sp , and @pnp/graph . As an example, let's create our own behavior for a nodejs project. We want to call the graph, default to the beta endpoint, setup MSAL, and include a custom header we need for our environment. To do so we create a composed behavior consisting of graph's DefaultInit, graph's DefaultHeaders, nodejs's MSAL, nodejs's NodeFetchWithRetry, and queryable's DefaultParse & InjectHeaders. Then we can import this behavior into all our projects to configure them. company-default.ts import { TimelinePipe } from \"@pnp/core\"; import { DefaultParse, Queryable, InjectHeaders } from \"@pnp/queryable\"; import { DefaultHeaders, DefaultInit } from \"@pnp/graph\"; import { NodeFetchWithRetry, MSAL } from \"@pnp/nodejs\"; export function CompanyDefault(): TimelinePipe<Queryable> { return (instance: Queryable) => { instance.using( // use the default headers DefaultHeaders(), // use the default init, but change the base url to beta DefaultInit(\"https://graph.microsoft.com/beta\"), // use node-fetch with retry NodeFetchWithRetry(), // use the default parsing DefaultParse(), // inject our special header to all requests InjectHeaders({ \"X-SomeSpecialToken\": \"{THE SPECIAL TOKEN VALUE}\", }), // setup node's MSAL with configuration from the environment (or any source) MSAL(process.env.MSAL_CONFIG)); return instance; }; } index.ts import { CompanyDefault } from \"./company-default.ts\"; import { graphfi } from \"@pnp/graph\"; // we can consistently and easily setup our graph instance using a single behavior const graph = graphfi().using(CompanyDefault()); You can easily share your composed behaviors across your projects using library components in SPFx , a company CDN, or an npm package.","title":"Composing Behaviors"},{"location":"core/behaviors/#core-behaviors","text":"This section describes two behaviors provided by the @pnp/core library, AssignFrom and CopyFrom. Likely you won't often need them directly - they are used in some places internally - but they are made available should they prove useful.","title":"Core Behaviors"},{"location":"core/behaviors/#assignfrom","text":"This behavior creates a ref to the supplied Timeline implementation's observers and resets the inheriting flag. This means that changes to the parent, here being the supplied Timeline, will begin affecting the target to which this behavior is applied. import { spfi, SPBrowser } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { AssignFrom } from \"@pnp/core\"; // some local project file import { MyCustomeBehavior } from \"./behaviors.ts\"; const source = spfi().using(SPBrowser()); const target = spfi().using(MyCustomeBehavior()); // target will now hold a reference to the observers contained in source // changes to the subscribed observers in source will apply to target // anything that was added by \"MyCustomeBehavior\" will no longer be present target.using(AssignFrom(source.web)); // you can always apply additional behaviors or register directly on the events // but once you modify target it will not longer ref source and changes to source will no longer apply target.using(SomeOtherBehavior()); target.on.log(console.log);","title":"AssignFrom"},{"location":"core/behaviors/#copyfrom","text":"Similar to AssignFrom, this method creates a copy of all the observers on the source and applies them to the target. This can be done either as a replace or append operation using the second parameter. The default is \"append\". \"replace\" will first clear each source moment's registered observers then apply each in source-order via the on operation. \"append\" will apply each source moment's registered observers in source-order via the on operation By design CopyFrom does NOT include moments defined by symbol keys. import { spfi, SPBrowser } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { CopyFrom } from \"@pnp/core\"; // some local project file import { MyCustomeBehavior } from \"./behaviors.ts\"; const source = spfi().using(SPBrowser()); const target = spfi().using(MyCustomeBehavior()); // target will have the observers copied from source, but no reference to source. Changes to source's registered observers will not affect target. // any previously registered observers in target are maintained as the default behavior is to append target.using(CopyFrom(source.web)); // target will have the observers copied from source, but no reference to source. Changes to source's registered observers will not affect target. // any previously registered observers in target are removed target.using(CopyFrom(source.web, \"replace\")); // you can always apply additional behaviors or register directly on the events // with CopyFrom no reference to source is maintained target.using(SomeOtherBehavior()); target.on.log(console.log); As well CopyFrom supports a filter parameter if you only want to copy the observers from a subset of moments. This filter is a predicate function taking a single string key and returning true if the observers from that moment should be copied to the target. import { spfi, SPBrowser } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { CopyFrom } from \"@pnp/core\"; // some local project file import { MyCustomeBehavior } from \"./behaviors.ts\"; const source = spfi().using(SPBrowser()); const target = spfi().using(MyCustomeBehavior()); // target will have the observers copied from source, but no reference to source. Changes to source's registered observers will not affect target. // any previously registered observers in target are maintained as the default behavior is to append target.using(CopyFrom(source.web)); // target will have the observers `auth` and `send` copied from source, but no reference to source. Changes to source's registered observers will not affect target. // any previously registered observers in target are removed target.using(CopyFrom(source.web, \"replace\", (k) => /(auth|send)/i.test(k))); // you can always apply additional behaviors or register directly on the events // with CopyFrom no reference to source is maintained target.using(SomeOtherBehavior()); target.on.log(console.log);","title":"CopyFrom"},{"location":"core/moments/","text":"@pnp/core : moments \u00b6 Moments are the name we use to describe the steps executed during a timeline lifecycle. They are defined on a plain object by a series of functions with the general form: // the first argument is the set of observers subscribed to the given moment // the rest of the args vary by an interaction between moment and observer types and represent the args passed when emit is called for a given moment function (observers: any[], ...args: any[]): any; Let's have a look at one of the included moment factory functions, which define how the moment interacts with its registered observers, and use it to understand a bit more on how things work. In this example we'll look at the broadcast moment, used to mimic a classic event where no return value is tracked, we just want to emit an event to all the subscribed observers. // the broadcast factory function, returning the actual moment implementation function // The type T is used by the typings of Timeline to described the arguments passed in emit export function broadcast<T extends ObserverAction>(): (observers: T[], ...args: any[]) => void { // this is the actual moment implementation, called each time a given moment occurs in the timeline return function (observers: T[], ...args: any[]): void { // we make a local ref of the observers const obs = [...observers]; // we loop through sending the args to each observer for (let i = 0; i < obs.length; i++) { // note that within every moment and observer \"this\" will be the current timeline object Reflect.apply(obs[i], this, args); } }; } Let's use broadcast in a couple examples to show how it works. You can also review the timeline article for a fuller example. // our first type determines the type of the observers that will be regsitered to the moment \"first\" type Broadcast1ObserverType = (this: Timeline<any>, message: string) => void; // our second type determines the type of the observers that will be regsitered to the moment \"second\" type Broadcast2ObserverType = (this: Timeline<any>, value: number, value2: number) => void; const moments = { first: broadcast<Broadcast1ObserverType>(), second: broadcast<Broadcast2ObserverType>(), } as const; Now that we have defined two moments we can update our Timeline implementing class to emit each as we desire, as covered in the timeline article. Let's focus on the relationship between the moment definition and the typings inherited by on and emit in Timeline. Because we want observers of a given moment to understand what arguments they will get the typings of Timeline are setup to use the type defining the moment's observer across all operations. For example, using our moment \"first\" from above. Each moment can be subscribed by zero or more observers. // our observer function matches the type of Broadcast1ObserverType and the intellisense will reflect that. // If you want to change the signature you need only do so in the type Broadcast1ObserverType and the change will update the on and emit typings as well // here we want to reference \"this\" inside our observer function (preferred) obj.on.first(function (this: Timeline<any>, message: string) { // we use \"this\", which will be the current timeline and the default log method to emit a logging event this.log(message, 0); }); // we don't need to reference \"this\" so we use arrow notation obj.on.first((message: string) => { console.log(message); }); Similarily for second our observers would match Broadcast2Observer. obj.on.second(function (this: Timeline<any>, value: number, value2: number) { // we use \"this\", which will be the current timeline and the default log method to emit a logging event this.log(`got value1: ${value} value2: ${value2}`, 0); }); obj.on.second((value: number, value2: number) => { console.log(`got value1: ${value} value2: ${value2}`); }); Existing Moment Factories \u00b6 You a already familiar with broadcast which passes the emited args to all subscribed observers, this section lists the existing built in moment factories: broadcast \u00b6 Creates a moment that passes the emited args to all subscribed observers. Takes a single type parameter defining the observer signature and always returns void. Is not async. import { broadcast } from \"@pnp/core\"; // can have any method signature you want that returns void, \"this\" will always be set type BroadcastObserver = (this: Timeline<any>, message: string) => void; const moments = { example: broadcast<BroadcastObserver>(), } as const; obj.on.example(function (this: Timeline<any>, message: string) { this.log(message, 0); }); obj.emit.example(\"Hello\"); asyncReduce \u00b6 Creates a moment that executes each observer asynchronously, awaiting the result and passes the returned arguments as the arguments to the next observer. This is very much like the redux pattern taking the arguments as the state which each observer may modify then returning a new state. import { asyncReduce } from \"@pnp/core\"; // can have any method signature you want, so long as it is async and returns a tuple matching in order the arguments, \"this\" will always be set type AsyncReduceObserver = (this: Timeline<any>, arg1: string, arg2: number) => Promise<[string, number]>; const moments = { example: asyncReduce<AsyncReduceObserver>(), } as const; obj.on.example(async function (this: Timeline<any>, arg1: string, arg2: number) { this.log(message, 0); // we can manipulate the values arg2++; // always return a tuple of the passed arguments, possibly modified return [arg1, arg2]; }); obj.emit.example(\"Hello\", 42); request \u00b6 Creates a moment where the first registered observer is used to asynchronously execute a request, returning a single result. If no result is returned (undefined) no further action is taken and the result will be undefined (i.e. additional observers are not used). This is used by us to execute web requets, but would also serve to represent any async request such as a database read, file read, or provisioning step. import { request } from \"@pnp/core\"; // can have any method signature you want, \"this\" will always be set type RequestObserver = (this: Timeline<any>, arg1: string, arg2: number) => Promise<string>; const moments = { example: request<RequestObserver>(), } as const; obj.on.example(async function (this: Timeline<any>, arg1: string, arg2: number) { this.log(`Sending request: ${arg1}`, 0); // request expects a single value result return `result value ${arg2}`; }); obj.emit.example(\"Hello\", 42); Additional Examples \u00b6 waitall \u00b6 Perhaps you have a situation where you would like to wait until all of the subscribed observers for a given moment complete, but they can run async in parallel. export function waitall<T extends ObserverFunction>(): (observers: T[], ...args: any[]) => Promise<void> { // this is the actual moment implementation, called each time a given moment occurs in the timeline return function (observers: T[], ...args: any[]): void { // we make a local ref of the observers const obs = [...observers]; const promises = []; // we loop through sending the args to each observer for (let i = 0; i < obs.length; i++) { // note that within every moment and observer \"this\" will be the current timeline object promises.push(Reflect.apply(obs[i], this, args)); } return Promise.all(promises).then(() => void(0)); }; } first \u00b6 Perhaps you would instead like to only get the result of the first observer to return. export function first<T extends ObserverFunction>(): (observers: T[], ...args: any[]) => Promise<any> { // this is the actual moment implementation, called each time a given moment occurs in the timeline return function (observers: T[], ...args: any[]): void { // we make a local ref of the observers const obs = [...observers]; const promises = []; // we loop through sending the args to each observer for (let i = 0; i < obs.length; i++) { // note that within every moment and observer \"this\" will be the current timeline object promises.push(Reflect.apply(obs[i], this, args)); } return Promise.race(promises); }; }","title":"moments"},{"location":"core/moments/#pnpcore-moments","text":"Moments are the name we use to describe the steps executed during a timeline lifecycle. They are defined on a plain object by a series of functions with the general form: // the first argument is the set of observers subscribed to the given moment // the rest of the args vary by an interaction between moment and observer types and represent the args passed when emit is called for a given moment function (observers: any[], ...args: any[]): any; Let's have a look at one of the included moment factory functions, which define how the moment interacts with its registered observers, and use it to understand a bit more on how things work. In this example we'll look at the broadcast moment, used to mimic a classic event where no return value is tracked, we just want to emit an event to all the subscribed observers. // the broadcast factory function, returning the actual moment implementation function // The type T is used by the typings of Timeline to described the arguments passed in emit export function broadcast<T extends ObserverAction>(): (observers: T[], ...args: any[]) => void { // this is the actual moment implementation, called each time a given moment occurs in the timeline return function (observers: T[], ...args: any[]): void { // we make a local ref of the observers const obs = [...observers]; // we loop through sending the args to each observer for (let i = 0; i < obs.length; i++) { // note that within every moment and observer \"this\" will be the current timeline object Reflect.apply(obs[i], this, args); } }; } Let's use broadcast in a couple examples to show how it works. You can also review the timeline article for a fuller example. // our first type determines the type of the observers that will be regsitered to the moment \"first\" type Broadcast1ObserverType = (this: Timeline<any>, message: string) => void; // our second type determines the type of the observers that will be regsitered to the moment \"second\" type Broadcast2ObserverType = (this: Timeline<any>, value: number, value2: number) => void; const moments = { first: broadcast<Broadcast1ObserverType>(), second: broadcast<Broadcast2ObserverType>(), } as const; Now that we have defined two moments we can update our Timeline implementing class to emit each as we desire, as covered in the timeline article. Let's focus on the relationship between the moment definition and the typings inherited by on and emit in Timeline. Because we want observers of a given moment to understand what arguments they will get the typings of Timeline are setup to use the type defining the moment's observer across all operations. For example, using our moment \"first\" from above. Each moment can be subscribed by zero or more observers. // our observer function matches the type of Broadcast1ObserverType and the intellisense will reflect that. // If you want to change the signature you need only do so in the type Broadcast1ObserverType and the change will update the on and emit typings as well // here we want to reference \"this\" inside our observer function (preferred) obj.on.first(function (this: Timeline<any>, message: string) { // we use \"this\", which will be the current timeline and the default log method to emit a logging event this.log(message, 0); }); // we don't need to reference \"this\" so we use arrow notation obj.on.first((message: string) => { console.log(message); }); Similarily for second our observers would match Broadcast2Observer. obj.on.second(function (this: Timeline<any>, value: number, value2: number) { // we use \"this\", which will be the current timeline and the default log method to emit a logging event this.log(`got value1: ${value} value2: ${value2}`, 0); }); obj.on.second((value: number, value2: number) => { console.log(`got value1: ${value} value2: ${value2}`); });","title":"@pnp/core : moments"},{"location":"core/moments/#existing-moment-factories","text":"You a already familiar with broadcast which passes the emited args to all subscribed observers, this section lists the existing built in moment factories:","title":"Existing Moment Factories"},{"location":"core/moments/#broadcast","text":"Creates a moment that passes the emited args to all subscribed observers. Takes a single type parameter defining the observer signature and always returns void. Is not async. import { broadcast } from \"@pnp/core\"; // can have any method signature you want that returns void, \"this\" will always be set type BroadcastObserver = (this: Timeline<any>, message: string) => void; const moments = { example: broadcast<BroadcastObserver>(), } as const; obj.on.example(function (this: Timeline<any>, message: string) { this.log(message, 0); }); obj.emit.example(\"Hello\");","title":"broadcast"},{"location":"core/moments/#asyncreduce","text":"Creates a moment that executes each observer asynchronously, awaiting the result and passes the returned arguments as the arguments to the next observer. This is very much like the redux pattern taking the arguments as the state which each observer may modify then returning a new state. import { asyncReduce } from \"@pnp/core\"; // can have any method signature you want, so long as it is async and returns a tuple matching in order the arguments, \"this\" will always be set type AsyncReduceObserver = (this: Timeline<any>, arg1: string, arg2: number) => Promise<[string, number]>; const moments = { example: asyncReduce<AsyncReduceObserver>(), } as const; obj.on.example(async function (this: Timeline<any>, arg1: string, arg2: number) { this.log(message, 0); // we can manipulate the values arg2++; // always return a tuple of the passed arguments, possibly modified return [arg1, arg2]; }); obj.emit.example(\"Hello\", 42);","title":"asyncReduce"},{"location":"core/moments/#request","text":"Creates a moment where the first registered observer is used to asynchronously execute a request, returning a single result. If no result is returned (undefined) no further action is taken and the result will be undefined (i.e. additional observers are not used). This is used by us to execute web requets, but would also serve to represent any async request such as a database read, file read, or provisioning step. import { request } from \"@pnp/core\"; // can have any method signature you want, \"this\" will always be set type RequestObserver = (this: Timeline<any>, arg1: string, arg2: number) => Promise<string>; const moments = { example: request<RequestObserver>(), } as const; obj.on.example(async function (this: Timeline<any>, arg1: string, arg2: number) { this.log(`Sending request: ${arg1}`, 0); // request expects a single value result return `result value ${arg2}`; }); obj.emit.example(\"Hello\", 42);","title":"request"},{"location":"core/moments/#additional-examples","text":"","title":"Additional Examples"},{"location":"core/moments/#waitall","text":"Perhaps you have a situation where you would like to wait until all of the subscribed observers for a given moment complete, but they can run async in parallel. export function waitall<T extends ObserverFunction>(): (observers: T[], ...args: any[]) => Promise<void> { // this is the actual moment implementation, called each time a given moment occurs in the timeline return function (observers: T[], ...args: any[]): void { // we make a local ref of the observers const obs = [...observers]; const promises = []; // we loop through sending the args to each observer for (let i = 0; i < obs.length; i++) { // note that within every moment and observer \"this\" will be the current timeline object promises.push(Reflect.apply(obs[i], this, args)); } return Promise.all(promises).then(() => void(0)); }; }","title":"waitall"},{"location":"core/moments/#first","text":"Perhaps you would instead like to only get the result of the first observer to return. export function first<T extends ObserverFunction>(): (observers: T[], ...args: any[]) => Promise<any> { // this is the actual moment implementation, called each time a given moment occurs in the timeline return function (observers: T[], ...args: any[]): void { // we make a local ref of the observers const obs = [...observers]; const promises = []; // we loop through sending the args to each observer for (let i = 0; i < obs.length; i++) { // note that within every moment and observer \"this\" will be the current timeline object promises.push(Reflect.apply(obs[i], this, args)); } return Promise.race(promises); }; }","title":"first"},{"location":"core/observers/","text":"@pnp/core : observers \u00b6 Observers are used to implement all of the functionality within a Timeline's moments . Each moment defines the signature of observers you can register, and calling the observers is orchestrated by the implementation of the moment. A few facts about observers: All observers are functions The \"this\" of an observer is always the Timeline implementation that emitted the moment Do not handle non-recoverable errors in observers, let them throw and they will be handled by the library appropriately and routed to the error moment. For details on implementing observers for Queryable, please see this article . Observer Inheritance \u00b6 Timelines created from other timelines (i.e. how sp and graph libraries work) inherit all of the observers from the parent. Observers added to the parent will apply for all children. When you make a change to the set of observers through any of the subscription methods outlined below that inheritance is broken. Meaning changes to the parent will no longer apply to that child, and changes to a child never affect a parent. This applies to ALL moments on change of ANY moment, there is no per-moment inheritance concept. const sp = new spfi().using(...lots of behaviors); // web is current inheriting all observers from \"sp\" const web = sp.web; // at this point web no longer inherits from \"sp\" and has its own observers // but still includes everything that was registered in sp before this call web.on.log(...); // web2 inherits from sp as each invocation of .web creates a fresh IWeb instance const web2 = sp.web; // list inherits from web's observers and will contain the extra `log` observer added above const list = web.lists.getById(\"\"); // this new behavior will apply to web2 and any subsequent objects created from sp sp.using(AnotherBehavior()); // web will again inherit from sp through web2, the extra log handler is gone // list now ALSO is reinheriting from sp as it was pointing to web web.using(AssignFrom(web2)); // see below for more information on AssignFrom Obserever Subscriptions \u00b6 All timeline moments are exposed through the on property with three options for subscription. Append \u00b6 This is the default, and adds your observer to the end of the array of subscribed observers. obj.on.log(function(this: Queryable, message: string, level: number) { if (level > 1) { console.log(message); } }); Prepend \u00b6 Using prepend will place your observer as the first item in the array of subscribed observers. There is no gaurantee it will always remain first, other code can also use prepend. obj.on.log.prepend(function(this: Queryable, message: string, level: number) { if (level > 1) { console.log(message); } }); Replace \u00b6 Replace will remove all other subscribed observers from a moment and add the supplied observer as the only one in the array of subscribed observers. obj.on.log.replace(function(this: Queryable, message: string, level: number) { if (level > 1) { console.log(message); } }); ToArray \u00b6 The ToArray method creates a cloned copy of the array of registered observers for a given moment. Note that because it is a clone changes to the returned array do not affect the registered observers. const arr = obj.on.log.toArray(); Clear \u00b6 This clears ALL observers for a given moment, returning true if any observers were removed, and false if no changes were made. const didChange = obj.on.log.clear(); Special Behaviors \u00b6 The core library includes two special behaviors used to help manage observer inheritance. The best case is to manage inheritance using the methods described above, but these provide quick shorthand to help in certain scenarios. These are AssignFrom and CopyFrom .","title":"observers"},{"location":"core/observers/#pnpcore-observers","text":"Observers are used to implement all of the functionality within a Timeline's moments . Each moment defines the signature of observers you can register, and calling the observers is orchestrated by the implementation of the moment. A few facts about observers: All observers are functions The \"this\" of an observer is always the Timeline implementation that emitted the moment Do not handle non-recoverable errors in observers, let them throw and they will be handled by the library appropriately and routed to the error moment. For details on implementing observers for Queryable, please see this article .","title":"@pnp/core : observers"},{"location":"core/observers/#observer-inheritance","text":"Timelines created from other timelines (i.e. how sp and graph libraries work) inherit all of the observers from the parent. Observers added to the parent will apply for all children. When you make a change to the set of observers through any of the subscription methods outlined below that inheritance is broken. Meaning changes to the parent will no longer apply to that child, and changes to a child never affect a parent. This applies to ALL moments on change of ANY moment, there is no per-moment inheritance concept. const sp = new spfi().using(...lots of behaviors); // web is current inheriting all observers from \"sp\" const web = sp.web; // at this point web no longer inherits from \"sp\" and has its own observers // but still includes everything that was registered in sp before this call web.on.log(...); // web2 inherits from sp as each invocation of .web creates a fresh IWeb instance const web2 = sp.web; // list inherits from web's observers and will contain the extra `log` observer added above const list = web.lists.getById(\"\"); // this new behavior will apply to web2 and any subsequent objects created from sp sp.using(AnotherBehavior()); // web will again inherit from sp through web2, the extra log handler is gone // list now ALSO is reinheriting from sp as it was pointing to web web.using(AssignFrom(web2)); // see below for more information on AssignFrom","title":"Observer Inheritance"},{"location":"core/observers/#obserever-subscriptions","text":"All timeline moments are exposed through the on property with three options for subscription.","title":"Obserever Subscriptions"},{"location":"core/observers/#append","text":"This is the default, and adds your observer to the end of the array of subscribed observers. obj.on.log(function(this: Queryable, message: string, level: number) { if (level > 1) { console.log(message); } });","title":"Append"},{"location":"core/observers/#prepend","text":"Using prepend will place your observer as the first item in the array of subscribed observers. There is no gaurantee it will always remain first, other code can also use prepend. obj.on.log.prepend(function(this: Queryable, message: string, level: number) { if (level > 1) { console.log(message); } });","title":"Prepend"},{"location":"core/observers/#replace","text":"Replace will remove all other subscribed observers from a moment and add the supplied observer as the only one in the array of subscribed observers. obj.on.log.replace(function(this: Queryable, message: string, level: number) { if (level > 1) { console.log(message); } });","title":"Replace"},{"location":"core/observers/#toarray","text":"The ToArray method creates a cloned copy of the array of registered observers for a given moment. Note that because it is a clone changes to the returned array do not affect the registered observers. const arr = obj.on.log.toArray();","title":"ToArray"},{"location":"core/observers/#clear","text":"This clears ALL observers for a given moment, returning true if any observers were removed, and false if no changes were made. const didChange = obj.on.log.clear();","title":"Clear"},{"location":"core/observers/#special-behaviors","text":"The core library includes two special behaviors used to help manage observer inheritance. The best case is to manage inheritance using the methods described above, but these provide quick shorthand to help in certain scenarios. These are AssignFrom and CopyFrom .","title":"Special Behaviors"},{"location":"core/storage/","text":"@pnp/core : storage \u00b6 This module provides a thin wrapper over the browser local and session storage. If neither option is available it shims storage with a non-persistent in memory polyfill. Optionally through configuration you can activate expiration. Sample usage is shown below. PnPClientStorage \u00b6 The main export of this module, contains properties representing local and session storage. import { PnPClientStorage } from \"@pnp/core\"; const storage = new PnPClientStorage(); const myvalue = storage.local.get(\"mykey\"); PnPClientStorageWrapper \u00b6 Each of the storage locations (session and local) are wrapped with this helper class. You can use it directly, but generally it would be used from an instance of PnPClientStorage as shown below. These examples all use local storage, the operations are identical for session storage. import { PnPClientStorage } from \"@pnp/core\"; const storage = new PnPClientStorage(); // get a value from storage const value = storage.local.get(\"mykey\"); // put a value into storage storage.local.put(\"mykey2\", \"my value\"); // put a value into storage with an expiration storage.local.put(\"mykey2\", \"my value\", new Date()); // put a simple object into storage // because JSON.stringify is used to package the object we do NOT do a deep rehydration of stored objects storage.local.put(\"mykey3\", { key: \"value\", key2: \"value2\", }); // remove a value from storage storage.local.delete(\"mykey3\"); // get an item or add it if it does not exist // returns a promise in case you need time to get the value for storage // optionally takes a third parameter specifying the expiration storage.local.getOrPut(\"mykey4\", () => { return Promise.resolve(\"value\"); }); // delete expired items storage.local.deleteExpired(); Cache Expiration \u00b6 The ability remove of expired items based on a configured timeout can help if the cache is filling up. This can be accomplished by explicitly calling the deleteExpired method on the cache you wish to clear. A suggested usage is to add this into your page init code as clearing expired items once per page load is likely sufficient. import { PnPClientStorage } from \"@pnp/core\"; const storage = new PnPClientStorage(); // session storage storage.session.deleteExpired(); // local storage storage.local.deleteExpired(); // this returns a promise, so you can perform some activity after the expired items are removed: storage.local.deleteExpired().then(_ => { // init my application }); In previous versions we included code to automatically remove expired items. Due to a lack of necessity we removed that, but you can recreate the concept as shown below: function expirer(timeout = 3000) { // session storage storage.session.deleteExpired(); // local storage storage.local.deleteExpired(); setTimeout(() => expirer(timeout), timeout); }","title":"storage"},{"location":"core/storage/#pnpcore-storage","text":"This module provides a thin wrapper over the browser local and session storage. If neither option is available it shims storage with a non-persistent in memory polyfill. Optionally through configuration you can activate expiration. Sample usage is shown below.","title":"@pnp/core : storage"},{"location":"core/storage/#pnpclientstorage","text":"The main export of this module, contains properties representing local and session storage. import { PnPClientStorage } from \"@pnp/core\"; const storage = new PnPClientStorage(); const myvalue = storage.local.get(\"mykey\");","title":"PnPClientStorage"},{"location":"core/storage/#pnpclientstoragewrapper","text":"Each of the storage locations (session and local) are wrapped with this helper class. You can use it directly, but generally it would be used from an instance of PnPClientStorage as shown below. These examples all use local storage, the operations are identical for session storage. import { PnPClientStorage } from \"@pnp/core\"; const storage = new PnPClientStorage(); // get a value from storage const value = storage.local.get(\"mykey\"); // put a value into storage storage.local.put(\"mykey2\", \"my value\"); // put a value into storage with an expiration storage.local.put(\"mykey2\", \"my value\", new Date()); // put a simple object into storage // because JSON.stringify is used to package the object we do NOT do a deep rehydration of stored objects storage.local.put(\"mykey3\", { key: \"value\", key2: \"value2\", }); // remove a value from storage storage.local.delete(\"mykey3\"); // get an item or add it if it does not exist // returns a promise in case you need time to get the value for storage // optionally takes a third parameter specifying the expiration storage.local.getOrPut(\"mykey4\", () => { return Promise.resolve(\"value\"); }); // delete expired items storage.local.deleteExpired();","title":"PnPClientStorageWrapper"},{"location":"core/storage/#cache-expiration","text":"The ability remove of expired items based on a configured timeout can help if the cache is filling up. This can be accomplished by explicitly calling the deleteExpired method on the cache you wish to clear. A suggested usage is to add this into your page init code as clearing expired items once per page load is likely sufficient. import { PnPClientStorage } from \"@pnp/core\"; const storage = new PnPClientStorage(); // session storage storage.session.deleteExpired(); // local storage storage.local.deleteExpired(); // this returns a promise, so you can perform some activity after the expired items are removed: storage.local.deleteExpired().then(_ => { // init my application }); In previous versions we included code to automatically remove expired items. Due to a lack of necessity we removed that, but you can recreate the concept as shown below: function expirer(timeout = 3000) { // session storage storage.session.deleteExpired(); // local storage storage.local.deleteExpired(); setTimeout(() => expirer(timeout), timeout); }","title":"Cache Expiration"},{"location":"core/timeline/","text":"@pnp/core : timeline \u00b6 Timeline provides base functionality for ochestrating async operations. A timeline defines a set of moments to which observers can be registered. Observers are functions that can act independently or together during a moment in the timeline. The model is event-like but each moment's implementation can be unique in how it interacts with the registered observers. Keep reading under Define Moments to understand more about what a moment is and how to create one. The easiest way to understand Timeline is to walk through implementing a simple one below. You also review Queryable to see how we use Timeline internally to the library. Create a Timeline \u00b6 Implementing a timeline involves several steps, each explained below. Define Moments Implement concrete Timeline class Define Moments \u00b6 A timeline is made up of a set of moments which are themselves defined by a plain object with one or more properties, each of which is a function. You can use predefined moments , or create your own to meet your exact requirements. Below we define two moments within the MyMoments object, first and second. These names are entirely your choice and the order moments are defined in the plain object carries no meaning. The first moment uses a pre-defined moment implementation asyncReduce . This moment allows you to define a state based on the arguments of the observer function, in this case FirstObserver . asyncReduce takes those arguments, does some processing, and returns a promise resolving an array matching the input arguments in order and type with optionally changed values. Those values become the arguments to the next observer registered to that moment. import { asyncReduce, ObserverAction, Timeline } from \"@pnp/core\"; // the first observer is a function taking a number and async returning a number in an array // all asyncReduce observers must follow this pattern of returning async a tuple matching the args export type FirstObserver = (this: any, counter: number) => Promise<[number]>; // the second observer is a function taking a number and returning void export type SecondObserver = (this: any, result: number) => void; // this is a custom moment definition as an example. export function report<T extends ObserverAction>(): (observers: T[], ...args: any[]) => void { return function (observers: T[], ...args: any[]): void { const obs = [...observers]; // for this if (obs.length > 0) { Reflect.apply(obs[0], this, args); } }; } // this plain object defines the moments which will be available in our timeline // the property name \"first\" and \"second\" will be the moment names, used when we make calls such as instance.on.first and instance.on.second const TestingMoments = { first: asyncReduce<FirstObserver>(), second: report<SecondObserver>(), } as const; // note as well the use of as const, this allows TypeScript to properly resolve all the complex typings and not treat the plain object as \"any\" Subclass Timeline \u00b6 After defining our moments we need to subclass Timeline to define how those moments emit through the lifecycle of the Timeline. Timeline has a single abstract method \"execute\" you must implement. You will also need to provide a way for callers to trigger the protected \"start\" method. // our implementation of timeline, note we use `typeof TestingMoments` and ALSO pass the testing moments object to super() in the constructor class TestTimeline extends Timeline<typeof TestingMoments> { // we create two unique refs for our implementation we will use // to resolve the execute promise private InternalResolveEvent = Symbol.for(\"Resolve\"); private InternalRejectEvent = Symbol.for(\"Reject\"); constructor() { // we need to pass the moments to the base Timeline super(TestingMoments); } // we implement the execute the method to define when, in what order, and how our moments are called. This give you full control within the Timeline framework // to determine your implementation's behavior protected async execute(init?: any): Promise<any> { // we can always emit log to any subscribers this.log(\"Starting\", 0); // set our timeline to start in the next tick setTimeout(async () => { try { // we emit our \"first\" event let [value] = await this.emit.first(init); // we emit our \"second\" event [value] = await this.emit.second(value); // we reolve the execute promise with the final value this.emit[this.InternalResolveEvent](value); } catch (e) { // we emit our reject event this.emit[this.InternalRejectEvent](e); // we emit error to any subscribed observers this.error(e); } }, 0); // return a promise which we will resolve/reject during the timeline lifecycle return new Promise((resolve, reject) => { this.on[this.InternalResolveEvent].replace(resolve); this.on[this.InternalRejectEvent].replace(reject); }); } // provide a method to trigger our timeline, this could be protected or called directly by the user, your choice public go(startValue = 0): Promise<number> { // here we take a starting number return this.start(startValue); } } Using your Timeline \u00b6 import { TestTimeline } from \"./file.js\"; const tl = new TestTimeline(); // register observer tl.on.first(async (n) => [++n]); // register observer tl.on.second(async (n) => [++n]); // h === 2 const h = await tl.go(0); // h === 7 const h2 = await tl.go(5); Understanding the Timline Lifecycle \u00b6 Now that you implemented a simple timeline let's take a minute to understand the lifecycle of a timeline execution. There are four moments always defined for every timeline: init, dispose, log, and error. Of these init and dispose are used within the lifecycle, while log and error are used as you need. Timeline Lifecycle \u00b6 .on.init (always) your moments as defined in execute, in our example: .on.first .on.second .on.dispose (always) As well the moments log and error exist on every Timeline derived class and can occur at any point during the lifecycle. Observer Inheritance \u00b6 Let's say that you want to contruct a system whereby you can create Timeline based instances from other Timeline based instances - which is what Queryable does. Imagine we have a class with a pseudo-signature like: class ExampleTimeline extends Timeline<typeof SomeMoments> { // we create two unique refs for our implementation we will use // to resolve the execute promise private InternalResolveEvent = Symbol.for(\"Resolve\"); private InternalRejectEvent = Symbol.for(\"Reject\"); constructor(base: ATimeline) { // we need to pass the moments to the base Timeline super(TestingMoments, base.observers); } //... } We can then use it like: const tl1 = new ExampleTimeline(); tl1.on.first(async (n) => [++n]); tl1.on.second(async (n) => [++n]); // at this point tl2's observer collection is a pointer to the same collection as tl1 const tl2 = new ExampleTimeline(tl1); // we add a second observer to first, it is applied to BOTH tl1 and tl2 tl1.on.first(async (n) => [++n]); // BUT when we modify tl2's observers, either by adding or clearing a moment it begins to track its own collection tl2.on.first(async (n) => [++n]);","title":"Understanding Library Internals"},{"location":"core/timeline/#pnpcore-timeline","text":"Timeline provides base functionality for ochestrating async operations. A timeline defines a set of moments to which observers can be registered. Observers are functions that can act independently or together during a moment in the timeline. The model is event-like but each moment's implementation can be unique in how it interacts with the registered observers. Keep reading under Define Moments to understand more about what a moment is and how to create one. The easiest way to understand Timeline is to walk through implementing a simple one below. You also review Queryable to see how we use Timeline internally to the library.","title":"@pnp/core : timeline"},{"location":"core/timeline/#create-a-timeline","text":"Implementing a timeline involves several steps, each explained below. Define Moments Implement concrete Timeline class","title":"Create a Timeline"},{"location":"core/timeline/#define-moments","text":"A timeline is made up of a set of moments which are themselves defined by a plain object with one or more properties, each of which is a function. You can use predefined moments , or create your own to meet your exact requirements. Below we define two moments within the MyMoments object, first and second. These names are entirely your choice and the order moments are defined in the plain object carries no meaning. The first moment uses a pre-defined moment implementation asyncReduce . This moment allows you to define a state based on the arguments of the observer function, in this case FirstObserver . asyncReduce takes those arguments, does some processing, and returns a promise resolving an array matching the input arguments in order and type with optionally changed values. Those values become the arguments to the next observer registered to that moment. import { asyncReduce, ObserverAction, Timeline } from \"@pnp/core\"; // the first observer is a function taking a number and async returning a number in an array // all asyncReduce observers must follow this pattern of returning async a tuple matching the args export type FirstObserver = (this: any, counter: number) => Promise<[number]>; // the second observer is a function taking a number and returning void export type SecondObserver = (this: any, result: number) => void; // this is a custom moment definition as an example. export function report<T extends ObserverAction>(): (observers: T[], ...args: any[]) => void { return function (observers: T[], ...args: any[]): void { const obs = [...observers]; // for this if (obs.length > 0) { Reflect.apply(obs[0], this, args); } }; } // this plain object defines the moments which will be available in our timeline // the property name \"first\" and \"second\" will be the moment names, used when we make calls such as instance.on.first and instance.on.second const TestingMoments = { first: asyncReduce<FirstObserver>(), second: report<SecondObserver>(), } as const; // note as well the use of as const, this allows TypeScript to properly resolve all the complex typings and not treat the plain object as \"any\"","title":"Define Moments"},{"location":"core/timeline/#subclass-timeline","text":"After defining our moments we need to subclass Timeline to define how those moments emit through the lifecycle of the Timeline. Timeline has a single abstract method \"execute\" you must implement. You will also need to provide a way for callers to trigger the protected \"start\" method. // our implementation of timeline, note we use `typeof TestingMoments` and ALSO pass the testing moments object to super() in the constructor class TestTimeline extends Timeline<typeof TestingMoments> { // we create two unique refs for our implementation we will use // to resolve the execute promise private InternalResolveEvent = Symbol.for(\"Resolve\"); private InternalRejectEvent = Symbol.for(\"Reject\"); constructor() { // we need to pass the moments to the base Timeline super(TestingMoments); } // we implement the execute the method to define when, in what order, and how our moments are called. This give you full control within the Timeline framework // to determine your implementation's behavior protected async execute(init?: any): Promise<any> { // we can always emit log to any subscribers this.log(\"Starting\", 0); // set our timeline to start in the next tick setTimeout(async () => { try { // we emit our \"first\" event let [value] = await this.emit.first(init); // we emit our \"second\" event [value] = await this.emit.second(value); // we reolve the execute promise with the final value this.emit[this.InternalResolveEvent](value); } catch (e) { // we emit our reject event this.emit[this.InternalRejectEvent](e); // we emit error to any subscribed observers this.error(e); } }, 0); // return a promise which we will resolve/reject during the timeline lifecycle return new Promise((resolve, reject) => { this.on[this.InternalResolveEvent].replace(resolve); this.on[this.InternalRejectEvent].replace(reject); }); } // provide a method to trigger our timeline, this could be protected or called directly by the user, your choice public go(startValue = 0): Promise<number> { // here we take a starting number return this.start(startValue); } }","title":"Subclass Timeline"},{"location":"core/timeline/#using-your-timeline","text":"import { TestTimeline } from \"./file.js\"; const tl = new TestTimeline(); // register observer tl.on.first(async (n) => [++n]); // register observer tl.on.second(async (n) => [++n]); // h === 2 const h = await tl.go(0); // h === 7 const h2 = await tl.go(5);","title":"Using your Timeline"},{"location":"core/timeline/#understanding-the-timline-lifecycle","text":"Now that you implemented a simple timeline let's take a minute to understand the lifecycle of a timeline execution. There are four moments always defined for every timeline: init, dispose, log, and error. Of these init and dispose are used within the lifecycle, while log and error are used as you need.","title":"Understanding the Timline Lifecycle"},{"location":"core/timeline/#timeline-lifecycle","text":".on.init (always) your moments as defined in execute, in our example: .on.first .on.second .on.dispose (always) As well the moments log and error exist on every Timeline derived class and can occur at any point during the lifecycle.","title":"Timeline Lifecycle"},{"location":"core/timeline/#observer-inheritance","text":"Let's say that you want to contruct a system whereby you can create Timeline based instances from other Timeline based instances - which is what Queryable does. Imagine we have a class with a pseudo-signature like: class ExampleTimeline extends Timeline<typeof SomeMoments> { // we create two unique refs for our implementation we will use // to resolve the execute promise private InternalResolveEvent = Symbol.for(\"Resolve\"); private InternalRejectEvent = Symbol.for(\"Reject\"); constructor(base: ATimeline) { // we need to pass the moments to the base Timeline super(TestingMoments, base.observers); } //... } We can then use it like: const tl1 = new ExampleTimeline(); tl1.on.first(async (n) => [++n]); tl1.on.second(async (n) => [++n]); // at this point tl2's observer collection is a pointer to the same collection as tl1 const tl2 = new ExampleTimeline(tl1); // we add a second observer to first, it is applied to BOTH tl1 and tl2 tl1.on.first(async (n) => [++n]); // BUT when we modify tl2's observers, either by adding or clearing a moment it begins to track its own collection tl2.on.first(async (n) => [++n]);","title":"Observer Inheritance"},{"location":"core/util/","text":"@pnp/core : util \u00b6 This module contains utility methods that you can import individually from the core library. combine \u00b6 Combines any number of paths, normalizing the slashes as required import { combine } from \"@pnp/core\"; // \"https://microsoft.com/something/more\" const paths = combine(\"https://microsoft.com\", \"something\", \"more\"); // \"also/works/with/relative\" const paths2 = combine(\"/also/\", \"/works\", \"with/\", \"/relative\\\\\"); dateAdd \u00b6 Manipulates a date, please see the Stack Overflow discussion from which this method was taken. import { dateAdd } from \"@pnp/core\"; const now = new Date(); const newData = dateAdd(now, \"minute\", 10); getGUID \u00b6 Creates a random guid, please see the Stack Overflow discussion from which this method was taken. import { getGUID } from \"@pnp/core\"; const newGUID = getGUID(); getRandomString \u00b6 Gets a random string containing the number of characters specified. import { getRandomString } from \"@pnp/core\"; const randomString = getRandomString(10); hOP \u00b6 Shortcut for Object.hasOwnProperty. Determines if an object has a specified property. import { HttpRequestError } from \"@pnp/queryable\"; import { hOP } from \"@pnp/core\"; export async function handleError(e: Error | HttpRequestError): Promise<void> { //Checks to see if the error object has a property called isHttpRequestError. Returns a bool. if (hOP(e, \"isHttpRequestError\")) { // Handle this type or error } else { // not an HttpRequestError so we do something else } } jsS \u00b6 Shorthand for JSON.stringify import { jsS } from \"@pnp/core\"; const s: string = jsS({ hello: \"world\" }); isArray \u00b6 Determines if a supplied variable represents an array. import { isArray } from \"@pnp/core\"; const x = [1, 2, 3]; if (isArray(x)){ console.log(\"I am an array\"); } else { console.log(\"I am not an array\"); } isFunc \u00b6 Determines if a supplied variable represents a function. import { isFunc } from \"@pnp/core\"; public testFunction() { console.log(\"test function\"); return } if (isFunc(testFunction)){ console.log(\"this is a function\"); testFunction(); } isUrlAbsolute \u00b6 Determines if a supplied url is absolute, returning true; otherwise returns false. import { isUrlAbsolute } from \"@pnp/core\"; const webPath = 'https://{tenant}.sharepoint.com/sites/dev/'; if (isUrlAbsolute(webPath)){ console.log(\"URL is absolute\"); }else{ console.log(\"URL is not absolute\"); } objectDefinedNotNull \u00b6 Determines if an object is defined and not null. import { objectDefinedNotNull } from \"@pnp/core\"; const obj = { prop: 1 }; if (objectDefinedNotNull(obj)){ console.log(\"Not null\"); } else { console.log(\"Null\"); } stringIsNullOrEmpty \u00b6 Determines if a supplied string is null or empty. import { stringIsNullOrEmpty } from \"@pnp/core\"; const x: string = \"hello\"; if (stringIsNullOrEmpty(x)){ console.log(\"Null or empty\"); } else { console.log(\"Not null or empty\"); } getHashCode \u00b6 Gets a (mostly) unique hashcode for a specified string. Taken from: https://stackoverflow.com/questions/6122571/simple-non-secure-hash-function-for-javascript import { getHashCode } from \"@pnp/core\"; const x: string = \"hello\"; const hash = getHashCode(x); delay \u00b6 Provides an awaitable delay specified in milliseconds. import { delay } from \"@pnp/core\"; // wait 1 second await delay(1000); // wait 10 second await delay(10000);","title":"util"},{"location":"core/util/#pnpcore-util","text":"This module contains utility methods that you can import individually from the core library.","title":"@pnp/core : util"},{"location":"core/util/#combine","text":"Combines any number of paths, normalizing the slashes as required import { combine } from \"@pnp/core\"; // \"https://microsoft.com/something/more\" const paths = combine(\"https://microsoft.com\", \"something\", \"more\"); // \"also/works/with/relative\" const paths2 = combine(\"/also/\", \"/works\", \"with/\", \"/relative\\\\\");","title":"combine"},{"location":"core/util/#dateadd","text":"Manipulates a date, please see the Stack Overflow discussion from which this method was taken. import { dateAdd } from \"@pnp/core\"; const now = new Date(); const newData = dateAdd(now, \"minute\", 10);","title":"dateAdd"},{"location":"core/util/#getguid","text":"Creates a random guid, please see the Stack Overflow discussion from which this method was taken. import { getGUID } from \"@pnp/core\"; const newGUID = getGUID();","title":"getGUID"},{"location":"core/util/#getrandomstring","text":"Gets a random string containing the number of characters specified. import { getRandomString } from \"@pnp/core\"; const randomString = getRandomString(10);","title":"getRandomString"},{"location":"core/util/#hop","text":"Shortcut for Object.hasOwnProperty. Determines if an object has a specified property. import { HttpRequestError } from \"@pnp/queryable\"; import { hOP } from \"@pnp/core\"; export async function handleError(e: Error | HttpRequestError): Promise<void> { //Checks to see if the error object has a property called isHttpRequestError. Returns a bool. if (hOP(e, \"isHttpRequestError\")) { // Handle this type or error } else { // not an HttpRequestError so we do something else } }","title":"hOP"},{"location":"core/util/#jss","text":"Shorthand for JSON.stringify import { jsS } from \"@pnp/core\"; const s: string = jsS({ hello: \"world\" });","title":"jsS"},{"location":"core/util/#isarray","text":"Determines if a supplied variable represents an array. import { isArray } from \"@pnp/core\"; const x = [1, 2, 3]; if (isArray(x)){ console.log(\"I am an array\"); } else { console.log(\"I am not an array\"); }","title":"isArray"},{"location":"core/util/#isfunc","text":"Determines if a supplied variable represents a function. import { isFunc } from \"@pnp/core\"; public testFunction() { console.log(\"test function\"); return } if (isFunc(testFunction)){ console.log(\"this is a function\"); testFunction(); }","title":"isFunc"},{"location":"core/util/#isurlabsolute","text":"Determines if a supplied url is absolute, returning true; otherwise returns false. import { isUrlAbsolute } from \"@pnp/core\"; const webPath = 'https://{tenant}.sharepoint.com/sites/dev/'; if (isUrlAbsolute(webPath)){ console.log(\"URL is absolute\"); }else{ console.log(\"URL is not absolute\"); }","title":"isUrlAbsolute"},{"location":"core/util/#objectdefinednotnull","text":"Determines if an object is defined and not null. import { objectDefinedNotNull } from \"@pnp/core\"; const obj = { prop: 1 }; if (objectDefinedNotNull(obj)){ console.log(\"Not null\"); } else { console.log(\"Null\"); }","title":"objectDefinedNotNull"},{"location":"core/util/#stringisnullorempty","text":"Determines if a supplied string is null or empty. import { stringIsNullOrEmpty } from \"@pnp/core\"; const x: string = \"hello\"; if (stringIsNullOrEmpty(x)){ console.log(\"Null or empty\"); } else { console.log(\"Not null or empty\"); }","title":"stringIsNullOrEmpty"},{"location":"core/util/#gethashcode","text":"Gets a (mostly) unique hashcode for a specified string. Taken from: https://stackoverflow.com/questions/6122571/simple-non-secure-hash-function-for-javascript import { getHashCode } from \"@pnp/core\"; const x: string = \"hello\"; const hash = getHashCode(x);","title":"getHashCode"},{"location":"core/util/#delay","text":"Provides an awaitable delay specified in milliseconds. import { delay } from \"@pnp/core\"; // wait 1 second await delay(1000); // wait 10 second await delay(10000);","title":"delay"},{"location":"graph/behaviors/","text":"@pnp/graph : behaviors \u00b6 The article describes the behaviors exported by the @pnp/graph library. Please also see available behaviors in @pnp/core , @pnp/queryable , @pnp/sp , and @pnp/nodejs . DefaultInit \u00b6 The DefaultInit behavior, itself a composed behavior includes Telemetry, RejectOnError, and ResolveOnData. Additionally, it sets the cache and credentials properties of the RequestInit and ensures the request url is absolute. import { graphfi, DefaultInit } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi().using(DefaultInit()); await graph.users(); DefaultHeaders \u00b6 The DefaultHeaders behavior uses InjectHeaders to set the Content-Type header. import { graphfi, DefaultHeaders } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi().using(DefaultHeaders()); await graph.users(); DefaultInit and DefaultHeaders are separated to make it easier to create your own default headers or init behavior. You should include both if composing your own default behavior. Endpoint \u00b6 This behavior is used to change the endpoint to which requests are made, either \"beta\" or \"v1.0\". This allows you to easily switch back and forth between the endpoints as needed. import { graphfi, Endpoint } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const beta = graphfi().using(Endpoint(\"beta\")); const vOne = graphfi().using(Endpoint(\"v1.0\")); await beta.users(); await vOne.users(); It can also be used at any point in the fluid chain to switch an isolated request to a different endpoint. import { graphfi, Endpoint } from \"@pnp/graph\"; import \"@pnp/graph/users\"; // will point to v1 by default const graph = graphfi().using(); const user = graph.users.getById(\"{id}\"); // this only applies to the \"user\" instance now const userInfoFromBeta = user.using(Endpoint(\"beta\"))(); Finally, if you always want to make your requests to the beta end point (as an example) it is more efficient to set it in the graphfi factory. import { graphfi } from \"@pnp/graph\"; const beta = graphfi(\"https://graph.microsoft.com/beta\"); GraphBrowser \u00b6 A composed behavior suitable for use within a SPA or other scenario outside of SPFx. It includes DefaultHeaders, DefaultInit, BrowserFetchWithRetry, and DefaultParse. As well it adds a pre observer to try and ensure the request url is absolute if one is supplied in props. The baseUrl prop can be used to configure the graph endpoint to which requests will be sent. If you are building a SPA you likely need to handle authentication. For this we support the msal library which you can use directly or as a pattern to roll your own MSAL implementation behavior. import { graphfi, GraphBrowser } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi().using(GraphBrowser()); await graph.users(); You can also set a baseUrl. This is equivelent to calling graphfi with an absolute url. import { graphfi, GraphBrowser } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi().using(GraphBrowser({ baseUrl: \"https://graph.microsoft.com/v1.0\" })); // this is the same as the above, and maybe a litter easier to read, and is more efficient // const graph = graphfi(\"https://graph.microsoft.com/v1.0\").using(GraphBrowser()); await graph.users(); SPFx \u00b6 This behavior is designed to work closely with SPFx. The only parameter is the current SPFx Context. SPFx is a composed behavior including DefaultHeaders, DefaultInit, BrowserFetchWithRetry, and DefaultParse. It also replaces any authentication present with a method to get a token from the SPFx aadTokenProviderFactory. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; // this.context represents the context object within an SPFx webpart, application customizer, or ACE. const graph = graphfi(...); await graph.users(); Note that both the sp and graph libraries export an SPFx behavior. They are unique to their respective libraries and cannot be shared, i.e. you can't use the graph SPFx to setup sp and vice-versa. import { GraphFI, graphfi, SPFx as graphSPFx } from '@pnp/graph' import { SPFI, spfi, SPFx as spSPFx } from '@pnp/sp' const sp = spfi().using(spSPFx(this.context)); const graph = graphfi().using(graphSPFx(this.context)); If you want to use a different form of authentication you can apply that behavior after SPFx to override it. In this case we are using the client MSAL authentication . import { graphfi } from \"@pnp/graph\"; import { MSAL } from \"@pnp/msaljsclient\"; import \"@pnp/graph/users\"; // this.context represents the context object within an SPFx webpart, application customizer, or ACE. const graph = graphfi().using(SPFx(this.context), MSAL({ /* proper MSAL settings */})); await graph.users(); Telemetry \u00b6 This behavior helps provide usage statistics to us about the number of requests made to the service using this library, as well as the methods being called. We do not, and cannot, access any PII information or tie requests to specific users. The data aggregates at the tenant level. We use this information to better understand how the library is being used and look for opportunities to improve high-use code paths. You can always opt out of the telemetry by creating your own default behaviors and leaving it out. However, we encourgage you to include it as it helps us understand usage and impact of the work. import { graphfi, Telemetry } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi().using(Telemetry()); await graph.users();","title":"Behaviors"},{"location":"graph/behaviors/#pnpgraph-behaviors","text":"The article describes the behaviors exported by the @pnp/graph library. Please also see available behaviors in @pnp/core , @pnp/queryable , @pnp/sp , and @pnp/nodejs .","title":"@pnp/graph : behaviors"},{"location":"graph/behaviors/#defaultinit","text":"The DefaultInit behavior, itself a composed behavior includes Telemetry, RejectOnError, and ResolveOnData. Additionally, it sets the cache and credentials properties of the RequestInit and ensures the request url is absolute. import { graphfi, DefaultInit } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi().using(DefaultInit()); await graph.users();","title":"DefaultInit"},{"location":"graph/behaviors/#defaultheaders","text":"The DefaultHeaders behavior uses InjectHeaders to set the Content-Type header. import { graphfi, DefaultHeaders } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi().using(DefaultHeaders()); await graph.users(); DefaultInit and DefaultHeaders are separated to make it easier to create your own default headers or init behavior. You should include both if composing your own default behavior.","title":"DefaultHeaders"},{"location":"graph/behaviors/#endpoint","text":"This behavior is used to change the endpoint to which requests are made, either \"beta\" or \"v1.0\". This allows you to easily switch back and forth between the endpoints as needed. import { graphfi, Endpoint } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const beta = graphfi().using(Endpoint(\"beta\")); const vOne = graphfi().using(Endpoint(\"v1.0\")); await beta.users(); await vOne.users(); It can also be used at any point in the fluid chain to switch an isolated request to a different endpoint. import { graphfi, Endpoint } from \"@pnp/graph\"; import \"@pnp/graph/users\"; // will point to v1 by default const graph = graphfi().using(); const user = graph.users.getById(\"{id}\"); // this only applies to the \"user\" instance now const userInfoFromBeta = user.using(Endpoint(\"beta\"))(); Finally, if you always want to make your requests to the beta end point (as an example) it is more efficient to set it in the graphfi factory. import { graphfi } from \"@pnp/graph\"; const beta = graphfi(\"https://graph.microsoft.com/beta\");","title":"Endpoint"},{"location":"graph/behaviors/#graphbrowser","text":"A composed behavior suitable for use within a SPA or other scenario outside of SPFx. It includes DefaultHeaders, DefaultInit, BrowserFetchWithRetry, and DefaultParse. As well it adds a pre observer to try and ensure the request url is absolute if one is supplied in props. The baseUrl prop can be used to configure the graph endpoint to which requests will be sent. If you are building a SPA you likely need to handle authentication. For this we support the msal library which you can use directly or as a pattern to roll your own MSAL implementation behavior. import { graphfi, GraphBrowser } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi().using(GraphBrowser()); await graph.users(); You can also set a baseUrl. This is equivelent to calling graphfi with an absolute url. import { graphfi, GraphBrowser } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi().using(GraphBrowser({ baseUrl: \"https://graph.microsoft.com/v1.0\" })); // this is the same as the above, and maybe a litter easier to read, and is more efficient // const graph = graphfi(\"https://graph.microsoft.com/v1.0\").using(GraphBrowser()); await graph.users();","title":"GraphBrowser"},{"location":"graph/behaviors/#spfx","text":"This behavior is designed to work closely with SPFx. The only parameter is the current SPFx Context. SPFx is a composed behavior including DefaultHeaders, DefaultInit, BrowserFetchWithRetry, and DefaultParse. It also replaces any authentication present with a method to get a token from the SPFx aadTokenProviderFactory. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; // this.context represents the context object within an SPFx webpart, application customizer, or ACE. const graph = graphfi(...); await graph.users(); Note that both the sp and graph libraries export an SPFx behavior. They are unique to their respective libraries and cannot be shared, i.e. you can't use the graph SPFx to setup sp and vice-versa. import { GraphFI, graphfi, SPFx as graphSPFx } from '@pnp/graph' import { SPFI, spfi, SPFx as spSPFx } from '@pnp/sp' const sp = spfi().using(spSPFx(this.context)); const graph = graphfi().using(graphSPFx(this.context)); If you want to use a different form of authentication you can apply that behavior after SPFx to override it. In this case we are using the client MSAL authentication . import { graphfi } from \"@pnp/graph\"; import { MSAL } from \"@pnp/msaljsclient\"; import \"@pnp/graph/users\"; // this.context represents the context object within an SPFx webpart, application customizer, or ACE. const graph = graphfi().using(SPFx(this.context), MSAL({ /* proper MSAL settings */})); await graph.users();","title":"SPFx"},{"location":"graph/behaviors/#telemetry","text":"This behavior helps provide usage statistics to us about the number of requests made to the service using this library, as well as the methods being called. We do not, and cannot, access any PII information or tie requests to specific users. The data aggregates at the tenant level. We use this information to better understand how the library is being used and look for opportunities to improve high-use code paths. You can always opt out of the telemetry by creating your own default behaviors and leaving it out. However, we encourgage you to include it as it helps us understand usage and impact of the work. import { graphfi, Telemetry } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi().using(Telemetry()); await graph.users();","title":"Telemetry"},{"location":"graph/calendars/","text":"@pnp/graph/calendars \u00b6 More information can be found in the official Graph documentation: Calendar Resource Type Event Resource Type ICalendar, ICalendars \u00b6 Get All Calendars For a User \u00b6 import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const calendars = await graph.users.getById('user@tenant.onmicrosoft.com').calendars(); const myCalendars = await graph.me.calendars(); Get a Specific Calendar For a User \u00b6 import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const CALENDAR_ID = 'AQMkAGZjNmY0MDN3LRI3YTYtNDQAFWQtOWNhZC04MmY3MGYxODkeOWUARgAAA-xUBMMopY1NkrWA0qGcXHsHAG4I-wMXjoRMkgRnRetM5oIAAAIBBgAAAG4I-wMXjoRMkgRnRetM5oIAAAIsYgAAAA=='; const calendar = await graph.users.getById('user@tenant.onmicrosoft.com').calendars.getById(CALENDAR_ID)(); const myCalendar = await graph.me.calendars.getById(CALENDAR_ID)(); Get a User's Default Calendar \u00b6 import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const calendar = await graph.users.getById('user@tenant.onmicrosoft.com').calendar(); const myCalendar = await graph.me.calendar(); Get Events For a User's Default Calendar \u00b6 import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); // You can get the default calendar events const events = await graph.users.getById('user@tenant.onmicrosoft.com').calendar.events(); // or get all events for the user const events = await graph.users.getById('user@tenant.onmicrosoft.com').events(); // You can get my default calendar events const events = await graph.me.calendar.events(); // or get all events for me const events = await graph.me.events(); Get Events By ID \u00b6 You can use .events.getByID to search through all the events in all calendars or narrow the request to a specific calendar. import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const CalendarID = 'AQMkAGZjNmY0MDN3LRI3YTYtNDQAFWQtOWNhZC04MmY3MGYxODkeOWUARgAAA=='; const EventID = 'AQMkAGZjNmY0MDN3LRI3YTYtNDQAFWQtOWNhZC04MmY3MGYxODkeOWUARgAAA-xUBMMopY1NkrWA0qGcXHsHAG4I-wMXjoRMkgRnRetM5oIAAAIBBgAAAG4I-wMXjoRMkgRnRetM5oIAAAIsYgAAAA=='; // Get events by ID const event = await graph.users.getById('user@tenant.onmicrosoft.com').events.getByID(EventID); const events = await graph.me.events.getByID(EventID); // Get an event by ID from a specific calendar const event = await graph.users.getById('user@tenant.onmicrosoft.com').calendars.getByID(CalendarID).events.getByID(EventID); const events = await graph.me.calendars.getByID(CalendarID).events.getByID(EventID); Create Events \u00b6 This will work on any IEvents objects (e.g. anything accessed using an events key). import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); await graph.users.getById('user@tenant.onmicrosoft.com').calendar.events.add( { \"subject\": \"Let's go for lunch\", \"body\": { \"contentType\": \"HTML\", \"content\": \"Does late morning work for you?\" }, \"start\": { \"dateTime\": \"2017-04-15T12:00:00\", \"timeZone\": \"Pacific Standard Time\" }, \"end\": { \"dateTime\": \"2017-04-15T14:00:00\", \"timeZone\": \"Pacific Standard Time\" }, \"location\":{ \"displayName\":\"Harry's Bar\" }, \"attendees\": [ { \"emailAddress\": { \"address\":\"samanthab@contoso.onmicrosoft.com\", \"name\": \"Samantha Booth\" }, \"type\": \"required\" } ] }); Update Events \u00b6 This will work on any IEvents objects (e.g. anything accessed using an events key). import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const EVENT_ID = 'BBMkAGZjNmY6MDM3LWI3YTYtNERhZC05Y2FkLTgyZjcwZjE4OTI5ZQBGAAAAAAD8VQTDKKWNTY61gNKhnFzLBwBuCP8DF46ETJIEZ0XrTOaCAAAAAAENAABuCP8DF46ETJFEZ0EnTOaCAAFvdoJvAAA='; await graph.users.getById('user@tenant.onmicrosoft.com').calendar.events.getById(EVENT_ID).update({ reminderMinutesBeforeStart: 99, }); Delete Event \u00b6 This will work on any IEvents objects (e.g. anything accessed using an events key). import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const EVENT_ID = 'BBMkAGZjNmY6MDM3LWI3YTYtNERhZC05Y2FkLTgyZjcwZjE4OTI5ZQBGAAAAAAD8VQTDKKWNTY61gNKhnFzLBwBuCP8DF46ETJIEZ0XrTOaCAAAAAAENAABuCP8DF46ETJFEZ0EnTOaCAAFvdoJvAAA='; await graph.users.getById('user@tenant.onmicrosoft.com').events.getById(EVENT_ID).delete(); await graph.me.events.getById(EVENT_ID).delete(); Get Calendar for a Group \u00b6 import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/groups'; const graph = graph.using(SPFx(this.context)); const calendar = await graph.groups.getById('21aaf779-f6d8-40bd-88c2-4a03f456ee82').calendar(); Get Events for a Group \u00b6 import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/groups'; const graph = graphfi(...); // You can do one of const events = await graph.groups.getById('21aaf779-f6d8-40bd-88c2-4a03f456ee82').calendar.events(); // or const events = await graph.groups.getById('21aaf779-f6d8-40bd-88c2-4a03f456ee82').events(); Get Calendar View \u00b6 Gets the events in a calendar during a specified date range. import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); // basic request, note need to invoke the returned queryable const view = await graph.users.getById('user@tenant.onmicrosoft.com').calendarView(\"2020-01-01\", \"2020-03-01\")(); // you can use select, top, etc to filter your returned results const view2 = await graph.users.getById('user@tenant.onmicrosoft.com').calendarView(\"2020-01-01\", \"2020-03-01\").select(\"subject\").top(3)(); // you can specify times along with the dates const view3 = await graph.users.getById('user@tenant.onmicrosoft.com').calendarView(\"2020-01-01T19:00:00-08:00\", \"2020-03-01T19:00:00-08:00\")(); const view4 = await graph.me.calendarView(\"2020-01-01\", \"2020-03-01\")(); Find Rooms \u00b6 Gets the emailAddress objects that represent all the meeting rooms in the user's tenant or in a specific room list. import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); // basic request, note need to invoke the returned queryable const rooms1 = await graph.users.getById('user@tenant.onmicrosoft.com').findRooms()(); // you can pass a room list to filter results const rooms2 = await graph.users.getById('user@tenant.onmicrosoft.com').findRooms('roomlist@tenant.onmicrosoft.com')(); // you can use select, top, etc to filter your returned results const rooms3 = await graph.users.getById('user@tenant.onmicrosoft.com').findRooms().select('name').top(10)(); Get Event Instances \u00b6 Get the instances (occurrences) of an event for a specified time range. If the event is a seriesMaster type, this returns the occurrences and exceptions of the event in the specified time range. import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const event = graph.me.events.getById(''); // basic request, note need to invoke the returned queryable const instances = await event.instances(\"2020-01-01\", \"2020-03-01\")(); // you can use select, top, etc to filter your returned results const instances2 = await event.instances(\"2020-01-01\", \"2020-03-01\").select(\"subject\").top(3)(); // you can specify times along with the dates const instance3 = await event.instances(\"2020-01-01T19:00:00-08:00\", \"2020-03-01T19:00:00-08:00\")();","title":"calendars"},{"location":"graph/calendars/#pnpgraphcalendars","text":"More information can be found in the official Graph documentation: Calendar Resource Type Event Resource Type","title":"@pnp/graph/calendars"},{"location":"graph/calendars/#icalendar-icalendars","text":"","title":"ICalendar, ICalendars"},{"location":"graph/calendars/#get-all-calendars-for-a-user","text":"import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const calendars = await graph.users.getById('user@tenant.onmicrosoft.com').calendars(); const myCalendars = await graph.me.calendars();","title":"Get All Calendars For a User"},{"location":"graph/calendars/#get-a-specific-calendar-for-a-user","text":"import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const CALENDAR_ID = 'AQMkAGZjNmY0MDN3LRI3YTYtNDQAFWQtOWNhZC04MmY3MGYxODkeOWUARgAAA-xUBMMopY1NkrWA0qGcXHsHAG4I-wMXjoRMkgRnRetM5oIAAAIBBgAAAG4I-wMXjoRMkgRnRetM5oIAAAIsYgAAAA=='; const calendar = await graph.users.getById('user@tenant.onmicrosoft.com').calendars.getById(CALENDAR_ID)(); const myCalendar = await graph.me.calendars.getById(CALENDAR_ID)();","title":"Get a Specific Calendar For a User"},{"location":"graph/calendars/#get-a-users-default-calendar","text":"import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const calendar = await graph.users.getById('user@tenant.onmicrosoft.com').calendar(); const myCalendar = await graph.me.calendar();","title":"Get a User's Default Calendar"},{"location":"graph/calendars/#get-events-for-a-users-default-calendar","text":"import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); // You can get the default calendar events const events = await graph.users.getById('user@tenant.onmicrosoft.com').calendar.events(); // or get all events for the user const events = await graph.users.getById('user@tenant.onmicrosoft.com').events(); // You can get my default calendar events const events = await graph.me.calendar.events(); // or get all events for me const events = await graph.me.events();","title":"Get Events For a User's Default Calendar"},{"location":"graph/calendars/#get-events-by-id","text":"You can use .events.getByID to search through all the events in all calendars or narrow the request to a specific calendar. import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const CalendarID = 'AQMkAGZjNmY0MDN3LRI3YTYtNDQAFWQtOWNhZC04MmY3MGYxODkeOWUARgAAA=='; const EventID = 'AQMkAGZjNmY0MDN3LRI3YTYtNDQAFWQtOWNhZC04MmY3MGYxODkeOWUARgAAA-xUBMMopY1NkrWA0qGcXHsHAG4I-wMXjoRMkgRnRetM5oIAAAIBBgAAAG4I-wMXjoRMkgRnRetM5oIAAAIsYgAAAA=='; // Get events by ID const event = await graph.users.getById('user@tenant.onmicrosoft.com').events.getByID(EventID); const events = await graph.me.events.getByID(EventID); // Get an event by ID from a specific calendar const event = await graph.users.getById('user@tenant.onmicrosoft.com').calendars.getByID(CalendarID).events.getByID(EventID); const events = await graph.me.calendars.getByID(CalendarID).events.getByID(EventID);","title":"Get Events By ID"},{"location":"graph/calendars/#create-events","text":"This will work on any IEvents objects (e.g. anything accessed using an events key). import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); await graph.users.getById('user@tenant.onmicrosoft.com').calendar.events.add( { \"subject\": \"Let's go for lunch\", \"body\": { \"contentType\": \"HTML\", \"content\": \"Does late morning work for you?\" }, \"start\": { \"dateTime\": \"2017-04-15T12:00:00\", \"timeZone\": \"Pacific Standard Time\" }, \"end\": { \"dateTime\": \"2017-04-15T14:00:00\", \"timeZone\": \"Pacific Standard Time\" }, \"location\":{ \"displayName\":\"Harry's Bar\" }, \"attendees\": [ { \"emailAddress\": { \"address\":\"samanthab@contoso.onmicrosoft.com\", \"name\": \"Samantha Booth\" }, \"type\": \"required\" } ] });","title":"Create Events"},{"location":"graph/calendars/#update-events","text":"This will work on any IEvents objects (e.g. anything accessed using an events key). import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const EVENT_ID = 'BBMkAGZjNmY6MDM3LWI3YTYtNERhZC05Y2FkLTgyZjcwZjE4OTI5ZQBGAAAAAAD8VQTDKKWNTY61gNKhnFzLBwBuCP8DF46ETJIEZ0XrTOaCAAAAAAENAABuCP8DF46ETJFEZ0EnTOaCAAFvdoJvAAA='; await graph.users.getById('user@tenant.onmicrosoft.com').calendar.events.getById(EVENT_ID).update({ reminderMinutesBeforeStart: 99, });","title":"Update Events"},{"location":"graph/calendars/#delete-event","text":"This will work on any IEvents objects (e.g. anything accessed using an events key). import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const EVENT_ID = 'BBMkAGZjNmY6MDM3LWI3YTYtNERhZC05Y2FkLTgyZjcwZjE4OTI5ZQBGAAAAAAD8VQTDKKWNTY61gNKhnFzLBwBuCP8DF46ETJIEZ0XrTOaCAAAAAAENAABuCP8DF46ETJFEZ0EnTOaCAAFvdoJvAAA='; await graph.users.getById('user@tenant.onmicrosoft.com').events.getById(EVENT_ID).delete(); await graph.me.events.getById(EVENT_ID).delete();","title":"Delete Event"},{"location":"graph/calendars/#get-calendar-for-a-group","text":"import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/groups'; const graph = graph.using(SPFx(this.context)); const calendar = await graph.groups.getById('21aaf779-f6d8-40bd-88c2-4a03f456ee82').calendar();","title":"Get Calendar for a Group"},{"location":"graph/calendars/#get-events-for-a-group","text":"import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/groups'; const graph = graphfi(...); // You can do one of const events = await graph.groups.getById('21aaf779-f6d8-40bd-88c2-4a03f456ee82').calendar.events(); // or const events = await graph.groups.getById('21aaf779-f6d8-40bd-88c2-4a03f456ee82').events();","title":"Get Events for a Group"},{"location":"graph/calendars/#get-calendar-view","text":"Gets the events in a calendar during a specified date range. import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); // basic request, note need to invoke the returned queryable const view = await graph.users.getById('user@tenant.onmicrosoft.com').calendarView(\"2020-01-01\", \"2020-03-01\")(); // you can use select, top, etc to filter your returned results const view2 = await graph.users.getById('user@tenant.onmicrosoft.com').calendarView(\"2020-01-01\", \"2020-03-01\").select(\"subject\").top(3)(); // you can specify times along with the dates const view3 = await graph.users.getById('user@tenant.onmicrosoft.com').calendarView(\"2020-01-01T19:00:00-08:00\", \"2020-03-01T19:00:00-08:00\")(); const view4 = await graph.me.calendarView(\"2020-01-01\", \"2020-03-01\")();","title":"Get Calendar View"},{"location":"graph/calendars/#find-rooms","text":"Gets the emailAddress objects that represent all the meeting rooms in the user's tenant or in a specific room list. import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); // basic request, note need to invoke the returned queryable const rooms1 = await graph.users.getById('user@tenant.onmicrosoft.com').findRooms()(); // you can pass a room list to filter results const rooms2 = await graph.users.getById('user@tenant.onmicrosoft.com').findRooms('roomlist@tenant.onmicrosoft.com')(); // you can use select, top, etc to filter your returned results const rooms3 = await graph.users.getById('user@tenant.onmicrosoft.com').findRooms().select('name').top(10)();","title":"Find Rooms"},{"location":"graph/calendars/#get-event-instances","text":"Get the instances (occurrences) of an event for a specified time range. If the event is a seriesMaster type, this returns the occurrences and exceptions of the event in the specified time range. import { graphfi } from \"@pnp/graph\"; import '@pnp/graph/calendars'; import '@pnp/graph/users'; const graph = graphfi(...); const event = graph.me.events.getById(''); // basic request, note need to invoke the returned queryable const instances = await event.instances(\"2020-01-01\", \"2020-03-01\")(); // you can use select, top, etc to filter your returned results const instances2 = await event.instances(\"2020-01-01\", \"2020-03-01\").select(\"subject\").top(3)(); // you can specify times along with the dates const instance3 = await event.instances(\"2020-01-01T19:00:00-08:00\", \"2020-03-01T19:00:00-08:00\")();","title":"Get Event Instances"},{"location":"graph/cloud-communications/","text":"@pnp/graph/cloud-communications \u00b6 The ability to retrieve information about a user's presence, including their availability and user activity. More information can be found in the official Graph documentation: Presence Type IPresence \u00b6 Get users presence \u00b6 Gets a list of all the contacts for the user. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/cloud-communications\"; const graph = graphfi(...); const presenceMe = await graph.me.presence(); const presenceThem = await graph.users.getById(\"99999999-9999-9999-9999-999999999999\").presence(); Get presence for multiple users \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/cloud-communications\"; const graph = graphfi(...); const presenceList = await graph.communications.getPresencesByUserId([\"99999999-9999-9999-9999-999999999999\"]);","title":"cloud communications"},{"location":"graph/cloud-communications/#pnpgraphcloud-communications","text":"The ability to retrieve information about a user's presence, including their availability and user activity. More information can be found in the official Graph documentation: Presence Type","title":"@pnp/graph/cloud-communications"},{"location":"graph/cloud-communications/#ipresence","text":"","title":"IPresence"},{"location":"graph/cloud-communications/#get-users-presence","text":"Gets a list of all the contacts for the user. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/cloud-communications\"; const graph = graphfi(...); const presenceMe = await graph.me.presence(); const presenceThem = await graph.users.getById(\"99999999-9999-9999-9999-999999999999\").presence();","title":"Get users presence"},{"location":"graph/cloud-communications/#get-presence-for-multiple-users","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/cloud-communications\"; const graph = graphfi(...); const presenceList = await graph.communications.getPresencesByUserId([\"99999999-9999-9999-9999-999999999999\"]);","title":"Get presence for multiple users"},{"location":"graph/contacts/","text":"@pnp/graph/contacts \u00b6 The ability to manage contacts and folders in Outlook is a capability introduced in version 1.2.2 of @pnp/graphfi(). Through the methods described you can add and edit both contacts and folders in a users Outlook. More information can be found in the official Graph documentation: Contact Resource Type IContact, IContacts, IContactFolder, IContactFolders \u00b6 Set up notes \u00b6 To make user calls you can use getById where the id is the users email address. Contact ID, Folder ID, and Parent Folder ID use the following format \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwBGAAAAAAC75QV12PBiRIjb8MNVIrJrBwBgs0NT6NreR57m1u_D8SpPAAAAAAEOAABgs0NT6NreR57m1u_D8SpPAAFCCnApAAA=\" Get all of the Contacts \u00b6 Gets a list of all the contacts for the user. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\" import \"@pnp/graph/contacts\" const graph = graphfi(...); const contacts = await graph.users.getById('user@tenant.onmicrosoft.com').contacts(); const contacts2 = await graph.me.contacts(); Get Contact by Id \u00b6 Gets a specific contact by ID for the user. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const contactID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwBGAAAAAAC75QV12PBiRIjb8MNVIrJrBwBgs0NT6NreR57m1u_D8SpPAAAAAAEOAABgs0NT6NreR57m1u_D8SpPAAFCCnApAAA=\"; const contact = await graph.users.getById('user@tenant.onmicrosoft.com').contacts.getById(contactID)(); const contact2 = await graph.me.contacts.getById(contactID)(); Add a new Contact \u00b6 Adds a new contact for the user. import { graphfi } from \"@pnp/graph\"; import { EmailAddress } from \"@microsoft/microsoft-graph-types\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const addedContact = await graph.users.getById('user@tenant.onmicrosoft.com').contacts.add('Pavel', 'Bansky', [<EmailAddress>{address: 'pavelb@fabrikam.onmicrosoft.com', name: 'Pavel Bansky' }], ['+1 732 555 0102']); const addedContact2 = await graph.me.contacts.add('Pavel', 'Bansky', [<EmailAddress>{address: 'pavelb@fabrikam.onmicrosoft.com', name: 'Pavel Bansky' }], ['+1 732 555 0102']); Update a Contact \u00b6 Updates a specific contact by ID for teh designated user import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const contactID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwBGAAAAAAC75QV12PBiRIjb8MNVIrJrBwBgs0NT6NreR57m1u_D8SpPAAAAAAEOAABgs0NT6NreR57m1u_D8SpPAAFCCnApAAA=\"; const updContact = await graph.users.getById('user@tenant.onmicrosoft.com').contacts.getById(contactID).update({birthday: \"1986-05-30\" }); const updContact2 = await graph.me.contacts.getById(contactID).update({birthday: \"1986-05-30\" }); Delete a Contact \u00b6 Delete a contact from the list of contacts for a user. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const contactID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwBGAAAAAAC75QV12PBiRIjb8MNVIrJrBwBgs0NT6NreR57m1u_D8SpPAAAAAAEOAABgs0NT6NreR57m1u_D8SpPAAFCCnApAAA=\"; const delContact = await graph.users.getById('user@tenant.onmicrosoft.com').contacts.getById(contactID).delete(); const delContact2 = await graph.me.contacts.getById(contactID).delete(); Get all of the Contact Folders \u00b6 Get all the folders for the designated user's contacts import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const contactFolders = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders(); const contactFolders2 = await graph.me.contactFolders(); Get Contact Folder by Id \u00b6 Get a contact folder by ID for the specified user import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const contactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID)(); const contactFolder2 = await graph.me.contactFolders.getById(folderID)(); Add a new Contact Folder \u00b6 Add a new folder in the users contacts import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const parentFolderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAAAAAEOAAA=\"; const addedContactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.add(\"New Folder\", parentFolderID); const addedContactFolder2 = await graph.me.contactFolders.add(\"New Folder\", parentFolderID); Update a Contact Folder \u00b6 Update an existing folder in the users contacts import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const updContactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).update({displayName: \"Updated Folder\" }); const updContactFolder2 = await graph.me.contactFolders.getById(folderID).update({displayName: \"Updated Folder\" }); Delete a Contact Folder \u00b6 Delete a folder from the users contacts list. Deleting a folder deletes the contacts in that folder. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const delContactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).delete(); const delContactFolder2 = await graph.me.contactFolders.getById(folderID).delete(); Get all of the Contacts from the Contact Folder \u00b6 Get all the contacts in a folder import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const contactsInContactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).contacts(); const contactsInContactFolder2 = await graph.me.contactFolders.getById(folderID).contacts(); Get Child Folders of the Contact Folder \u00b6 Get child folders from contact folder import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const childFolders = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).childFolders(); const childFolders2 = await graph.me.contactFolders.getById(folderID).childFolders(); Add a new Child Folder \u00b6 Add a new child folder to a contact folder import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const addedChildFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).childFolders.add(\"Sub Folder\", folderID); const addedChildFolder2 = await graph.me.contactFolders.getById(folderID).childFolders.add(\"Sub Folder\", folderID); Get Child Folder by Id \u00b6 Get child folder by ID from user contacts import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const subFolderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqIZAAA=\"; const childFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).childFolders.getById(subFolderID)(); const childFolder2 = await graph.me.contactFolders.getById(folderID).childFolders.getById(subFolderID)(); Add Contact in Child Folder of Contact Folder \u00b6 Add a new contact to a child folder import { graphfi } from \"@pnp/graph\"; import { EmailAddress } from \"./@microsoft/microsoft-graph-types\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const subFolderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqIZAAA=\"; const addedContact = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).childFolders.getById(subFolderID).contacts.add('Pavel', 'Bansky', [<EmailAddress>{address: 'pavelb@fabrikam.onmicrosoft.com', name: 'Pavel Bansky' }], ['+1 732 555 0102']); const addedContact2 = await graph.me.contactFolders.getById(folderID).childFolders.getById(subFolderID).contacts.add('Pavel', 'Bansky', [<EmailAddress>{address: 'pavelb@fabrikam.onmicrosoft.com', name: 'Pavel Bansky' }], ['+1 732 555 0102']);","title":"contacts"},{"location":"graph/contacts/#pnpgraphcontacts","text":"The ability to manage contacts and folders in Outlook is a capability introduced in version 1.2.2 of @pnp/graphfi(). Through the methods described you can add and edit both contacts and folders in a users Outlook. More information can be found in the official Graph documentation: Contact Resource Type","title":"@pnp/graph/contacts"},{"location":"graph/contacts/#icontact-icontacts-icontactfolder-icontactfolders","text":"","title":"IContact, IContacts, IContactFolder, IContactFolders"},{"location":"graph/contacts/#set-up-notes","text":"To make user calls you can use getById where the id is the users email address. Contact ID, Folder ID, and Parent Folder ID use the following format \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwBGAAAAAAC75QV12PBiRIjb8MNVIrJrBwBgs0NT6NreR57m1u_D8SpPAAAAAAEOAABgs0NT6NreR57m1u_D8SpPAAFCCnApAAA=\"","title":"Set up notes"},{"location":"graph/contacts/#get-all-of-the-contacts","text":"Gets a list of all the contacts for the user. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\" import \"@pnp/graph/contacts\" const graph = graphfi(...); const contacts = await graph.users.getById('user@tenant.onmicrosoft.com').contacts(); const contacts2 = await graph.me.contacts();","title":"Get all of the Contacts"},{"location":"graph/contacts/#get-contact-by-id","text":"Gets a specific contact by ID for the user. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const contactID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwBGAAAAAAC75QV12PBiRIjb8MNVIrJrBwBgs0NT6NreR57m1u_D8SpPAAAAAAEOAABgs0NT6NreR57m1u_D8SpPAAFCCnApAAA=\"; const contact = await graph.users.getById('user@tenant.onmicrosoft.com').contacts.getById(contactID)(); const contact2 = await graph.me.contacts.getById(contactID)();","title":"Get Contact by Id"},{"location":"graph/contacts/#add-a-new-contact","text":"Adds a new contact for the user. import { graphfi } from \"@pnp/graph\"; import { EmailAddress } from \"@microsoft/microsoft-graph-types\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const addedContact = await graph.users.getById('user@tenant.onmicrosoft.com').contacts.add('Pavel', 'Bansky', [<EmailAddress>{address: 'pavelb@fabrikam.onmicrosoft.com', name: 'Pavel Bansky' }], ['+1 732 555 0102']); const addedContact2 = await graph.me.contacts.add('Pavel', 'Bansky', [<EmailAddress>{address: 'pavelb@fabrikam.onmicrosoft.com', name: 'Pavel Bansky' }], ['+1 732 555 0102']);","title":"Add a new Contact"},{"location":"graph/contacts/#update-a-contact","text":"Updates a specific contact by ID for teh designated user import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const contactID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwBGAAAAAAC75QV12PBiRIjb8MNVIrJrBwBgs0NT6NreR57m1u_D8SpPAAAAAAEOAABgs0NT6NreR57m1u_D8SpPAAFCCnApAAA=\"; const updContact = await graph.users.getById('user@tenant.onmicrosoft.com').contacts.getById(contactID).update({birthday: \"1986-05-30\" }); const updContact2 = await graph.me.contacts.getById(contactID).update({birthday: \"1986-05-30\" });","title":"Update a Contact"},{"location":"graph/contacts/#delete-a-contact","text":"Delete a contact from the list of contacts for a user. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const contactID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwBGAAAAAAC75QV12PBiRIjb8MNVIrJrBwBgs0NT6NreR57m1u_D8SpPAAAAAAEOAABgs0NT6NreR57m1u_D8SpPAAFCCnApAAA=\"; const delContact = await graph.users.getById('user@tenant.onmicrosoft.com').contacts.getById(contactID).delete(); const delContact2 = await graph.me.contacts.getById(contactID).delete();","title":"Delete a Contact"},{"location":"graph/contacts/#get-all-of-the-contact-folders","text":"Get all the folders for the designated user's contacts import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const contactFolders = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders(); const contactFolders2 = await graph.me.contactFolders();","title":"Get all of the Contact Folders"},{"location":"graph/contacts/#get-contact-folder-by-id","text":"Get a contact folder by ID for the specified user import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const contactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID)(); const contactFolder2 = await graph.me.contactFolders.getById(folderID)();","title":"Get Contact Folder by Id"},{"location":"graph/contacts/#add-a-new-contact-folder","text":"Add a new folder in the users contacts import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const parentFolderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAAAAAEOAAA=\"; const addedContactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.add(\"New Folder\", parentFolderID); const addedContactFolder2 = await graph.me.contactFolders.add(\"New Folder\", parentFolderID);","title":"Add a new Contact Folder"},{"location":"graph/contacts/#update-a-contact-folder","text":"Update an existing folder in the users contacts import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const updContactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).update({displayName: \"Updated Folder\" }); const updContactFolder2 = await graph.me.contactFolders.getById(folderID).update({displayName: \"Updated Folder\" });","title":"Update a Contact Folder"},{"location":"graph/contacts/#delete-a-contact-folder","text":"Delete a folder from the users contacts list. Deleting a folder deletes the contacts in that folder. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const delContactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).delete(); const delContactFolder2 = await graph.me.contactFolders.getById(folderID).delete();","title":"Delete a Contact Folder"},{"location":"graph/contacts/#get-all-of-the-contacts-from-the-contact-folder","text":"Get all the contacts in a folder import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const contactsInContactFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).contacts(); const contactsInContactFolder2 = await graph.me.contactFolders.getById(folderID).contacts();","title":"Get all of the Contacts from the Contact Folder"},{"location":"graph/contacts/#get-child-folders-of-the-contact-folder","text":"Get child folders from contact folder import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const childFolders = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).childFolders(); const childFolders2 = await graph.me.contactFolders.getById(folderID).childFolders();","title":"Get Child Folders of the Contact Folder"},{"location":"graph/contacts/#add-a-new-child-folder","text":"Add a new child folder to a contact folder import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const addedChildFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).childFolders.add(\"Sub Folder\", folderID); const addedChildFolder2 = await graph.me.contactFolders.getById(folderID).childFolders.add(\"Sub Folder\", folderID);","title":"Add a new Child Folder"},{"location":"graph/contacts/#get-child-folder-by-id","text":"Get child folder by ID from user contacts import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const subFolderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqIZAAA=\"; const childFolder = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).childFolders.getById(subFolderID)(); const childFolder2 = await graph.me.contactFolders.getById(folderID).childFolders.getById(subFolderID)();","title":"Get Child Folder by Id"},{"location":"graph/contacts/#add-contact-in-child-folder-of-contact-folder","text":"Add a new contact to a child folder import { graphfi } from \"@pnp/graph\"; import { EmailAddress } from \"./@microsoft/microsoft-graph-types\"; import \"@pnp/graph/users\"; import \"@pnp/graph/contacts\"; const graph = graphfi(...); const folderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqH9AAA=\"; const subFolderID = \"AAMkADY1OTQ5MTM0LTU2OTktNDI0Yy1iODFjLWNiY2RmMzNjODUxYwAuAAAAAAC75QV12PBiRIjb8MNVIrJrAQBgs0NT6NreR57m1u_D8SpPAAFCCqIZAAA=\"; const addedContact = await graph.users.getById('user@tenant.onmicrosoft.com').contactFolders.getById(folderID).childFolders.getById(subFolderID).contacts.add('Pavel', 'Bansky', [<EmailAddress>{address: 'pavelb@fabrikam.onmicrosoft.com', name: 'Pavel Bansky' }], ['+1 732 555 0102']); const addedContact2 = await graph.me.contactFolders.getById(folderID).childFolders.getById(subFolderID).contacts.add('Pavel', 'Bansky', [<EmailAddress>{address: 'pavelb@fabrikam.onmicrosoft.com', name: 'Pavel Bansky' }], ['+1 732 555 0102']);","title":"Add Contact in Child Folder of Contact Folder"},{"location":"graph/directoryobjects/","text":"@pnp/graph/directoryObjects \u00b6 Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types. More information can be found in the official Graph documentation: DirectoryObject Resource Type IDirectoryObject, IDirectoryObjects \u00b6 The groups and directory roles for the user \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const memberOf = await graph.users.getById('user@tenant.onmicrosoft.com').memberOf(); const memberOf2 = await graph.me.memberOf(); Return all the groups the user, group or directoryObject is a member of. Add true parameter to return only security enabled groups \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); const memberGroups = await graph.users.getById('user@tenant.onmicrosoft.com').getMemberGroups(); const memberGroups2 = await graph.me.getMemberGroups(); // Returns only security enabled groups const memberGroups3 = await graph.me.getMemberGroups(true); const memberGroups4 = await graph.groups.getById('user@tenant.onmicrosoft.com').getMemberGroups(); Returns all the groups, administrative units and directory roles that a user, group, or directory object is a member of. Add true parameter to return only security enabled groups \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); const memberObjects = await graph.users.getById('user@tenant.onmicrosoft.com').getMemberObjects(); const memberObjects2 = await graph.me.getMemberObjects(); // Returns only security enabled groups const memberObjects3 = await graph.me.getMemberObjects(true); const memberObjects4 = await graph.groups.getById('99dc1039-eb80-43b1-a09e-250d50a80b26').getMemberObjects(); Check for membership in a specified list of groups \u00b6 And returns from that list those groups of which the specified user, group, or directory object is a member import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); const checkedMembers = await graph.users.getById('user@tenant.onmicrosoft.com').checkMemberGroups([\"c2fb52d1-5c60-42b1-8c7e-26ce8dc1e741\",\"2001bb09-1d46-40a6-8176-7bb867fb75aa\"]); const checkedMembers2 = await graph.me.checkMemberGroups([\"c2fb52d1-5c60-42b1-8c7e-26ce8dc1e741\",\"2001bb09-1d46-40a6-8176-7bb867fb75aa\"]); const checkedMembers3 = await graph.groups.getById('99dc1039-eb80-43b1-a09e-250d50a80b26').checkMemberGroups([\"c2fb52d1-5c60-42b1-8c7e-26ce8dc1e741\",\"2001bb09-1d46-40a6-8176-7bb867fb75aa\"]); Get directoryObject by Id \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/directory-objects\"; const graph = graphfi(...); const dirObject = await graph.directoryObjects.getById('99dc1039-eb80-43b1-a09e-250d50a80b26'); Delete directoryObject \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/directory-objects\"; const graph = graphfi(...); const deleted = await graph.directoryObjects.getById('99dc1039-eb80-43b1-a09e-250d50a80b26').delete()","title":"directory objects"},{"location":"graph/directoryobjects/#pnpgraphdirectoryobjects","text":"Represents an Azure Active Directory object. The directoryObject type is the base type for many other directory entity types. More information can be found in the official Graph documentation: DirectoryObject Resource Type","title":"@pnp/graph/directoryObjects"},{"location":"graph/directoryobjects/#idirectoryobject-idirectoryobjects","text":"","title":"IDirectoryObject, IDirectoryObjects"},{"location":"graph/directoryobjects/#the-groups-and-directory-roles-for-the-user","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const memberOf = await graph.users.getById('user@tenant.onmicrosoft.com').memberOf(); const memberOf2 = await graph.me.memberOf();","title":"The groups and directory roles for the user"},{"location":"graph/directoryobjects/#return-all-the-groups-the-user-group-or-directoryobject-is-a-member-of-add-true-parameter-to-return-only-security-enabled-groups","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); const memberGroups = await graph.users.getById('user@tenant.onmicrosoft.com').getMemberGroups(); const memberGroups2 = await graph.me.getMemberGroups(); // Returns only security enabled groups const memberGroups3 = await graph.me.getMemberGroups(true); const memberGroups4 = await graph.groups.getById('user@tenant.onmicrosoft.com').getMemberGroups();","title":"Return all the groups the user, group or directoryObject is a member of. Add true parameter to return only security enabled groups"},{"location":"graph/directoryobjects/#returns-all-the-groups-administrative-units-and-directory-roles-that-a-user-group-or-directory-object-is-a-member-of-add-true-parameter-to-return-only-security-enabled-groups","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); const memberObjects = await graph.users.getById('user@tenant.onmicrosoft.com').getMemberObjects(); const memberObjects2 = await graph.me.getMemberObjects(); // Returns only security enabled groups const memberObjects3 = await graph.me.getMemberObjects(true); const memberObjects4 = await graph.groups.getById('99dc1039-eb80-43b1-a09e-250d50a80b26').getMemberObjects();","title":"Returns all the groups, administrative units and directory roles that a user, group, or directory object is a member of. Add true parameter to return only security enabled groups"},{"location":"graph/directoryobjects/#check-for-membership-in-a-specified-list-of-groups","text":"And returns from that list those groups of which the specified user, group, or directory object is a member import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); const checkedMembers = await graph.users.getById('user@tenant.onmicrosoft.com').checkMemberGroups([\"c2fb52d1-5c60-42b1-8c7e-26ce8dc1e741\",\"2001bb09-1d46-40a6-8176-7bb867fb75aa\"]); const checkedMembers2 = await graph.me.checkMemberGroups([\"c2fb52d1-5c60-42b1-8c7e-26ce8dc1e741\",\"2001bb09-1d46-40a6-8176-7bb867fb75aa\"]); const checkedMembers3 = await graph.groups.getById('99dc1039-eb80-43b1-a09e-250d50a80b26').checkMemberGroups([\"c2fb52d1-5c60-42b1-8c7e-26ce8dc1e741\",\"2001bb09-1d46-40a6-8176-7bb867fb75aa\"]);","title":"Check for membership in a specified list of groups"},{"location":"graph/directoryobjects/#get-directoryobject-by-id","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/directory-objects\"; const graph = graphfi(...); const dirObject = await graph.directoryObjects.getById('99dc1039-eb80-43b1-a09e-250d50a80b26');","title":"Get directoryObject by Id"},{"location":"graph/directoryobjects/#delete-directoryobject","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/directory-objects\"; const graph = graphfi(...); const deleted = await graph.directoryObjects.getById('99dc1039-eb80-43b1-a09e-250d50a80b26').delete()","title":"Delete directoryObject"},{"location":"graph/groups/","text":"@pnp/graph/groups \u00b6 Groups are collections of users and other principals who share access to resources in Microsoft services or in your app. All group-related operations in Microsoft Graph require administrator consent. Note: Groups can only be created through work or school accounts. Personal Microsoft accounts don't support groups. You can learn more about Microsoft Graph Groups by reading the Official Microsoft Graph Documentation . IGroup, IGroups \u00b6 Add a Group \u00b6 Add a new group. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; import { GroupType } from '@pnp/graph/groups'; const graph = graphfi(...); const groupAddResult = await graph.groups.add(\"GroupName\", \"Mail_NickName\", GroupType.Office365); const group = await groupAddResult.group(); Delete a Group \u00b6 Deletes an existing group. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").delete(); Update Group Properties \u00b6 Updates an existing group. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").update({ displayName: newName, propertyName: updatedValue}); Add favorite \u00b6 Add the group to the list of the current user's favorite groups. Supported for Office 365 groups only. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").addFavorite(); Remove favorite \u00b6 Remove the group from the list of the current user's favorite groups. Supported for Office 365 Groups only. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").removeFavorite(); Reset Unseen Count \u00b6 Reset the unseenCount of all the posts that the current user has not seen since their last visit. Supported for Office 365 groups only. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").resetUnseenCount(); Subscribe By Mail \u00b6 Calling this method will enable the current user to receive email notifications for this group, about new posts, events, and files in that group. Supported for Office 365 groups only. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").subscribeByMail(); Unsubscribe By Mail \u00b6 Calling this method will prevent the current user from receiving email notifications for this group about new posts, events, and files in that group. Supported for Office 365 groups only. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").unsubscribeByMail(); Get Calendar View \u00b6 Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); const startDate = new Date(\"2020-04-01\"); const endDate = new Date(\"2020-03-01\"); const events = graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").getCalendarView(startDate, endDate); Group Photo Operations \u00b6 See Photos Group Membership \u00b6 Get the members and/or owners of a group. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; import \"@pnp/graph/members\"; const graph = graphfi(...); const members = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").members(); const owners = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").owners(); Get the Team Site for a Group \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; import \"@pnp/graph/sites/group\"; const graph = graphfi(...); const teamSite = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").sites.root(); const url = teamSite.webUrl","title":"groups"},{"location":"graph/groups/#pnpgraphgroups","text":"Groups are collections of users and other principals who share access to resources in Microsoft services or in your app. All group-related operations in Microsoft Graph require administrator consent. Note: Groups can only be created through work or school accounts. Personal Microsoft accounts don't support groups. You can learn more about Microsoft Graph Groups by reading the Official Microsoft Graph Documentation .","title":"@pnp/graph/groups"},{"location":"graph/groups/#igroup-igroups","text":"","title":"IGroup, IGroups"},{"location":"graph/groups/#add-a-group","text":"Add a new group. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; import { GroupType } from '@pnp/graph/groups'; const graph = graphfi(...); const groupAddResult = await graph.groups.add(\"GroupName\", \"Mail_NickName\", GroupType.Office365); const group = await groupAddResult.group();","title":"Add a Group"},{"location":"graph/groups/#delete-a-group","text":"Deletes an existing group. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").delete();","title":"Delete a Group"},{"location":"graph/groups/#update-group-properties","text":"Updates an existing group. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").update({ displayName: newName, propertyName: updatedValue});","title":"Update Group Properties"},{"location":"graph/groups/#add-favorite","text":"Add the group to the list of the current user's favorite groups. Supported for Office 365 groups only. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").addFavorite();","title":"Add favorite"},{"location":"graph/groups/#remove-favorite","text":"Remove the group from the list of the current user's favorite groups. Supported for Office 365 Groups only. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").removeFavorite();","title":"Remove favorite"},{"location":"graph/groups/#reset-unseen-count","text":"Reset the unseenCount of all the posts that the current user has not seen since their last visit. Supported for Office 365 groups only. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").resetUnseenCount();","title":"Reset Unseen Count"},{"location":"graph/groups/#subscribe-by-mail","text":"Calling this method will enable the current user to receive email notifications for this group, about new posts, events, and files in that group. Supported for Office 365 groups only. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").subscribeByMail();","title":"Subscribe By Mail"},{"location":"graph/groups/#unsubscribe-by-mail","text":"Calling this method will prevent the current user from receiving email notifications for this group about new posts, events, and files in that group. Supported for Office 365 groups only. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").unsubscribeByMail();","title":"Unsubscribe By Mail"},{"location":"graph/groups/#get-calendar-view","text":"Get the occurrences, exceptions, and single instances of events in a calendar view defined by a time range, from the default calendar of a group. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); const startDate = new Date(\"2020-04-01\"); const endDate = new Date(\"2020-03-01\"); const events = graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").getCalendarView(startDate, endDate);","title":"Get Calendar View"},{"location":"graph/groups/#group-photo-operations","text":"See Photos","title":"Group Photo Operations"},{"location":"graph/groups/#group-membership","text":"Get the members and/or owners of a group. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; import \"@pnp/graph/members\"; const graph = graphfi(...); const members = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").members(); const owners = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").owners();","title":"Group Membership"},{"location":"graph/groups/#get-the-team-site-for-a-group","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; import \"@pnp/graph/sites/group\"; const graph = graphfi(...); const teamSite = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").sites.root(); const url = teamSite.webUrl","title":"Get the Team Site for a Group"},{"location":"graph/insights/","text":"@pnp/graph/insights \u00b6 This module helps you get Insights in form of Trending , Used and Shared . The results are based on relationships calculated using advanced analytics and machine learning techniques. IInsights \u00b6 Get all Trending documents \u00b6 Returns documents from OneDrive and SharePoint sites trending around a user. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const trending = await graph.me.insights.trending() const trending = await graph.users.getById(\"userId\").insights.trending() Get a Trending document by Id \u00b6 Using the getById method to get a trending document by Id. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const trendingDoc = await graph.me.insights.trending.getById('Id')() const trendingDoc = await graph.users.getById(\"userId\").insights.trending.getById('Id')() Get the resource from Trending document \u00b6 Using the resources method to get the resource from a trending document. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const resource = await graph.me.insights.trending.getById('Id').resource() const resource = await graph.users.getById(\"userId\").insights.trending.getById('Id').resource() Get all Used documents \u00b6 Returns documents viewed and modified by a user. Includes documents the user used in OneDrive for Business, SharePoint, opened as email attachments, and as link attachments from sources like Box, DropBox and Google Drive. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const used = await graph.me.insights.used() const used = await graph.users.getById(\"userId\").insights.used() Get a Used document by Id \u00b6 Using the getById method to get a used document by Id. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const usedDoc = await graph.me.insights.used.getById('Id')() const usedDoc = await graph.users.getById(\"userId\").insights.used.getById('Id')() Get the resource from Used document \u00b6 Using the resources method to get the resource from a used document. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const resource = await graph.me.insights.used.getById('Id').resource() const resource = await graph.users.getById(\"userId\").insights.used.getById('Id').resource() Get all Shared documents \u00b6 Returns documents shared with a user. Documents can be shared as email attachments or as OneDrive for Business links sent in emails. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const shared = await graph.me.insights.shared() const shared = await graph.users.getById(\"userId\").insights.shared() Get a Shared document by Id \u00b6 Using the getById method to get a shared document by Id. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const sharedDoc = await graph.me.insights.shared.getById('Id')() const sharedDoc = await graph.users.getById(\"userId\").insights.shared.getById('Id')() Get the resource from a Shared document \u00b6 Using the resources method to get the resource from a shared document. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const resource = await graph.me.insights.shared.getById('Id').resource() const resource = await graph.users.getById(\"userId\").insights.shared.getById('Id').resource()","title":"insights"},{"location":"graph/insights/#pnpgraphinsights","text":"This module helps you get Insights in form of Trending , Used and Shared . The results are based on relationships calculated using advanced analytics and machine learning techniques.","title":"@pnp/graph/insights"},{"location":"graph/insights/#iinsights","text":"","title":"IInsights"},{"location":"graph/insights/#get-all-trending-documents","text":"Returns documents from OneDrive and SharePoint sites trending around a user. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const trending = await graph.me.insights.trending() const trending = await graph.users.getById(\"userId\").insights.trending()","title":"Get all Trending documents"},{"location":"graph/insights/#get-a-trending-document-by-id","text":"Using the getById method to get a trending document by Id. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const trendingDoc = await graph.me.insights.trending.getById('Id')() const trendingDoc = await graph.users.getById(\"userId\").insights.trending.getById('Id')()","title":"Get a Trending document by Id"},{"location":"graph/insights/#get-the-resource-from-trending-document","text":"Using the resources method to get the resource from a trending document. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const resource = await graph.me.insights.trending.getById('Id').resource() const resource = await graph.users.getById(\"userId\").insights.trending.getById('Id').resource()","title":"Get the resource from Trending document"},{"location":"graph/insights/#get-all-used-documents","text":"Returns documents viewed and modified by a user. Includes documents the user used in OneDrive for Business, SharePoint, opened as email attachments, and as link attachments from sources like Box, DropBox and Google Drive. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const used = await graph.me.insights.used() const used = await graph.users.getById(\"userId\").insights.used()","title":"Get all Used documents"},{"location":"graph/insights/#get-a-used-document-by-id","text":"Using the getById method to get a used document by Id. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const usedDoc = await graph.me.insights.used.getById('Id')() const usedDoc = await graph.users.getById(\"userId\").insights.used.getById('Id')()","title":"Get a Used document by Id"},{"location":"graph/insights/#get-the-resource-from-used-document","text":"Using the resources method to get the resource from a used document. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const resource = await graph.me.insights.used.getById('Id').resource() const resource = await graph.users.getById(\"userId\").insights.used.getById('Id').resource()","title":"Get the resource from Used document"},{"location":"graph/insights/#get-all-shared-documents","text":"Returns documents shared with a user. Documents can be shared as email attachments or as OneDrive for Business links sent in emails. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const shared = await graph.me.insights.shared() const shared = await graph.users.getById(\"userId\").insights.shared()","title":"Get all Shared documents"},{"location":"graph/insights/#get-a-shared-document-by-id","text":"Using the getById method to get a shared document by Id. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const sharedDoc = await graph.me.insights.shared.getById('Id')() const sharedDoc = await graph.users.getById(\"userId\").insights.shared.getById('Id')()","title":"Get a Shared document by Id"},{"location":"graph/insights/#get-the-resource-from-a-shared-document","text":"Using the resources method to get the resource from a shared document. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/insights\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const resource = await graph.me.insights.shared.getById('Id').resource() const resource = await graph.users.getById(\"userId\").insights.shared.getById('Id').resource()","title":"Get the resource from a Shared document"},{"location":"graph/invitations/","text":"@pnp/graph/invitations \u00b6 The ability invite an external user via the invitation manager IInvitations \u00b6 Create Invitation \u00b6 Using the invitations.create() you can create an Invitation. We need the email address of the user being invited and the URL user should be redirected to once the invitation is redeemed (redirect URL). import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/invitations\"; const graph = graphfi(...); const invitationResult = await graph.invitations.create('external.user@email-address.com', 'https://tenant.sharepoint.com/sites/redirecturi');","title":"invitations"},{"location":"graph/invitations/#pnpgraphinvitations","text":"The ability invite an external user via the invitation manager","title":"@pnp/graph/invitations"},{"location":"graph/invitations/#iinvitations","text":"","title":"IInvitations"},{"location":"graph/invitations/#create-invitation","text":"Using the invitations.create() you can create an Invitation. We need the email address of the user being invited and the URL user should be redirected to once the invitation is redeemed (redirect URL). import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/invitations\"; const graph = graphfi(...); const invitationResult = await graph.invitations.create('external.user@email-address.com', 'https://tenant.sharepoint.com/sites/redirecturi');","title":"Create Invitation"},{"location":"graph/onedrive/","text":"@pnp/graph/onedrive \u00b6 The ability to manage drives and drive items in Onedrive is a capability introduced in version 1.2.4 of @pnp/graph. Through the methods described you can manage drives and drive items in Onedrive. IInvitations \u00b6 Get the default drive \u00b6 Using the drive you can get the default drive from Onedrive import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const drives = await graph.users.getById('user@tenant.onmicrosoft.com').drives(); const drives = await graph.me.drive(); Get all of the drives \u00b6 Using the drives() you can get the users available drives from Onedrive import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const drives = await graph.users.getById('user@tenant.onmicrosoft.com').drives(); const drives = await graph.me.drives(); Get drive by Id \u00b6 Using the drives.getById() you can get one of the available drives in Outlook import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const drive = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId'); const drive = await graph.me.drives.getById('driveId'); Get the associated list of a drive \u00b6 Using the list() you get the associated list import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const list = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').list(); const list = await graph.me.drives.getById('driveId').list(); Get the recent files \u00b6 Using the recent() you get the recent files import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const files = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').recent(); const files = await graph.me.drives.getById('driveId').recent(); Get the files shared with me \u00b6 Using the sharedWithMe() you get the files shared with the user import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const shared = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').sharedWithMe(); const shared = await graph.me.drives.getById('driveId').sharedWithMe(); Get the Root folder \u00b6 Using the root() you get the root folder import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const root = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').root(); const root = await graph.me.drives.getById('driveId').root(); Get the Children \u00b6 Using the children() you get the children import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const rootChildren = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').root.children(); const rootChildren = await graph.me.drives.getById('driveId').root.children(); const itemChildren = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').items.getById('itemId').children(); const itemChildren = await graph.me.drives.getById('driveId').root.items.getById('itemId').children(); Add Item \u00b6 Using the add you can add an item import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/onedrive\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const add1 = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').root.children.add(\"test.txt\", \"My File Content String\"); const add2 = await graph.me.drives.getById('driveId').root.children.add(\"filename.txt\", \"My File Content String\"); Add folder \u00b6 Using addFolder you can add a folder import { graph } from \"@pnp/graph\"; import \"@pnp/graph/onedrive\"; import \"@pnp/graph/users\" import { DriveItem as IDriveItem } from \"@microsoft/microsoft-graph-types\"; const graph = graphfi(...); const addFolder1 = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').root.children.addFolder('New Folder'); const addFolder2 = await graph.me.drives.getById('driveId').root.children.addFolder('New Folder'); Search items \u00b6 Using the search() you can search for items, and optionally select properties import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const search = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId')root.search('queryText')(); const search = await graph.me.drives.getById('driveId')root.search('queryText')(); Get specific item in drive \u00b6 Using the items.getById() you can get a specific item from the current drive import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const item = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').items.getById('itemId'); const item = await graph.me.drives.getById('driveId').items.getById('itemId'); Get thumbnails \u00b6 Using the thumbnails() you get the thumbnails import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const thumbs = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').items.getById('itemId').thumbnails(); const thumbs = await graph.me.drives.getById('driveId').items.getById('itemId').thumbnails(); Delete drive item \u00b6 Using the delete() you delete the current item import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const thumbs = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').items.getById('itemId').delete(); const thumbs = await graph.me.drives.getById('driveId').items.getById('itemId').delete(); Update drive item \u00b6 Using the update() you update the current item import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const update = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').items.getById('itemId').update({name: \"New Name\"}); const update = await graph.me.drives.getById('driveId').items.getById('itemId').update({name: \"New Name\"}); Move drive item \u00b6 Using the move() you move the current item, and optionally update it import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); // Requires a parentReference to the new folder location const move = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').items.getById('itemId').move({ parentReference: { id: 'itemId'}}, {name: \"New Name\"}); const move = await graph.me.drives.getById('driveId').items.getById('itemId').move({ parentReference: { id: 'itemId'}}, {name: \"New Name\"});","title":"onedrive"},{"location":"graph/onedrive/#pnpgraphonedrive","text":"The ability to manage drives and drive items in Onedrive is a capability introduced in version 1.2.4 of @pnp/graph. Through the methods described you can manage drives and drive items in Onedrive.","title":"@pnp/graph/onedrive"},{"location":"graph/onedrive/#iinvitations","text":"","title":"IInvitations"},{"location":"graph/onedrive/#get-the-default-drive","text":"Using the drive you can get the default drive from Onedrive import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const drives = await graph.users.getById('user@tenant.onmicrosoft.com').drives(); const drives = await graph.me.drive();","title":"Get the default drive"},{"location":"graph/onedrive/#get-all-of-the-drives","text":"Using the drives() you can get the users available drives from Onedrive import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const drives = await graph.users.getById('user@tenant.onmicrosoft.com').drives(); const drives = await graph.me.drives();","title":"Get all of the drives"},{"location":"graph/onedrive/#get-drive-by-id","text":"Using the drives.getById() you can get one of the available drives in Outlook import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const drive = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId'); const drive = await graph.me.drives.getById('driveId');","title":"Get drive by Id"},{"location":"graph/onedrive/#get-the-associated-list-of-a-drive","text":"Using the list() you get the associated list import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const list = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').list(); const list = await graph.me.drives.getById('driveId').list();","title":"Get the associated list of a drive"},{"location":"graph/onedrive/#get-the-recent-files","text":"Using the recent() you get the recent files import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const files = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').recent(); const files = await graph.me.drives.getById('driveId').recent();","title":"Get the recent files"},{"location":"graph/onedrive/#get-the-files-shared-with-me","text":"Using the sharedWithMe() you get the files shared with the user import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const shared = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').sharedWithMe(); const shared = await graph.me.drives.getById('driveId').sharedWithMe();","title":"Get the files shared with me"},{"location":"graph/onedrive/#get-the-root-folder","text":"Using the root() you get the root folder import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const root = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').root(); const root = await graph.me.drives.getById('driveId').root();","title":"Get the Root folder"},{"location":"graph/onedrive/#get-the-children","text":"Using the children() you get the children import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const rootChildren = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').root.children(); const rootChildren = await graph.me.drives.getById('driveId').root.children(); const itemChildren = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').items.getById('itemId').children(); const itemChildren = await graph.me.drives.getById('driveId').root.items.getById('itemId').children();","title":"Get the Children"},{"location":"graph/onedrive/#add-item","text":"Using the add you can add an item import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/onedrive\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const add1 = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').root.children.add(\"test.txt\", \"My File Content String\"); const add2 = await graph.me.drives.getById('driveId').root.children.add(\"filename.txt\", \"My File Content String\");","title":"Add Item"},{"location":"graph/onedrive/#add-folder","text":"Using addFolder you can add a folder import { graph } from \"@pnp/graph\"; import \"@pnp/graph/onedrive\"; import \"@pnp/graph/users\" import { DriveItem as IDriveItem } from \"@microsoft/microsoft-graph-types\"; const graph = graphfi(...); const addFolder1 = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').root.children.addFolder('New Folder'); const addFolder2 = await graph.me.drives.getById('driveId').root.children.addFolder('New Folder');","title":"Add folder"},{"location":"graph/onedrive/#search-items","text":"Using the search() you can search for items, and optionally select properties import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const search = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId')root.search('queryText')(); const search = await graph.me.drives.getById('driveId')root.search('queryText')();","title":"Search items"},{"location":"graph/onedrive/#get-specific-item-in-drive","text":"Using the items.getById() you can get a specific item from the current drive import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const item = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').items.getById('itemId'); const item = await graph.me.drives.getById('driveId').items.getById('itemId');","title":"Get specific item in drive"},{"location":"graph/onedrive/#get-thumbnails","text":"Using the thumbnails() you get the thumbnails import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const thumbs = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').items.getById('itemId').thumbnails(); const thumbs = await graph.me.drives.getById('driveId').items.getById('itemId').thumbnails();","title":"Get thumbnails"},{"location":"graph/onedrive/#delete-drive-item","text":"Using the delete() you delete the current item import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const thumbs = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').items.getById('itemId').delete(); const thumbs = await graph.me.drives.getById('driveId').items.getById('itemId').delete();","title":"Delete drive item"},{"location":"graph/onedrive/#update-drive-item","text":"Using the update() you update the current item import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); const update = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').items.getById('itemId').update({name: \"New Name\"}); const update = await graph.me.drives.getById('driveId').items.getById('itemId').update({name: \"New Name\"});","title":"Update drive item"},{"location":"graph/onedrive/#move-drive-item","text":"Using the move() you move the current item, and optionally update it import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/onedrive\"; const graph = graphfi(...); // Requires a parentReference to the new folder location const move = await graph.users.getById('user@tenant.onmicrosoft.com').drives.getById('driveId').items.getById('itemId').move({ parentReference: { id: 'itemId'}}, {name: \"New Name\"}); const move = await graph.me.drives.getById('driveId').items.getById('itemId').move({ parentReference: { id: 'itemId'}}, {name: \"New Name\"});","title":"Move drive item"},{"location":"graph/outlook/","text":"@pnp/graph/outlook \u00b6 Represents the Outlook services available to a user. Currently, only interacting with categories is supported. You can learn more by reading the Official Microsoft Graph Documentation . IUsers, IUser, IPeople \u00b6 Get All Categories User \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/outlook\"; const graph = graphfi(...); // Delegated permissions const categories = await graph.me.outlook.masterCategories(); // Application permissions const categories = await graph.users.getById('{user id}').outlook.masterCategories(); Add Category User \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/outlook\"; const graph = graphfi(...); // Delegated permissions await graph.me.outlook.masterCategories.add({ displayName: 'Newsletters', color: 'preset2' }); // Application permissions await graph.users.getById('{user id}').outlook.masterCategories.add({ displayName: 'Newsletters', color: 'preset2' }); Update Category \u00b6 Testing has shown that displayName cannot be updated. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/outlook\"; import { OutlookCategory } from \"@microsoft/microsoft-graph-types\"; const graph = graphfi(...); const categoryUpdate: OutlookCategory = { color: \"preset5\" } // Delegated permissions const categories = await graph.me.outlook.masterCategories.getById('{category id}').update(categoryUpdate); // Application permissions const categories = await graph.users.getById('{user id}').outlook.masterCategories.getById('{category id}').update(categoryUpdate); Delete Category \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/outlook\"; const graph = graphfi(...); // Delegated permissions const categories = await graph.me.outlook.masterCategories.getById('{category id}').delete(); // Application permissions const categories = await graph.users.getById('{user id}').outlook.masterCategories.getById('{category id}').delete();","title":"outlook"},{"location":"graph/outlook/#pnpgraphoutlook","text":"Represents the Outlook services available to a user. Currently, only interacting with categories is supported. You can learn more by reading the Official Microsoft Graph Documentation .","title":"@pnp/graph/outlook"},{"location":"graph/outlook/#iusers-iuser-ipeople","text":"","title":"IUsers, IUser, IPeople"},{"location":"graph/outlook/#get-all-categories-user","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/outlook\"; const graph = graphfi(...); // Delegated permissions const categories = await graph.me.outlook.masterCategories(); // Application permissions const categories = await graph.users.getById('{user id}').outlook.masterCategories();","title":"Get All Categories User"},{"location":"graph/outlook/#add-category-user","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/outlook\"; const graph = graphfi(...); // Delegated permissions await graph.me.outlook.masterCategories.add({ displayName: 'Newsletters', color: 'preset2' }); // Application permissions await graph.users.getById('{user id}').outlook.masterCategories.add({ displayName: 'Newsletters', color: 'preset2' });","title":"Add Category User"},{"location":"graph/outlook/#update-category","text":"Testing has shown that displayName cannot be updated. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/outlook\"; import { OutlookCategory } from \"@microsoft/microsoft-graph-types\"; const graph = graphfi(...); const categoryUpdate: OutlookCategory = { color: \"preset5\" } // Delegated permissions const categories = await graph.me.outlook.masterCategories.getById('{category id}').update(categoryUpdate); // Application permissions const categories = await graph.users.getById('{user id}').outlook.masterCategories.getById('{category id}').update(categoryUpdate);","title":"Update Category"},{"location":"graph/outlook/#delete-category","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/outlook\"; const graph = graphfi(...); // Delegated permissions const categories = await graph.me.outlook.masterCategories.getById('{category id}').delete(); // Application permissions const categories = await graph.users.getById('{user id}').outlook.masterCategories.getById('{category id}').delete();","title":"Delete Category"},{"location":"graph/photos/","text":"@pnp/graph/photos \u00b6 A profile photo of a user, group or an Outlook contact accessed from Exchange Online or Azure Active Directory (AAD). It's binary data not encoded in base-64. You can learn more about Microsoft Graph users by reading the Official Microsoft Graph Documentation . IPhoto \u00b6 Current User Photo \u00b6 This example shows the getBlob() endpoint, there is also a getBuffer() endpoint to support node.js import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/photos\"; const graph = graphfi(...); const photoValue = await graph.me.photo.getBlob(); const url = window.URL || window.webkitURL; const blobUrl = url.createObjectURL(photoValue); document.getElementById(\"photoElement\").setAttribute(\"src\", blobUrl); Current Group Photo \u00b6 This example shows the getBlob() endpoint, there is also a getBuffer() endpoint to support node.js import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; import \"@pnp/graph/photos\"; const graph = graphfi(...); const photoValue = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").photo.getBlob(); const url = window.URL || window.webkitURL; const blobUrl = url.createObjectURL(photoValue); document.getElementById(\"photoElement\").setAttribute(\"src\", blobUrl); Set User Photo \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/photos\"; const graph = graphfi(...); const input = <HTMLInputElement>document.getElementById(\"thefileinput\"); const file = input.files[0]; await graph.me.photo.setContent(file); Set Group Photo \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/photos\"; const graph = graphfi(...); const input = <HTMLInputElement>document.getElementById(\"thefileinput\"); const file = input.files[0]; await graph.me.photo.setContent(file);","title":"photos"},{"location":"graph/photos/#pnpgraphphotos","text":"A profile photo of a user, group or an Outlook contact accessed from Exchange Online or Azure Active Directory (AAD). It's binary data not encoded in base-64. You can learn more about Microsoft Graph users by reading the Official Microsoft Graph Documentation .","title":"@pnp/graph/photos"},{"location":"graph/photos/#iphoto","text":"","title":"IPhoto"},{"location":"graph/photos/#current-user-photo","text":"This example shows the getBlob() endpoint, there is also a getBuffer() endpoint to support node.js import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/photos\"; const graph = graphfi(...); const photoValue = await graph.me.photo.getBlob(); const url = window.URL || window.webkitURL; const blobUrl = url.createObjectURL(photoValue); document.getElementById(\"photoElement\").setAttribute(\"src\", blobUrl);","title":"Current User Photo"},{"location":"graph/photos/#current-group-photo","text":"This example shows the getBlob() endpoint, there is also a getBuffer() endpoint to support node.js import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/groups\"; import \"@pnp/graph/photos\"; const graph = graphfi(...); const photoValue = await graph.groups.getById(\"7d2b9355-0891-47d3-84c8-bf2cd9c62177\").photo.getBlob(); const url = window.URL || window.webkitURL; const blobUrl = url.createObjectURL(photoValue); document.getElementById(\"photoElement\").setAttribute(\"src\", blobUrl);","title":"Current Group Photo"},{"location":"graph/photos/#set-user-photo","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/photos\"; const graph = graphfi(...); const input = <HTMLInputElement>document.getElementById(\"thefileinput\"); const file = input.files[0]; await graph.me.photo.setContent(file);","title":"Set User Photo"},{"location":"graph/photos/#set-group-photo","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/photos\"; const graph = graphfi(...); const input = <HTMLInputElement>document.getElementById(\"thefileinput\"); const file = input.files[0]; await graph.me.photo.setContent(file);","title":"Set Group Photo"},{"location":"graph/planner/","text":"@pnp/graph/planner \u00b6 The ability to manage plans and tasks in Planner is a capability introduced in version 1.2.4 of @pnp/graph. Through the methods described you can add, update and delete items in Planner. IInvitations \u00b6 Get Plans by Id \u00b6 Using the planner.plans.getById() you can get a specific Plan. Planner.plans is not an available endpoint, you need to get a specific Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const plan = await graph.planner.plans.getById('planId')(); Add new Plan \u00b6 Using the planner.plans.add() you can create a new Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const newPlan = await graph.planner.plans.add('groupObjectId', 'title'); Get Tasks in Plan \u00b6 Using the tasks() you can get the Tasks in a Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const planTasks = await graph.planner.plans.getById('planId').tasks(); Get Buckets in Plan \u00b6 Using the buckets() you can get the Buckets in a Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const planBuckets = await graph.planner.plans.getById('planId').buckets(); Get Details in Plan \u00b6 Using the details() you can get the details in a Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const planDetails = await graph.planner.plans.getById('planId').details(); Delete Plan \u00b6 Using the delete() you can get delete a Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const delPlan = await graph.planner.plans.getById('planId').delete('planEtag'); Update Plan \u00b6 Using the update() you can get update a Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const updPlan = await graph.planner.plans.getById('planId').update({title: 'New Title', eTag: 'planEtag'}); Get Task by Id \u00b6 Using the planner.tasks.getById() you can get a specific Task. Planner.tasks is not an available endpoint, you need to get a specific Task. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const task = await graph.planner.tasks.getById('taskId')(); Add new Task \u00b6 Using the planner.tasks.add() you can create a new Task. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const newTask = await graph.planner.tasks.add('planId', 'title'); Get Details in Task \u00b6 Using the details() you can get the details in a Task. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const taskDetails = await graph.planner.tasks.getById('taskId').details(); Delete Task \u00b6 Using the delete() you can get delete a Task. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const delTask = await graph.planner.tasks.getById('taskId').delete('taskEtag'); Update Task \u00b6 Using the update() you can get update a Task. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const updTask = await graph.planner.tasks.getById('taskId').update({properties, eTag:'taskEtag'}); Get Buckets by Id \u00b6 Using the planner.buckets.getById() you can get a specific Bucket. planner.buckets is not an available endpoint, you need to get a specific Bucket. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const bucket = await graph.planner.buckets.getById('bucketId')(); Add new Bucket \u00b6 Using the planner.buckets.add() you can create a new Bucket. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const newBucket = await graph.planner.buckets.add('name', 'planId'); Update Bucket \u00b6 Using the update() you can get update a Bucket. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const updBucket = await graph.planner.buckets.getById('bucketId').update({name: \"Name\", eTag:'bucketEtag'}); Delete Bucket \u00b6 Using the delete() you can get delete a Bucket. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const delBucket = await graph.planner.buckets.getById('bucketId').delete(eTag:'bucketEtag'); Get Bucket Tasks \u00b6 Using the tasks() you can get Tasks in a Bucket. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const bucketTasks = await graph.planner.buckets.getById('bucketId').tasks();","title":"planner"},{"location":"graph/planner/#pnpgraphplanner","text":"The ability to manage plans and tasks in Planner is a capability introduced in version 1.2.4 of @pnp/graph. Through the methods described you can add, update and delete items in Planner.","title":"@pnp/graph/planner"},{"location":"graph/planner/#iinvitations","text":"","title":"IInvitations"},{"location":"graph/planner/#get-plans-by-id","text":"Using the planner.plans.getById() you can get a specific Plan. Planner.plans is not an available endpoint, you need to get a specific Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const plan = await graph.planner.plans.getById('planId')();","title":"Get Plans by Id"},{"location":"graph/planner/#add-new-plan","text":"Using the planner.plans.add() you can create a new Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const newPlan = await graph.planner.plans.add('groupObjectId', 'title');","title":"Add new Plan"},{"location":"graph/planner/#get-tasks-in-plan","text":"Using the tasks() you can get the Tasks in a Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const planTasks = await graph.planner.plans.getById('planId').tasks();","title":"Get Tasks in Plan"},{"location":"graph/planner/#get-buckets-in-plan","text":"Using the buckets() you can get the Buckets in a Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const planBuckets = await graph.planner.plans.getById('planId').buckets();","title":"Get Buckets in Plan"},{"location":"graph/planner/#get-details-in-plan","text":"Using the details() you can get the details in a Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const planDetails = await graph.planner.plans.getById('planId').details();","title":"Get Details in Plan"},{"location":"graph/planner/#delete-plan","text":"Using the delete() you can get delete a Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const delPlan = await graph.planner.plans.getById('planId').delete('planEtag');","title":"Delete Plan"},{"location":"graph/planner/#update-plan","text":"Using the update() you can get update a Plan. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const updPlan = await graph.planner.plans.getById('planId').update({title: 'New Title', eTag: 'planEtag'});","title":"Update Plan"},{"location":"graph/planner/#get-task-by-id","text":"Using the planner.tasks.getById() you can get a specific Task. Planner.tasks is not an available endpoint, you need to get a specific Task. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const task = await graph.planner.tasks.getById('taskId')();","title":"Get Task by Id"},{"location":"graph/planner/#add-new-task","text":"Using the planner.tasks.add() you can create a new Task. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const newTask = await graph.planner.tasks.add('planId', 'title');","title":"Add new Task"},{"location":"graph/planner/#get-details-in-task","text":"Using the details() you can get the details in a Task. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const taskDetails = await graph.planner.tasks.getById('taskId').details();","title":"Get Details in Task"},{"location":"graph/planner/#delete-task","text":"Using the delete() you can get delete a Task. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const delTask = await graph.planner.tasks.getById('taskId').delete('taskEtag');","title":"Delete Task"},{"location":"graph/planner/#update-task","text":"Using the update() you can get update a Task. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const updTask = await graph.planner.tasks.getById('taskId').update({properties, eTag:'taskEtag'});","title":"Update Task"},{"location":"graph/planner/#get-buckets-by-id","text":"Using the planner.buckets.getById() you can get a specific Bucket. planner.buckets is not an available endpoint, you need to get a specific Bucket. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const bucket = await graph.planner.buckets.getById('bucketId')();","title":"Get Buckets by Id"},{"location":"graph/planner/#add-new-bucket","text":"Using the planner.buckets.add() you can create a new Bucket. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const newBucket = await graph.planner.buckets.add('name', 'planId');","title":"Add new Bucket"},{"location":"graph/planner/#update-bucket","text":"Using the update() you can get update a Bucket. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const updBucket = await graph.planner.buckets.getById('bucketId').update({name: \"Name\", eTag:'bucketEtag'});","title":"Update Bucket"},{"location":"graph/planner/#delete-bucket","text":"Using the delete() you can get delete a Bucket. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const delBucket = await graph.planner.buckets.getById('bucketId').delete(eTag:'bucketEtag');","title":"Delete Bucket"},{"location":"graph/planner/#get-bucket-tasks","text":"Using the tasks() you can get Tasks in a Bucket. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/planner\"; const graph = graphfi(...); const bucketTasks = await graph.planner.buckets.getById('bucketId').tasks();","title":"Get Bucket Tasks"},{"location":"graph/search/","text":"@pnp/graph/search \u00b6 The search module allows you to access the Microsoft Graph Search API. You can read full details of using the API, for library examples please see below. Call graph.query \u00b6 This example shows calling the search API via the query method of the root graph object. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/search\"; const graph = graphfi(...); const results = await graph.query({ entityTypes: [\"site\"], query: { queryString: \"test\" }, }); Note: This library allows you to pass multiple search requests to the query method as the value consumed by the server is an array, but it only a single requests works at this time. Eventually this may change and no updates will be required.","title":"search"},{"location":"graph/search/#pnpgraphsearch","text":"The search module allows you to access the Microsoft Graph Search API. You can read full details of using the API, for library examples please see below.","title":"@pnp/graph/search"},{"location":"graph/search/#call-graphquery","text":"This example shows calling the search API via the query method of the root graph object. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/search\"; const graph = graphfi(...); const results = await graph.query({ entityTypes: [\"site\"], query: { queryString: \"test\" }, }); Note: This library allows you to pass multiple search requests to the query method as the value consumed by the server is an array, but it only a single requests works at this time. Eventually this may change and no updates will be required.","title":"Call graph.query"},{"location":"graph/sites/","text":"@pnp/graph/sites \u00b6 The search module allows you to access the Microsoft Graph Sites API. Call graph.sites \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/sites\"; const graph = graphfi(...); const sitesInfo = await graph.sites(); Call graph.sites.getById \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/sites\"; const graph = graphfi(...); const siteInfo = await graph.sites.getById(\"{site identifier}\")(); Make additional calls \u00b6 We don't currently implement all of the available options in graph for sites, rather focusing on the sp library. While we do accept PRs to add functionality, you can also make calls by path: Get lists \u00b6 import { Site } from \"@pnp/graph/sites\"; const sites = graph.sites.getById(\"{site id}\"); const listsInfo = await Site(sites, \"lists\")(); Get list \u00b6 import { Site } from \"@pnp/graph/sites\"; const sites = graph.sites.getById(\"{site id}\"); const listInfo = await Site(sites, \"lists/{listid}\")(); Get list items \u00b6 import { Site } from \"@pnp/graph/sites\"; const sites = graph.sites.getById(\"{site id}\"); const users = await Site(sites, \"lists/{listid}/items\")(); Get File/Item version information \u00b6 import { Site } from \"@pnp/graph/sites\"; const sites = graph.sites.getById(\"{site id}\"); const users = await Site(sites, \"lists/{listid}/items/{item id}/versions\")();","title":"sites"},{"location":"graph/sites/#pnpgraphsites","text":"The search module allows you to access the Microsoft Graph Sites API.","title":"@pnp/graph/sites"},{"location":"graph/sites/#call-graphsites","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/sites\"; const graph = graphfi(...); const sitesInfo = await graph.sites();","title":"Call graph.sites"},{"location":"graph/sites/#call-graphsitesgetbyid","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/sites\"; const graph = graphfi(...); const siteInfo = await graph.sites.getById(\"{site identifier}\")();","title":"Call graph.sites.getById"},{"location":"graph/sites/#make-additional-calls","text":"We don't currently implement all of the available options in graph for sites, rather focusing on the sp library. While we do accept PRs to add functionality, you can also make calls by path:","title":"Make additional calls"},{"location":"graph/sites/#get-lists","text":"import { Site } from \"@pnp/graph/sites\"; const sites = graph.sites.getById(\"{site id}\"); const listsInfo = await Site(sites, \"lists\")();","title":"Get lists"},{"location":"graph/sites/#get-list","text":"import { Site } from \"@pnp/graph/sites\"; const sites = graph.sites.getById(\"{site id}\"); const listInfo = await Site(sites, \"lists/{listid}\")();","title":"Get list"},{"location":"graph/sites/#get-list-items","text":"import { Site } from \"@pnp/graph/sites\"; const sites = graph.sites.getById(\"{site id}\"); const users = await Site(sites, \"lists/{listid}/items\")();","title":"Get list items"},{"location":"graph/sites/#get-fileitem-version-information","text":"import { Site } from \"@pnp/graph/sites\"; const sites = graph.sites.getById(\"{site id}\"); const users = await Site(sites, \"lists/{listid}/items/{item id}/versions\")();","title":"Get File/Item version information"},{"location":"graph/subscriptions/","text":"@pnp/graph/subscriptions \u00b6 The ability to manage subscriptions is a capability introduced in version 1.2.9 of @pnp/graph. A subscription allows a client app to receive notifications about changes to data in Microsoft graph. Currently, subscriptions are enabled for the following resources: Mail, events, and contacts from Outlook. Conversations from Office Groups. Drive root items from OneDrive. Users and Groups from Azure Active Directory. Alerts from the Microsoft Graph Security API. Get all of the Subscriptions \u00b6 Using the subscriptions(). If successful this method returns a 200 OK response code and a list of subscription objects in the response body. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/subscriptions\"; const graph = graphfi(...); const subscriptions = await graph.subscriptions(); Create a new Subscription \u00b6 Using the subscriptions.add(). Creating a subscription requires read scope to the resource. For example, to get notifications messages, your app needs the Mail.Read permission. To learn more about the scopes visit this url. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/subscriptions\"; const graph = graphfi(...); const addedSubscription = await graph.subscriptions.add(\"created,updated\", \"https://webhook.azurewebsites.net/api/send/myNotifyClient\", \"me/mailFolders('Inbox')/messages\", \"2019-11-20T18:23:45.9356913Z\"); Get Subscription by Id \u00b6 Using the subscriptions.getById() you can get one of the subscriptions import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/subscriptions\"; const graph = graphfi(...); const subscription = await graph.subscriptions.getById('subscriptionId')(); Delete a Subscription \u00b6 Using the subscriptions.getById().delete() you can remove one of the Subscriptions import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/subscriptions\"; const graph = graphfi(...); const delSubscription = await graph.subscriptions.getById('subscriptionId').delete(); Update a Subscription \u00b6 Using the subscriptions.getById().update() you can update one of the Subscriptions import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/subscriptions\"; const graph = graphfi(...); const updSubscription = await graph.subscriptions.getById('subscriptionId').update({changeType: \"created,updated,deleted\" });","title":"subscriptions"},{"location":"graph/subscriptions/#pnpgraphsubscriptions","text":"The ability to manage subscriptions is a capability introduced in version 1.2.9 of @pnp/graph. A subscription allows a client app to receive notifications about changes to data in Microsoft graph. Currently, subscriptions are enabled for the following resources: Mail, events, and contacts from Outlook. Conversations from Office Groups. Drive root items from OneDrive. Users and Groups from Azure Active Directory. Alerts from the Microsoft Graph Security API.","title":"@pnp/graph/subscriptions"},{"location":"graph/subscriptions/#get-all-of-the-subscriptions","text":"Using the subscriptions(). If successful this method returns a 200 OK response code and a list of subscription objects in the response body. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/subscriptions\"; const graph = graphfi(...); const subscriptions = await graph.subscriptions();","title":"Get all of the Subscriptions"},{"location":"graph/subscriptions/#create-a-new-subscription","text":"Using the subscriptions.add(). Creating a subscription requires read scope to the resource. For example, to get notifications messages, your app needs the Mail.Read permission. To learn more about the scopes visit this url. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/subscriptions\"; const graph = graphfi(...); const addedSubscription = await graph.subscriptions.add(\"created,updated\", \"https://webhook.azurewebsites.net/api/send/myNotifyClient\", \"me/mailFolders('Inbox')/messages\", \"2019-11-20T18:23:45.9356913Z\");","title":"Create a new Subscription"},{"location":"graph/subscriptions/#get-subscription-by-id","text":"Using the subscriptions.getById() you can get one of the subscriptions import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/subscriptions\"; const graph = graphfi(...); const subscription = await graph.subscriptions.getById('subscriptionId')();","title":"Get Subscription by Id"},{"location":"graph/subscriptions/#delete-a-subscription","text":"Using the subscriptions.getById().delete() you can remove one of the Subscriptions import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/subscriptions\"; const graph = graphfi(...); const delSubscription = await graph.subscriptions.getById('subscriptionId').delete();","title":"Delete a Subscription"},{"location":"graph/subscriptions/#update-a-subscription","text":"Using the subscriptions.getById().update() you can update one of the Subscriptions import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/subscriptions\"; const graph = graphfi(...); const updSubscription = await graph.subscriptions.getById('subscriptionId').update({changeType: \"created,updated,deleted\" });","title":"Update a Subscription"},{"location":"graph/teams/","text":"@pnp/graph/teams \u00b6 The ability to manage Team is a capability introduced in the 1.2.7 of @pnp/graph. Through the methods described you can add, update and delete items in Teams. Teams the user is a member of \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const joinedTeams = await graph.users.getById('99dc1039-eb80-43b1-a09e-250d50a80b26').joinedTeams(); const myJoinedTeams = await graph.me.joinedTeams(); Get Teams by Id \u00b6 Using the teams.getById() you can get a specific Team. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const team = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528')(); Create new Team/Group - Method #1 \u00b6 The first way to create a new Team and corresponding Group is to first create the group and then create the team. Follow the example in Groups to create the group and get the GroupID. Then make a call to create the team from the group. Create a Team via a specific group \u00b6 Here we get the group via id and use createTeam import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); const createdTeam = await graph.groups.getById('679c8ff4-f07d-40de-b02b-60ec332472dd').createTeam({ \"memberSettings\": { \"allowCreateUpdateChannels\": true }, \"messagingSettings\": { \"allowUserEditMessages\": true, \"allowUserDeleteMessages\": true }, \"funSettings\": { \"allowGiphy\": true, \"giphyContentRating\": \"strict\" }}); Create new Team/Group - Method #2 \u00b6 The second way to create a new Team and corresponding Group is to do so in one call. This can be done by using the createTeam method. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const team = { \"template@odata.bind\": \"https://graph.microsoft.com/v1.0/teamsTemplates('standard')\", \"displayName\": \"PnPJS Test Team\", \"description\": \"PnPJS Test Team\u2019s Description\", \"members\": [ { \"@odata.type\": \"#microsoft.graph.aadUserConversationMember\", \"roles\": [\"owner\"], \"user@odata.bind\": \"https://graph.microsoft.com/v1.0/users('{owners user id}')\", }, ], }; const createdTeam: ITeamCreateResultAsync = await graph.teams.create(team); //To check the status of the team creation, call getOperationById for the newly created team. const createdTeamStatus = await graph.teams.getById(createdTeam.teamId).getOperationById(createdTeam.operationId); Clone a Team \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const clonedTeam = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').cloneTeam( 'Cloned','description','apps,tabs,settings,channels,members','public'); Get Teams Async Operation \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const clonedTeam = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').cloneTeam( 'Cloned','description','apps,tabs,settings,channels,members','public'); const clonedTeamStatus = await graph.teams.getById(clonedTeam.teamId).getOperationById(clonedTeam.operationId); Archive a Team \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const archived = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').archive(); Unarchive a Team \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const archived = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').unarchive(); Get all channels of a Team \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const channels = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').channels(); Get primary channel \u00b6 Using the teams.getById() you can get a specific Team. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const channel = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').primaryChannel(); Get channel by Id \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const channel = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').channels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype')(); Create a new Channel \u00b6 import { graphfi } from \"@pnp/graph\"; const graph = graphfi(...); const newChannel = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').channels.create('New Channel', 'Description'); Get installed Apps \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const installedApps = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').installedApps(); Add an App \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const addedApp = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').installedApps.add('https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/12345678-9abc-def0-123456789a'); Remove an App \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const removedApp = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').installedApps.delete(); Get Tabs from a Channel \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const tabs = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528'). channels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype').tabs(); Get Tab by Id \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const tab = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528'). channels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype').tabs.getById('Id')(); Add a new Tab \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const newTab = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528'). channels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype').tabs.add('Tab','https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/12345678-9abc-def0-123456789a',<TabsConfiguration>{}); Team Membership \u00b6 Get the members and/or owners of a group. See Groups","title":"teams"},{"location":"graph/teams/#pnpgraphteams","text":"The ability to manage Team is a capability introduced in the 1.2.7 of @pnp/graph. Through the methods described you can add, update and delete items in Teams.","title":"@pnp/graph/teams"},{"location":"graph/teams/#teams-the-user-is-a-member-of","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const joinedTeams = await graph.users.getById('99dc1039-eb80-43b1-a09e-250d50a80b26').joinedTeams(); const myJoinedTeams = await graph.me.joinedTeams();","title":"Teams the user is a member of"},{"location":"graph/teams/#get-teams-by-id","text":"Using the teams.getById() you can get a specific Team. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const team = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528')();","title":"Get Teams by Id"},{"location":"graph/teams/#create-new-teamgroup-method-1","text":"The first way to create a new Team and corresponding Group is to first create the group and then create the team. Follow the example in Groups to create the group and get the GroupID. Then make a call to create the team from the group.","title":"Create new Team/Group - Method #1"},{"location":"graph/teams/#create-a-team-via-a-specific-group","text":"Here we get the group via id and use createTeam import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; import \"@pnp/graph/groups\"; const graph = graphfi(...); const createdTeam = await graph.groups.getById('679c8ff4-f07d-40de-b02b-60ec332472dd').createTeam({ \"memberSettings\": { \"allowCreateUpdateChannels\": true }, \"messagingSettings\": { \"allowUserEditMessages\": true, \"allowUserDeleteMessages\": true }, \"funSettings\": { \"allowGiphy\": true, \"giphyContentRating\": \"strict\" }});","title":"Create a Team via a specific group"},{"location":"graph/teams/#create-new-teamgroup-method-2","text":"The second way to create a new Team and corresponding Group is to do so in one call. This can be done by using the createTeam method. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const team = { \"template@odata.bind\": \"https://graph.microsoft.com/v1.0/teamsTemplates('standard')\", \"displayName\": \"PnPJS Test Team\", \"description\": \"PnPJS Test Team\u2019s Description\", \"members\": [ { \"@odata.type\": \"#microsoft.graph.aadUserConversationMember\", \"roles\": [\"owner\"], \"user@odata.bind\": \"https://graph.microsoft.com/v1.0/users('{owners user id}')\", }, ], }; const createdTeam: ITeamCreateResultAsync = await graph.teams.create(team); //To check the status of the team creation, call getOperationById for the newly created team. const createdTeamStatus = await graph.teams.getById(createdTeam.teamId).getOperationById(createdTeam.operationId);","title":"Create new Team/Group - Method #2"},{"location":"graph/teams/#clone-a-team","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const clonedTeam = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').cloneTeam( 'Cloned','description','apps,tabs,settings,channels,members','public');","title":"Clone a Team"},{"location":"graph/teams/#get-teams-async-operation","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const clonedTeam = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').cloneTeam( 'Cloned','description','apps,tabs,settings,channels,members','public'); const clonedTeamStatus = await graph.teams.getById(clonedTeam.teamId).getOperationById(clonedTeam.operationId);","title":"Get Teams Async Operation"},{"location":"graph/teams/#archive-a-team","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const archived = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').archive();","title":"Archive a Team"},{"location":"graph/teams/#unarchive-a-team","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const archived = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').unarchive();","title":"Unarchive a Team"},{"location":"graph/teams/#get-all-channels-of-a-team","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const channels = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').channels();","title":"Get all channels of a Team"},{"location":"graph/teams/#get-primary-channel","text":"Using the teams.getById() you can get a specific Team. import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const channel = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').primaryChannel();","title":"Get primary channel"},{"location":"graph/teams/#get-channel-by-id","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const channel = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').channels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype')();","title":"Get channel by Id"},{"location":"graph/teams/#create-a-new-channel","text":"import { graphfi } from \"@pnp/graph\"; const graph = graphfi(...); const newChannel = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').channels.create('New Channel', 'Description');","title":"Create a new Channel"},{"location":"graph/teams/#get-installed-apps","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const installedApps = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').installedApps();","title":"Get installed Apps"},{"location":"graph/teams/#add-an-app","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const addedApp = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').installedApps.add('https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/12345678-9abc-def0-123456789a');","title":"Add an App"},{"location":"graph/teams/#remove-an-app","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const removedApp = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528').installedApps.delete();","title":"Remove an App"},{"location":"graph/teams/#get-tabs-from-a-channel","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const tabs = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528'). channels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype').tabs();","title":"Get Tabs from a Channel"},{"location":"graph/teams/#get-tab-by-id","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const tab = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528'). channels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype').tabs.getById('Id')();","title":"Get Tab by Id"},{"location":"graph/teams/#add-a-new-tab","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/teams\"; const graph = graphfi(...); const newTab = await graph.teams.getById('3531f3fb-f9ee-4f43-982a-6c90d8226528'). channels.getById('19:65723d632b384ca89c81115c281428a3@thread.skype').tabs.add('Tab','https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/12345678-9abc-def0-123456789a',<TabsConfiguration>{});","title":"Add a new Tab"},{"location":"graph/teams/#team-membership","text":"Get the members and/or owners of a group. See Groups","title":"Team Membership"},{"location":"graph/users/","text":"@pnp/graph/users \u00b6 Users are Azure Active Directory objects representing users in the organizations. They represent the single identity for a person across Microsoft 365 services. You can learn more about Microsoft Graph users by reading the Official Microsoft Graph Documentation . IUsers, IUser, IPeople \u00b6 Current User \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const currentUser = await graph.me(); Get All Users in the Organization \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const allUsers = await graph.users(); Get a User by email address (or user id) \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const matchingUser = await graph.users.getById('jane@contoso.com')(); User Properties \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); await graph.me.memberOf(); await graph.me.transitiveMemberOf(); Update Current User \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); await graph.me.update({ displayName: 'John Doe' }); People \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const people = await graph.me.people(); // get the top 3 people const people = await graph.me.people.top(3)(); People \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const people = await graph.me.people(); // get the top 3 people const people = await graph.me.people.top(3)(); Manager \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const manager = await graph.me.manager(); Direct Reports \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const reports = await graph.me.directReports(); Photo \u00b6 import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/photos\"; const graph = graphfi(...); const currentUser = await graph.me.photo(); const specificUser = await graph.users.getById('jane@contoso.com').photo(); User Photo Operations \u00b6 See Photos User Presence Operation \u00b6 See Cloud Communications","title":"users"},{"location":"graph/users/#pnpgraphusers","text":"Users are Azure Active Directory objects representing users in the organizations. They represent the single identity for a person across Microsoft 365 services. You can learn more about Microsoft Graph users by reading the Official Microsoft Graph Documentation .","title":"@pnp/graph/users"},{"location":"graph/users/#iusers-iuser-ipeople","text":"","title":"IUsers, IUser, IPeople"},{"location":"graph/users/#current-user","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const currentUser = await graph.me();","title":"Current User"},{"location":"graph/users/#get-all-users-in-the-organization","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const allUsers = await graph.users();","title":"Get All Users in the Organization"},{"location":"graph/users/#get-a-user-by-email-address-or-user-id","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const matchingUser = await graph.users.getById('jane@contoso.com')();","title":"Get a User by email address (or user id)"},{"location":"graph/users/#user-properties","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); await graph.me.memberOf(); await graph.me.transitiveMemberOf();","title":"User Properties"},{"location":"graph/users/#update-current-user","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); await graph.me.update({ displayName: 'John Doe' });","title":"Update Current User"},{"location":"graph/users/#people","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const people = await graph.me.people(); // get the top 3 people const people = await graph.me.people.top(3)();","title":"People"},{"location":"graph/users/#people_1","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const people = await graph.me.people(); // get the top 3 people const people = await graph.me.people.top(3)();","title":"People"},{"location":"graph/users/#manager","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const manager = await graph.me.manager();","title":"Manager"},{"location":"graph/users/#direct-reports","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; const graph = graphfi(...); const reports = await graph.me.directReports();","title":"Direct Reports"},{"location":"graph/users/#photo","text":"import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users\"; import \"@pnp/graph/photos\"; const graph = graphfi(...); const currentUser = await graph.me.photo(); const specificUser = await graph.users.getById('jane@contoso.com').photo();","title":"Photo"},{"location":"graph/users/#user-photo-operations","text":"See Photos","title":"User Photo Operations"},{"location":"graph/users/#user-presence-operation","text":"See Cloud Communications","title":"User Presence Operation"},{"location":"logging/","text":"@pnp/logging \u00b6 The logging module provides light weight subscribable and extensible logging framework which is used internally and available for use in your projects. This article outlines how to setup logging and use the various loggers. Getting Started \u00b6 Install the logging module, it has no other dependencies npm install @pnp/logging --save Understanding the Logging Framework \u00b6 The logging framework is centered on the Logger class to which any number of listeners can be subscribed. Each of these listeners will receive each of the messages logged. Each listener must implement the ILogListener interface, shown below. There is only one method to implement and it takes an instance of the LogEntry interface as a parameter. /** * Interface that defines a log listener * */ export interface ILogListener { /** * Any associated data that a given logging listener may choose to log or ignore * * @param entry The information to be logged */ log(entry: ILogEntry): void; } /** * Interface that defines a log entry * */ export interface ILogEntry { /** * The main message to be logged */ message: string; /** * The level of information this message represents */ level: LogLevel; /** * Any associated data that a given logging listener may choose to log or ignore */ data?: any; } Log Levels \u00b6 export const enum LogLevel { Verbose = 0, Info = 1, Warning = 2, Error = 3, Off = 99, } Writing to the Logger \u00b6 To write information to a logger you can use either write, writeJSON, or log. import { Logger, LogLevel } from \"@pnp/logging\"; // write logs a simple string as the message value of the LogEntry Logger.write(\"This is logging a simple string\"); // optionally passing a level, default level is Verbose Logger.write(\"This is logging a simple string\", LogLevel.Error); // this will convert the object to a string using JSON.stringify and set the message with the result Logger.writeJSON({ name: \"value\", name2: \"value2\"}); // optionally passing a level, default level is Verbose Logger.writeJSON({ name: \"value\", name2: \"value2\"}, LogLevel.Warning); // specify the entire LogEntry interface using log Logger.log({ data: { name: \"value\", name2: \"value2\"}, level: LogLevel.Warning, message: \"This is my message\" }); Log an error \u00b6 There exists a shortcut method to log an error to the Logger. This will log an entry to the subscribed loggers where the data property will be the Error instance passed in, the level will be 'Error', and the message will be the Error instance's message property. const e = Error(\"An Error\"); Logger.error(e); Subscribing a Listener \u00b6 By default no listeners are subscribed, so if you would like to get logging information you need to subscribe at least one listener. This is done as shown below by importing the Logger and your listener(s) of choice. Here we are using the provided ConsoleListener. We are also setting the active log level, which controls the level of logging that will be output. Be aware that Verbose produces a substantial amount of data about each request. import { Logger, ConsoleListener, LogLevel } from \"@pnp/logging\"; // subscribe a listener Logger.subscribe(new ConsoleListener()); // set the active log level Logger.activeLogLevel = LogLevel.Info; Available Listeners \u00b6 There are two listeners included in the library, ConsoleListener and FunctionListener. ConsoleListener \u00b6 This listener outputs information to the console and works in Node as well as within browsers. It can be used without settings and writes to the appropriate console method based on message level. For example a LogEntry with level Warning will be written to console.warn. Basic usage is shown in the example above. Configuration Options \u00b6 Although ConsoleListener can be used without configuration, there are some additional options available to you. ConsoleListener supports adding a prefix to every output (helpful for filtering console messages) and specifying text color for messages (including by LogLevel). Using a Prefix \u00b6 To add a prefix to all output, supply a string in the constructor: import { Logger, ConsoleListener, LogLevel } from \"@pnp/logging\"; const LOG_SOURCE: string = 'MyAwesomeWebPart'; Logger.subscribe(new ConsoleListener(LOG_SOURCE)); Logger.activeLogLevel = LogLevel.Info; With the above configuration, Logger.write(\"My special message\"); will be output to the console as: MyAwesomeWebPart - My special message Customizing Text Color \u00b6 You can also specify text color for your messages by supplying an IConsoleListenerColors object. You can simply specify color to set the default color for all logging levels or you can set one or more logging level specific text colors (if you only want to set color for a specific logging level(s), leave color out and all other log levels will use the default color). Colors can be specified the same way color values are specified in CSS (named colors, hex values, rgb, rgba, hsl, hsla, etc.): import { Logger, ConsoleListener, LogLevel } from \"@pnp/logging\"; const LOG_SOURCE: string = 'MyAwesomeWebPart'; Logger.subscribe(new ConsoleListener(LOG_SOURCE, {color:'#0b6a0b',warningColor:'magenta'})); Logger.activeLogLevel = LogLevel.Info; With the above configuration: Logger.write(\"My special message\"); Logger.write(\"A warning!\", LogLevel.Warning); Will result in messages that look like this: Color options: color : Default text color for all logging levels unless they're specified verboseColor : Text color to use for messages with LogLevel.Verbose infoColor : Text color to use for messages with LogLevel.Info warningColor : Text color to use for messages with LogLevel.Warning errorColor : Text color to use for messages with LogLevel.Error To set colors without a prefix, specify either undefined or an empty string for the first parameter: Logger.subscribe(new ConsoleListener(undefined, {color:'purple'})); FunctionListener \u00b6 The FunctionListener allows you to wrap any functionality by creating a function that takes a LogEntry as its single argument. This produces the same result as implementing the LogListener interface, but is useful if you already have a logging method or framework to which you want to pass the messages. import { Logger, FunctionListener, ILogEntry } from \"@pnp/logging\"; let listener = new FunctionListener((entry: ILogEntry) => { // pass all logging data to an existing framework MyExistingCompanyLoggingFramework.log(entry.message); }); Logger.subscribe(listener); Create a Custom Listener \u00b6 If desirable for your project you can create a custom listener to perform any logging action you would like. This is done by implementing the ILogListener interface. import { Logger, ILogListener, ILogEntry } from \"@pnp/logging\"; class MyListener implements ILogListener { log(entry: ILogEntry): void { // here you would do something with the entry } } Logger.subscribe(new MyListener()); Logging Behavior \u00b6 To allow seamless logging with v3 we have introduced the PnPLogging behavior. It takes a single augument representing the log level of that behavior , allowing you to be very selective in what logging you want to get. As well the log level applied here ignores any global level set with activeLogLevel on Logger. import { LogLevel, PnPLogging, Logger, ConsoleListener } from \"@pnp/logging\"; import { spfi, SPFx } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; // subscribe a listener Logger.subscribe(new ConsoleListener()); // at the root we only want to log errors, which will be sent to all subscribed loggers on Logger const sp = spfi().using(SPFx(this.context), PnPLogging(LogLevel.Error)); const list = sp.web.lists.getByTitle(\"My List\"); // use verbose logging with this particular list because you are trying to debug something list.using(PnPLogging(LogLevel.Verbose)); const listData = await list();","title":"logging"},{"location":"logging/#pnplogging","text":"The logging module provides light weight subscribable and extensible logging framework which is used internally and available for use in your projects. This article outlines how to setup logging and use the various loggers.","title":"@pnp/logging"},{"location":"logging/#getting-started","text":"Install the logging module, it has no other dependencies npm install @pnp/logging --save","title":"Getting Started"},{"location":"logging/#understanding-the-logging-framework","text":"The logging framework is centered on the Logger class to which any number of listeners can be subscribed. Each of these listeners will receive each of the messages logged. Each listener must implement the ILogListener interface, shown below. There is only one method to implement and it takes an instance of the LogEntry interface as a parameter. /** * Interface that defines a log listener * */ export interface ILogListener { /** * Any associated data that a given logging listener may choose to log or ignore * * @param entry The information to be logged */ log(entry: ILogEntry): void; } /** * Interface that defines a log entry * */ export interface ILogEntry { /** * The main message to be logged */ message: string; /** * The level of information this message represents */ level: LogLevel; /** * Any associated data that a given logging listener may choose to log or ignore */ data?: any; }","title":"Understanding the Logging Framework"},{"location":"logging/#log-levels","text":"export const enum LogLevel { Verbose = 0, Info = 1, Warning = 2, Error = 3, Off = 99, }","title":"Log Levels"},{"location":"logging/#writing-to-the-logger","text":"To write information to a logger you can use either write, writeJSON, or log. import { Logger, LogLevel } from \"@pnp/logging\"; // write logs a simple string as the message value of the LogEntry Logger.write(\"This is logging a simple string\"); // optionally passing a level, default level is Verbose Logger.write(\"This is logging a simple string\", LogLevel.Error); // this will convert the object to a string using JSON.stringify and set the message with the result Logger.writeJSON({ name: \"value\", name2: \"value2\"}); // optionally passing a level, default level is Verbose Logger.writeJSON({ name: \"value\", name2: \"value2\"}, LogLevel.Warning); // specify the entire LogEntry interface using log Logger.log({ data: { name: \"value\", name2: \"value2\"}, level: LogLevel.Warning, message: \"This is my message\" });","title":"Writing to the Logger"},{"location":"logging/#log-an-error","text":"There exists a shortcut method to log an error to the Logger. This will log an entry to the subscribed loggers where the data property will be the Error instance passed in, the level will be 'Error', and the message will be the Error instance's message property. const e = Error(\"An Error\"); Logger.error(e);","title":"Log an error"},{"location":"logging/#subscribing-a-listener","text":"By default no listeners are subscribed, so if you would like to get logging information you need to subscribe at least one listener. This is done as shown below by importing the Logger and your listener(s) of choice. Here we are using the provided ConsoleListener. We are also setting the active log level, which controls the level of logging that will be output. Be aware that Verbose produces a substantial amount of data about each request. import { Logger, ConsoleListener, LogLevel } from \"@pnp/logging\"; // subscribe a listener Logger.subscribe(new ConsoleListener()); // set the active log level Logger.activeLogLevel = LogLevel.Info;","title":"Subscribing a Listener"},{"location":"logging/#available-listeners","text":"There are two listeners included in the library, ConsoleListener and FunctionListener.","title":"Available Listeners"},{"location":"logging/#consolelistener","text":"This listener outputs information to the console and works in Node as well as within browsers. It can be used without settings and writes to the appropriate console method based on message level. For example a LogEntry with level Warning will be written to console.warn. Basic usage is shown in the example above.","title":"ConsoleListener"},{"location":"logging/#configuration-options","text":"Although ConsoleListener can be used without configuration, there are some additional options available to you. ConsoleListener supports adding a prefix to every output (helpful for filtering console messages) and specifying text color for messages (including by LogLevel).","title":"Configuration Options"},{"location":"logging/#using-a-prefix","text":"To add a prefix to all output, supply a string in the constructor: import { Logger, ConsoleListener, LogLevel } from \"@pnp/logging\"; const LOG_SOURCE: string = 'MyAwesomeWebPart'; Logger.subscribe(new ConsoleListener(LOG_SOURCE)); Logger.activeLogLevel = LogLevel.Info; With the above configuration, Logger.write(\"My special message\"); will be output to the console as: MyAwesomeWebPart - My special message","title":"Using a Prefix"},{"location":"logging/#customizing-text-color","text":"You can also specify text color for your messages by supplying an IConsoleListenerColors object. You can simply specify color to set the default color for all logging levels or you can set one or more logging level specific text colors (if you only want to set color for a specific logging level(s), leave color out and all other log levels will use the default color). Colors can be specified the same way color values are specified in CSS (named colors, hex values, rgb, rgba, hsl, hsla, etc.): import { Logger, ConsoleListener, LogLevel } from \"@pnp/logging\"; const LOG_SOURCE: string = 'MyAwesomeWebPart'; Logger.subscribe(new ConsoleListener(LOG_SOURCE, {color:'#0b6a0b',warningColor:'magenta'})); Logger.activeLogLevel = LogLevel.Info; With the above configuration: Logger.write(\"My special message\"); Logger.write(\"A warning!\", LogLevel.Warning); Will result in messages that look like this: Color options: color : Default text color for all logging levels unless they're specified verboseColor : Text color to use for messages with LogLevel.Verbose infoColor : Text color to use for messages with LogLevel.Info warningColor : Text color to use for messages with LogLevel.Warning errorColor : Text color to use for messages with LogLevel.Error To set colors without a prefix, specify either undefined or an empty string for the first parameter: Logger.subscribe(new ConsoleListener(undefined, {color:'purple'}));","title":"Customizing Text Color"},{"location":"logging/#functionlistener","text":"The FunctionListener allows you to wrap any functionality by creating a function that takes a LogEntry as its single argument. This produces the same result as implementing the LogListener interface, but is useful if you already have a logging method or framework to which you want to pass the messages. import { Logger, FunctionListener, ILogEntry } from \"@pnp/logging\"; let listener = new FunctionListener((entry: ILogEntry) => { // pass all logging data to an existing framework MyExistingCompanyLoggingFramework.log(entry.message); }); Logger.subscribe(listener);","title":"FunctionListener"},{"location":"logging/#create-a-custom-listener","text":"If desirable for your project you can create a custom listener to perform any logging action you would like. This is done by implementing the ILogListener interface. import { Logger, ILogListener, ILogEntry } from \"@pnp/logging\"; class MyListener implements ILogListener { log(entry: ILogEntry): void { // here you would do something with the entry } } Logger.subscribe(new MyListener());","title":"Create a Custom Listener"},{"location":"logging/#logging-behavior","text":"To allow seamless logging with v3 we have introduced the PnPLogging behavior. It takes a single augument representing the log level of that behavior , allowing you to be very selective in what logging you want to get. As well the log level applied here ignores any global level set with activeLogLevel on Logger. import { LogLevel, PnPLogging, Logger, ConsoleListener } from \"@pnp/logging\"; import { spfi, SPFx } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; // subscribe a listener Logger.subscribe(new ConsoleListener()); // at the root we only want to log errors, which will be sent to all subscribed loggers on Logger const sp = spfi().using(SPFx(this.context), PnPLogging(LogLevel.Error)); const list = sp.web.lists.getByTitle(\"My List\"); // use verbose logging with this particular list because you are trying to debug something list.using(PnPLogging(LogLevel.Verbose)); const listData = await list();","title":"Logging Behavior"},{"location":"msaljsclient/","text":"@pnp/msaljsclient \u00b6 This library provides a thin wrapper around the msal library to make it easy to integrate MSAL authentication in the browser. You will first need to install the package: npm install @pnp/msaljsclient --save The configuration and authParams import { spfi, SPBrowser } from \"@pnp/sp\"; import { MSAL } from \"@pnp/msaljsclient\"; import \"@pnp/sp/webs\"; const configuation = { auth: { authority: \"https://login.microsoftonline.com/common\", clientId: \"{client id}\", } }; const authParams = { scopes: [\"https://{tenant}.sharepoint.com/.default\"], }; const sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPBrowser(), MSAL(configuration, authParams)); const webData = await sp.web(); Please see more scenarios in the authentication article .","title":"msaljsclient"},{"location":"msaljsclient/#pnpmsaljsclient","text":"This library provides a thin wrapper around the msal library to make it easy to integrate MSAL authentication in the browser. You will first need to install the package: npm install @pnp/msaljsclient --save The configuration and authParams import { spfi, SPBrowser } from \"@pnp/sp\"; import { MSAL } from \"@pnp/msaljsclient\"; import \"@pnp/sp/webs\"; const configuation = { auth: { authority: \"https://login.microsoftonline.com/common\", clientId: \"{client id}\", } }; const authParams = { scopes: [\"https://{tenant}.sharepoint.com/.default\"], }; const sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPBrowser(), MSAL(configuration, authParams)); const webData = await sp.web(); Please see more scenarios in the authentication article .","title":"@pnp/msaljsclient"},{"location":"news/2020-year-in-review/","text":"2020 Year End Report \u00b6 Welcome to our first year in review report for PnPjs. This year has marked usage milestones, seen more contributors than ever, and expanded the core maintainers team. But none of this would be possible without everyones support and participation - so we start by saying Thank You! We deeply appreciate everyone that has used, helped us grow, and improved the library over the last year. This year we introduced MSAL clients for node and browser, improved our testing/local development plumbing, and updated the libraries to work with the node 15 module resolution rules. We fixed 43 reported bugs, answered 131 questions, and made 55 suggested enhancements to the library - all driven by feedback from users and the community. Planned for release in January 2021 we also undertook the work to enable isolated runtimes, a long requested feature. This allows you to operate on multiple independently configured \"roots\" such as \"sp\" or \"graph\" from the same application. Previously the library was configured globally, so this opens new possibilities for both client and server side scenarios. Finally we made many tooling and project improvements such as moving to GitHub actions, updating the tests to use MSAL, and exploring ways to enhance the developer experience. Usage \u00b6 In 2020 we tracked steady month/month growth in raw usage measured by requests as well as in the number of tenants deploying the library. Starting the year we were used in 14605 tenants and by December that number grew to 21,227. These tenants generated 6.1 billion requests to the service in January growing to 9.2 billion by December, peaking at 10.1 billion requests in November. 1) There was a data glitch in October so the numbers do not fully represent usage. 2) These numbers only include public cloud SPO usage, true usage is higher than we can track due to on-premesis and gov/sovereign clouds Releases \u00b6 We continued our monthly release cadence as it represents a good pace for addressing issues while not expecting folks to update too often and keeping each update to a reasonable size. All changes can be tracked in our change log , updated with each release. You can check our scheduled releases through project milestones , understanding there are occasionally delays. Monthly releases allows us to ensure bugs do not linger and we continually improve and expand the capabilities of the libraries. NPM Package download statistics (@pnp/sp): \u00b6 Month Count * Month Count January 100,686 * July 36,805 February 34,437 * August 38,897 March 34,574 * September 45,968 April 32,436 * October 46,655 May 34,482 * November 45,511 June 34,408 * December 58,977 Grand Total 543,836 With 2020 our total all time downloads of @pnp/sp is now at: 949,638 Stats from https://npm-stat.com/ Future Plans \u00b6 Looking to the future we will continue to actively grow and improve v2 of the library, guided by feedback and reported issues. Additionally, we are beginning to discuss v3 and doing initial planning and prototyping. The v3 work will continue through 2021 with no currently set release date, though we will keep everyone up to date. Additionally in 2021 there will be a general focus on improving not just the code but our tooling, build pipeline, and library contributor experience. We will also look at automatic canary releases with each merge, and other improvements. New Lead Maintainer \u00b6 With the close of 2020 we are very excited to announce a new lead maintainer for PnPjs, Julie Turner ! Julie brings deep expertise with SharePoint Framework, TypeScript, and SharePoint development to the team, coupled with dedication and care in the work. Over the last year she has gotten more involved with handling releases, responding to issues, and helping to keep the code updated and clean. We are very lucky to have her working on the project and look forward to seeing her lead the growth and direction for years to come. Contributors \u00b6 As always we have abundant thanks and appreciation for your contributors. Taking your time to help improve PnPjs for the community is massive and valuable to ensure our sustainability. Thank you for all your help in 2020! If you are interested in becoming a contributor check out our guide on ways to get started. Sponsors \u00b6 We want to thank our sponsors for their support in 2020! This year we put the money towards helping offset the cost and shipping of hoodies to contributors and sponsors. Your continued generosity makes a big difference in our ability to recognize and reward the folks building PnPjs. Thank You Closing \u00b6 In closing we want say Thank You to everyone who uses, contributes to, and participates in PnPjs and the SharePoint Patterns and Practices program. Wishing you the very best for 2021, The PnPjs Team","title":"2020"},{"location":"news/2020-year-in-review/#2020-year-end-report","text":"Welcome to our first year in review report for PnPjs. This year has marked usage milestones, seen more contributors than ever, and expanded the core maintainers team. But none of this would be possible without everyones support and participation - so we start by saying Thank You! We deeply appreciate everyone that has used, helped us grow, and improved the library over the last year. This year we introduced MSAL clients for node and browser, improved our testing/local development plumbing, and updated the libraries to work with the node 15 module resolution rules. We fixed 43 reported bugs, answered 131 questions, and made 55 suggested enhancements to the library - all driven by feedback from users and the community. Planned for release in January 2021 we also undertook the work to enable isolated runtimes, a long requested feature. This allows you to operate on multiple independently configured \"roots\" such as \"sp\" or \"graph\" from the same application. Previously the library was configured globally, so this opens new possibilities for both client and server side scenarios. Finally we made many tooling and project improvements such as moving to GitHub actions, updating the tests to use MSAL, and exploring ways to enhance the developer experience.","title":"2020 Year End Report"},{"location":"news/2020-year-in-review/#usage","text":"In 2020 we tracked steady month/month growth in raw usage measured by requests as well as in the number of tenants deploying the library. Starting the year we were used in 14605 tenants and by December that number grew to 21,227. These tenants generated 6.1 billion requests to the service in January growing to 9.2 billion by December, peaking at 10.1 billion requests in November. 1) There was a data glitch in October so the numbers do not fully represent usage. 2) These numbers only include public cloud SPO usage, true usage is higher than we can track due to on-premesis and gov/sovereign clouds","title":"Usage"},{"location":"news/2020-year-in-review/#releases","text":"We continued our monthly release cadence as it represents a good pace for addressing issues while not expecting folks to update too often and keeping each update to a reasonable size. All changes can be tracked in our change log , updated with each release. You can check our scheduled releases through project milestones , understanding there are occasionally delays. Monthly releases allows us to ensure bugs do not linger and we continually improve and expand the capabilities of the libraries.","title":"Releases"},{"location":"news/2020-year-in-review/#npm-package-download-statistics-pnpsp","text":"Month Count * Month Count January 100,686 * July 36,805 February 34,437 * August 38,897 March 34,574 * September 45,968 April 32,436 * October 46,655 May 34,482 * November 45,511 June 34,408 * December 58,977 Grand Total 543,836 With 2020 our total all time downloads of @pnp/sp is now at: 949,638 Stats from https://npm-stat.com/","title":"NPM Package download statistics (@pnp/sp):"},{"location":"news/2020-year-in-review/#future-plans","text":"Looking to the future we will continue to actively grow and improve v2 of the library, guided by feedback and reported issues. Additionally, we are beginning to discuss v3 and doing initial planning and prototyping. The v3 work will continue through 2021 with no currently set release date, though we will keep everyone up to date. Additionally in 2021 there will be a general focus on improving not just the code but our tooling, build pipeline, and library contributor experience. We will also look at automatic canary releases with each merge, and other improvements.","title":"Future Plans"},{"location":"news/2020-year-in-review/#new-lead-maintainer","text":"With the close of 2020 we are very excited to announce a new lead maintainer for PnPjs, Julie Turner ! Julie brings deep expertise with SharePoint Framework, TypeScript, and SharePoint development to the team, coupled with dedication and care in the work. Over the last year she has gotten more involved with handling releases, responding to issues, and helping to keep the code updated and clean. We are very lucky to have her working on the project and look forward to seeing her lead the growth and direction for years to come.","title":"New Lead Maintainer"},{"location":"news/2020-year-in-review/#contributors","text":"As always we have abundant thanks and appreciation for your contributors. Taking your time to help improve PnPjs for the community is massive and valuable to ensure our sustainability. Thank you for all your help in 2020! If you are interested in becoming a contributor check out our guide on ways to get started.","title":"Contributors"},{"location":"news/2020-year-in-review/#sponsors","text":"We want to thank our sponsors for their support in 2020! This year we put the money towards helping offset the cost and shipping of hoodies to contributors and sponsors. Your continued generosity makes a big difference in our ability to recognize and reward the folks building PnPjs. Thank You","title":"Sponsors"},{"location":"news/2020-year-in-review/#closing","text":"In closing we want say Thank You to everyone who uses, contributes to, and participates in PnPjs and the SharePoint Patterns and Practices program. Wishing you the very best for 2021, The PnPjs Team","title":"Closing"},{"location":"news/2021-year-in-review/","text":"2021 Year End Report \u00b6 Welcome to our second year in review report for PnPjs. 2021 found us planning, building, testing, and documenting a whole new version of PnPjs. The goal is to deliver a much improved and flexible experience and none of that would have been possible without the support and participation of everyone in the PnP community - so we start by saying Thank You! We deeply appreciate everyone that has used, helped us grow, and improved the library over the last year. Because of the huge useage we've seen with the library and issues we found implementing some of the much requested enhancements, we felt we really needed to start from the ground up and rearchitect the library completely. This new design, built on the concept of a \"Timeline\", enabled us to build a significantly lighter weight solution that is more extensible than ever. And bonus, we were able to keep the overall development experience largly unchanged, so that makes transitioning all that much easier. In addition we took extra effort to validate our development efforts by making sure all our tests passed so that we could better ensure quality of the library. Check out our Transition Guide and ChangeLog for all the details. In other news, we fixed 47 reported bugs, answered 89 questions, and made 51 suggested enhancements to version 2 of the library - all driven by feedback from users and the community. Usage \u00b6 In 2021 we transitioned from rapid growth to slower growth but maintaining a request/month rate over 11 billion, approaching 13 billion by the end of the year. These requests came from more than 25 thousand tenants including some of the largest M365 customers. Due to some data cleanup we don't have the full year's information, but the below graph shows the final 7 months of the year. Releases \u00b6 We continued our monthly release cadence as it represents a good pace for addressing issues while not expecting folks to update too often and keeping each update to a reasonable size. All changes can be tracked in our change log , updated with each release. You can check our scheduled releases through project milestones , understanding there are occasionally delays. Monthly releases allows us to ensure bugs do not linger and we continually improve and expand the capabilities of the libraries. NPM Package download statistics (@pnp/sp) \u00b6 Month Count * Month Count January 49,446 * July 73,491 February 56,054 * August 74,236 March 66,113 * September 69,179 April 58,526 * October 77,645 May 62,747 * November 74,966 June 69,349 * December 61,995 Grand Total 793,747 For comparison our total downloads in 2020 was 543,836. With 2021 our total all time downloads of @pnp/sp is now at: 1,743,385 In 2020 the all time total was 949,638. Stats from https://npm-stat.com/ Future Plans \u00b6 Looking to the future we will continue to actively grow and improve v3 of the library, guided by feedback and reported issues. Additionally, we are looking to expand our contributions documentation to make it easier for community members to contibute their ideas and updates to the library. Contributors \u00b6 As always we have abundant thanks and appreciation for your contributors. Taking your time to help improve PnPjs for the community is massive and valuable to ensure our sustainability. Thank you for all your help in 2020! If you are interested in becoming a contributor check out our guide on ways to get started. Sponsors \u00b6 We want to thank our sponsors for their support in 2020! This year we put the money towards helping offset the cost and shipping of hoodies to contributors and sponsors. Your continued generosity makes a big difference in our ability to recognize and reward the folks building PnPjs. Thank You Closing \u00b6 In closing we want say Thank You to everyone who uses, contributes to, and participates in PnPjs and the SharePoint Patterns and Practices program. Wishing you the very best for 2022, The PnPjs Team","title":"2021"},{"location":"news/2021-year-in-review/#2021-year-end-report","text":"Welcome to our second year in review report for PnPjs. 2021 found us planning, building, testing, and documenting a whole new version of PnPjs. The goal is to deliver a much improved and flexible experience and none of that would have been possible without the support and participation of everyone in the PnP community - so we start by saying Thank You! We deeply appreciate everyone that has used, helped us grow, and improved the library over the last year. Because of the huge useage we've seen with the library and issues we found implementing some of the much requested enhancements, we felt we really needed to start from the ground up and rearchitect the library completely. This new design, built on the concept of a \"Timeline\", enabled us to build a significantly lighter weight solution that is more extensible than ever. And bonus, we were able to keep the overall development experience largly unchanged, so that makes transitioning all that much easier. In addition we took extra effort to validate our development efforts by making sure all our tests passed so that we could better ensure quality of the library. Check out our Transition Guide and ChangeLog for all the details. In other news, we fixed 47 reported bugs, answered 89 questions, and made 51 suggested enhancements to version 2 of the library - all driven by feedback from users and the community.","title":"2021 Year End Report"},{"location":"news/2021-year-in-review/#usage","text":"In 2021 we transitioned from rapid growth to slower growth but maintaining a request/month rate over 11 billion, approaching 13 billion by the end of the year. These requests came from more than 25 thousand tenants including some of the largest M365 customers. Due to some data cleanup we don't have the full year's information, but the below graph shows the final 7 months of the year.","title":"Usage"},{"location":"news/2021-year-in-review/#releases","text":"We continued our monthly release cadence as it represents a good pace for addressing issues while not expecting folks to update too often and keeping each update to a reasonable size. All changes can be tracked in our change log , updated with each release. You can check our scheduled releases through project milestones , understanding there are occasionally delays. Monthly releases allows us to ensure bugs do not linger and we continually improve and expand the capabilities of the libraries.","title":"Releases"},{"location":"news/2021-year-in-review/#npm-package-download-statistics-pnpsp","text":"Month Count * Month Count January 49,446 * July 73,491 February 56,054 * August 74,236 March 66,113 * September 69,179 April 58,526 * October 77,645 May 62,747 * November 74,966 June 69,349 * December 61,995 Grand Total 793,747 For comparison our total downloads in 2020 was 543,836. With 2021 our total all time downloads of @pnp/sp is now at: 1,743,385 In 2020 the all time total was 949,638. Stats from https://npm-stat.com/","title":"NPM Package download statistics (@pnp/sp)"},{"location":"news/2021-year-in-review/#future-plans","text":"Looking to the future we will continue to actively grow and improve v3 of the library, guided by feedback and reported issues. Additionally, we are looking to expand our contributions documentation to make it easier for community members to contibute their ideas and updates to the library.","title":"Future Plans"},{"location":"news/2021-year-in-review/#contributors","text":"As always we have abundant thanks and appreciation for your contributors. Taking your time to help improve PnPjs for the community is massive and valuable to ensure our sustainability. Thank you for all your help in 2020! If you are interested in becoming a contributor check out our guide on ways to get started.","title":"Contributors"},{"location":"news/2021-year-in-review/#sponsors","text":"We want to thank our sponsors for their support in 2020! This year we put the money towards helping offset the cost and shipping of hoodies to contributors and sponsors. Your continued generosity makes a big difference in our ability to recognize and reward the folks building PnPjs. Thank You","title":"Sponsors"},{"location":"news/2021-year-in-review/#closing","text":"In closing we want say Thank You to everyone who uses, contributes to, and participates in PnPjs and the SharePoint Patterns and Practices program. Wishing you the very best for 2022, The PnPjs Team","title":"Closing"},{"location":"nodejs/behaviors/","text":"@pnp/nodejs : behaviors \u00b6 The article describes the behaviors exported by the @pnp/nodejs library. Please also see available behaviors in @pnp/core , @pnp/queryable , @pnp/sp , and @pnp/graph . NodeFetch \u00b6 This behavior, for use in nodejs, provides basic fetch support through the node-fetch package. It replaces any other registered observers on the send moment by default, but this can be controlled via the props. Remember, when registering observers on the send moment only the first one will be used so not replacing For fetch configuration in browsers please see @pnp/queryable behaviors . import { NodeFetch } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; const sp = spfi().using(NodeFetch()); await sp.webs(); import { NodeFetch } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; const sp = spfi().using(NodeFetch({ replace: false })); await sp.webs(); NodeFetchWithRetry \u00b6 This behavior makes fetch requests but will attempt to retry the request on certain failures such as throttling. import { NodeFetchWithRetry } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; const sp = spfi().using(NodeFetchWithRetry()); await sp.webs(); You can also control how the behavior works through its props. The replace value works as described above for NodeFetch. interval specifies the initial dynamic back off value in milliseconds. This value is ignored if a \"Retry-After\" header exists in the response. retries indicates the number of times to retry before failing the request, the default is 3. A default of 3 will result in up to 4 total requests being the initial request and threee potential retries. import { NodeFetchWithRetry } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; const sp = spfi().using(NodeFetchWithRetry({ retries: 2, interval: 400, replace: true, })); await sp.webs(); GraphDefault \u00b6 The GraphDefault behavior is a composed behavior including MSAL, NodeFetchWithRetry, DefaultParse, graph's DefaultHeaders, and graph's DefaultInit. It is configured using a props argument: interface IGraphDefaultProps { baseUrl?: string; msal: { config: Configuration; scopes?: string[]; }; } You can use the baseUrl property to specify either v1.0 or beta - or one of the special graph urls . import { GraphDefault } from \"@pnp/nodejs\"; import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users/index.js\"; const graph = graphfi().using(GraphDefault({ // use the German national graph endpoint baseUrl: \"https://graph.microsoft.de/v1.0\", msal: { config: { /* my msal config */ }, } })); await graph.me(); MSAL \u00b6 This behavior provides a thin wrapper around the @azure/msal-node library. The options you provide are passed directly to msal, and all options are available. import { MSAL } from \"@pnp/nodejs\"; import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users/index.js\"; const graph = graphfi().using(MSAL(config: { /* my msal config */ }, scopes: [\"https://graph.microsoft.com/.default\"]); await graph.me(); SPDefault \u00b6 The SPDefault behavior is a composed behavior including MSAL, NodeFetchWithRetry, DefaultParse,sp's DefaultHeaders, and sp's DefaultInit. It is configured using a props argument: interface ISPDefaultProps { baseUrl?: string; msal: { config: Configuration; scopes: string[]; }; } You can use the baseUrl property to specify the absolute site/web url to which queries should be set. import { SPDefault } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; const sp = spfi().using(SPDefault({ msal: { config: { /* my msal config */ }, scopes: [\"Scope.Value\", \"Scope2.Value\"], } })); await sp.web(); StreamParse \u00b6 StreamParse is a specialized parser allowing request results to be read as a nodejs stream. The return value when using this parser will be of the shape: { body: /* The .body property of the Response object */, knownLength: /* number value calculated from the Response's content-length header */ } import { StreamParse } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; const sp = spfi().using(StreamParse()); const streamResult = await sp.someQueryThatReturnsALargeFile(); // read the stream as text const txt = await new Promise<string>((resolve) => { let data = \"\"; streamResult.body.on(\"data\", (chunk) => data += chunk); streamResult.body.on(\"end\", () => resolve(data)); });","title":"behaviors"},{"location":"nodejs/behaviors/#pnpnodejs-behaviors","text":"The article describes the behaviors exported by the @pnp/nodejs library. Please also see available behaviors in @pnp/core , @pnp/queryable , @pnp/sp , and @pnp/graph .","title":"@pnp/nodejs : behaviors"},{"location":"nodejs/behaviors/#nodefetch","text":"This behavior, for use in nodejs, provides basic fetch support through the node-fetch package. It replaces any other registered observers on the send moment by default, but this can be controlled via the props. Remember, when registering observers on the send moment only the first one will be used so not replacing For fetch configuration in browsers please see @pnp/queryable behaviors . import { NodeFetch } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; const sp = spfi().using(NodeFetch()); await sp.webs(); import { NodeFetch } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; const sp = spfi().using(NodeFetch({ replace: false })); await sp.webs();","title":"NodeFetch"},{"location":"nodejs/behaviors/#nodefetchwithretry","text":"This behavior makes fetch requests but will attempt to retry the request on certain failures such as throttling. import { NodeFetchWithRetry } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; const sp = spfi().using(NodeFetchWithRetry()); await sp.webs(); You can also control how the behavior works through its props. The replace value works as described above for NodeFetch. interval specifies the initial dynamic back off value in milliseconds. This value is ignored if a \"Retry-After\" header exists in the response. retries indicates the number of times to retry before failing the request, the default is 3. A default of 3 will result in up to 4 total requests being the initial request and threee potential retries. import { NodeFetchWithRetry } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; const sp = spfi().using(NodeFetchWithRetry({ retries: 2, interval: 400, replace: true, })); await sp.webs();","title":"NodeFetchWithRetry"},{"location":"nodejs/behaviors/#graphdefault","text":"The GraphDefault behavior is a composed behavior including MSAL, NodeFetchWithRetry, DefaultParse, graph's DefaultHeaders, and graph's DefaultInit. It is configured using a props argument: interface IGraphDefaultProps { baseUrl?: string; msal: { config: Configuration; scopes?: string[]; }; } You can use the baseUrl property to specify either v1.0 or beta - or one of the special graph urls . import { GraphDefault } from \"@pnp/nodejs\"; import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users/index.js\"; const graph = graphfi().using(GraphDefault({ // use the German national graph endpoint baseUrl: \"https://graph.microsoft.de/v1.0\", msal: { config: { /* my msal config */ }, } })); await graph.me();","title":"GraphDefault"},{"location":"nodejs/behaviors/#msal","text":"This behavior provides a thin wrapper around the @azure/msal-node library. The options you provide are passed directly to msal, and all options are available. import { MSAL } from \"@pnp/nodejs\"; import { graphfi } from \"@pnp/graph\"; import \"@pnp/graph/users/index.js\"; const graph = graphfi().using(MSAL(config: { /* my msal config */ }, scopes: [\"https://graph.microsoft.com/.default\"]); await graph.me();","title":"MSAL"},{"location":"nodejs/behaviors/#spdefault","text":"The SPDefault behavior is a composed behavior including MSAL, NodeFetchWithRetry, DefaultParse,sp's DefaultHeaders, and sp's DefaultInit. It is configured using a props argument: interface ISPDefaultProps { baseUrl?: string; msal: { config: Configuration; scopes: string[]; }; } You can use the baseUrl property to specify the absolute site/web url to which queries should be set. import { SPDefault } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; const sp = spfi().using(SPDefault({ msal: { config: { /* my msal config */ }, scopes: [\"Scope.Value\", \"Scope2.Value\"], } })); await sp.web();","title":"SPDefault"},{"location":"nodejs/behaviors/#streamparse","text":"StreamParse is a specialized parser allowing request results to be read as a nodejs stream. The return value when using this parser will be of the shape: { body: /* The .body property of the Response object */, knownLength: /* number value calculated from the Response's content-length header */ } import { StreamParse } from \"@pnp/nodejs\"; import \"@pnp/sp/webs/index.js\"; const sp = spfi().using(StreamParse()); const streamResult = await sp.someQueryThatReturnsALargeFile(); // read the stream as text const txt = await new Promise<string>((resolve) => { let data = \"\"; streamResult.body.on(\"data\", (chunk) => data += chunk); streamResult.body.on(\"end\", () => resolve(data)); });","title":"StreamParse"},{"location":"nodejs/sp-extensions/","text":"@pnp/nodejs - sp extensions \u00b6 By importing anything from the @pnp/nodejs library you automatically get nodejs specific extension methods added into the sp fluent api. IFile.getStream \u00b6 Allows you to read a response body as a nodejs PassThrough stream. // by importing the the library the node specific extensions are automatically applied import { SPDefault } from \"@pnp/nodejs\"; import { spfi } from \"@pnp/sp\"; const sp = spfi(\"https://something.com\").using(SPDefault({ // config })); // get the stream const streamResult: SPNS.IResponseBodyStream = await sp.web.getFileByServerRelativeUrl(\"/sites/dev/file.txt\").getStream(); // see if we have a known length console.log(streamResult.knownLength); // read the stream // this is a very basic example - you can do tons more with streams in node const txt = await new Promise<string>((resolve) => { let data = \"\"; stream.body.on(\"data\", (chunk) => data += chunk); stream.body.on(\"end\", () => resolve(data)); }); IFiles.addChunked \u00b6 import { SPDefault } from \"@pnp/nodejs\"; import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs/index.js\"; import \"@pnp/sp/folders/web.js\"; import \"@pnp/sp/folders/list.js\"; import \"@pnp/sp/files/web.js\"; import \"@pnp/sp/files/folder.js\"; import * as fs from \"fs\"; const sp = spfi(\"https://something.com\").using(SPDefault({ // config })); // NOTE: you must supply the highWaterMark to determine the block size for stream uploads const stream = fs.createReadStream(\"{file path}\", { highWaterMark: 10485760 }); const files = sp.web.defaultDocumentLibrary.rootFolder.files; // passing the chunkSize parameter has no affect when using a stream, use the highWaterMark as shown above when creating the stream await files.addChunked(name, stream, null, true); IFile.setStreamContentChunked \u00b6 import { SPDefault } from \"@pnp/nodejs\"; import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs/index.js\"; import \"@pnp/sp/folders/web.js\"; import \"@pnp/sp/folders/list.js\"; import \"@pnp/sp/files/web.js\"; import \"@pnp/sp/files/folder.js\"; import * as fs from \"fs\"; const sp = spfi(\"https://something.com\").using(SPDefault({ // config })); // NOTE: you must supply the highWaterMark to determine the block size for stream uploads const stream = fs.createReadStream(\"{file path}\", { highWaterMark: 10485760 }); const file = sp.web.defaultDocumentLibrary.rootFolder.files..getByName(\"file-name.txt\"); await file.setStreamContentChunked(stream); Explicit import \u00b6 If you don't need to import anything from the library, but would like to include the extensions just import the library as shown. import \"@pnp/nodejs\"; // get the stream const streamResult = await sp.web.getFileByServerRelativeUrl(\"/sites/dev/file.txt\").getStream(); Accessing SP Extension Namespace \u00b6 There are classes and interfaces included in extension modules, which you can access through a namespace, \"SPNS\". import { SPNS } from \"@pnp/nodejs-commonjs\"; const parser = new SPNS.StreamParser();","title":"sp Extensions"},{"location":"nodejs/sp-extensions/#pnpnodejs-sp-extensions","text":"By importing anything from the @pnp/nodejs library you automatically get nodejs specific extension methods added into the sp fluent api.","title":"@pnp/nodejs - sp extensions"},{"location":"nodejs/sp-extensions/#ifilegetstream","text":"Allows you to read a response body as a nodejs PassThrough stream. // by importing the the library the node specific extensions are automatically applied import { SPDefault } from \"@pnp/nodejs\"; import { spfi } from \"@pnp/sp\"; const sp = spfi(\"https://something.com\").using(SPDefault({ // config })); // get the stream const streamResult: SPNS.IResponseBodyStream = await sp.web.getFileByServerRelativeUrl(\"/sites/dev/file.txt\").getStream(); // see if we have a known length console.log(streamResult.knownLength); // read the stream // this is a very basic example - you can do tons more with streams in node const txt = await new Promise<string>((resolve) => { let data = \"\"; stream.body.on(\"data\", (chunk) => data += chunk); stream.body.on(\"end\", () => resolve(data)); });","title":"IFile.getStream"},{"location":"nodejs/sp-extensions/#ifilesaddchunked","text":"import { SPDefault } from \"@pnp/nodejs\"; import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs/index.js\"; import \"@pnp/sp/folders/web.js\"; import \"@pnp/sp/folders/list.js\"; import \"@pnp/sp/files/web.js\"; import \"@pnp/sp/files/folder.js\"; import * as fs from \"fs\"; const sp = spfi(\"https://something.com\").using(SPDefault({ // config })); // NOTE: you must supply the highWaterMark to determine the block size for stream uploads const stream = fs.createReadStream(\"{file path}\", { highWaterMark: 10485760 }); const files = sp.web.defaultDocumentLibrary.rootFolder.files; // passing the chunkSize parameter has no affect when using a stream, use the highWaterMark as shown above when creating the stream await files.addChunked(name, stream, null, true);","title":"IFiles.addChunked"},{"location":"nodejs/sp-extensions/#ifilesetstreamcontentchunked","text":"import { SPDefault } from \"@pnp/nodejs\"; import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs/index.js\"; import \"@pnp/sp/folders/web.js\"; import \"@pnp/sp/folders/list.js\"; import \"@pnp/sp/files/web.js\"; import \"@pnp/sp/files/folder.js\"; import * as fs from \"fs\"; const sp = spfi(\"https://something.com\").using(SPDefault({ // config })); // NOTE: you must supply the highWaterMark to determine the block size for stream uploads const stream = fs.createReadStream(\"{file path}\", { highWaterMark: 10485760 }); const file = sp.web.defaultDocumentLibrary.rootFolder.files..getByName(\"file-name.txt\"); await file.setStreamContentChunked(stream);","title":"IFile.setStreamContentChunked"},{"location":"nodejs/sp-extensions/#explicit-import","text":"If you don't need to import anything from the library, but would like to include the extensions just import the library as shown. import \"@pnp/nodejs\"; // get the stream const streamResult = await sp.web.getFileByServerRelativeUrl(\"/sites/dev/file.txt\").getStream();","title":"Explicit import"},{"location":"nodejs/sp-extensions/#accessing-sp-extension-namespace","text":"There are classes and interfaces included in extension modules, which you can access through a namespace, \"SPNS\". import { SPNS } from \"@pnp/nodejs-commonjs\"; const parser = new SPNS.StreamParser();","title":"Accessing SP Extension Namespace"},{"location":"queryable/behaviors/","text":"@pnp/queryable : behaviors \u00b6 The article describes the behaviors exported by the @pnp/queryable library. Please also see available behaviors in @pnp/core , @pnp/nodejs , @pnp/sp , and @pnp/graph . Generally you won't need to use these behaviors individually when using the defaults supplied by the library, but when appropriate you can create your own composed behaviors using these as building blocks. Bearer Token \u00b6 Allows you to inject an existing bearer token into the request. This behavior will not replace any existing authentication behaviors, so you may want to ensure they are cleared if you are supplying your own tokens, regardless of their source. This behavior does no caching or performs any operation other than including your token in an authentication heading. import { BearerToken } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BearerToken(\"HereIsMyBearerTokenStringFromSomeSource\")); // optionally clear any configured authentication as you are supplying a token so additional calls shouldn't be needed // but take care as other behaviors may add observers to auth sp.on.auth.clear(); // the bearer token supplied above will be applied to all requests made from `sp` const webInfo = await sp.webs(); BrowserFetch \u00b6 This behavior, for use in web browsers, provides basic fetch support through the browser's fetch global method. It replaces any other registered observers on the send moment by default, but this can be controlled via the props. Remember, when registering observers on the send moment only the first one will be used so not replacing For fetch configuration in nodejs please see @pnp/nodejs behaviors . import { BrowserFetch } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BrowserFetch()); const webInfo = await sp.webs(); import { BrowserFetch } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BrowserFetch({ replace: false })); const webInfo = await sp.webs(); BrowserFetchWithRetry \u00b6 This behavior makes fetch requests but will attempt to retry the request on certain failures such as throttling. import { BrowserFetchWithRetry } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BrowserFetchWithRetry()); const webInfo = await sp.webs(); You can also control how the behavior works through its props. The replace value works as described above for BrowserFetch. interval specifies the initial dynamic back off value in milliseconds. This value is ignored if a \"Retry-After\" header exists in the response. retries indicates the number of times to retry before failing the request, the default is 3. A default of 3 will result in up to 4 total requests being the initial request and threee potential retries. import { BrowserFetchWithRetry } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BrowserFetchWithRetry({ retries: 2, interval: 400, replace: true, })); const webInfo = await sp.webs(); Caching \u00b6 This behavior allows you to cache the results of get requests in either session or local storage. If neither is available (such as in Nodejs) the library will shim using an in memory map. It is a good idea to include caching in your projects to improve performance. By default items in the cache will expire after 5 minutes. import { Caching } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(Caching()); // caching will save the data into session storage on the first request - the key is based on the full url including query strings const webInfo = await sp.webs(); // caching will retriece this value from the cache saving a network requests the second time it is loaded (either in the same page, a reload of the page, etc.) const webInfo2 = await sp.webs(); Custom Key Function \u00b6 You can also supply custom functionality to control how keys are generated and calculate the expirations. The cache key factory has the form (url: string) => string and you must ensure your keys are unique enough that you won't have collisions. The expire date factory has the form (url: string) => Date and should return the Date when the cached data should expire. If you know that some particular data won't expire often you can set this date far in the future, or for more frequently updated information you can set it lower. If you set the expiration too short there is no reason to use caching as any stored information will likely always be expired. Additionally, you can set the storage to use local storage which will persist across sessions. import { getHashCode, PnPClientStorage, dateAdd, TimelinePipe } from \"@pnp/core\"; import { Caching } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(Caching({ store: \"local\", // use a hascode for the key keyFactory: (url) => getHashCode(url.toLowerCase()).toString(), // cache for one minute expireFunc: (url) => dateAdd(new Date(), \"minute\", 1), })); // caching will save the data into session storage on the first request - the key is based on the full url including query strings const webInfo = await sp.webs(); // caching will retriece this value from the cache saving a network requests the second time it is loaded (either in the same page, a reload of the page, etc.) const webInfo2 = await sp.webs(); As with any behavior you have the option to only apply caching to certain requests: import { getHashCode, dateAdd } from \"@pnp/core\"; import { Caching } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(); // caching will only apply to requests using `cachingList` as the base of the fluent chain const cachingList = sp.web.lists.getByTitle(\"{List Title}\").using(Caching()); // caching will save the data into session storage on the first request - the key is based on the full url including query strings const itemsInfo = await cachingList.items(); // caching will retriece this value from the cache saving a network requests the second time it is loaded (either in the same page, a reload of the page, etc.) const itemsInfo2 = await cachingList.items(); Caching Pessimistic Refresh \u00b6 This behavior is slightly different than our default Caching behavior in that it will always return the cached value if there is one, but also asyncronously update the cached value in the background. Like the default CAchine behavior it allows you to cache the results of get requests in either session or local storage. If neither is available (such as in Nodejs) the library will shim using an in memory map. If you do not provide an expiration function then the cache will be updated asyncronously on every call, if you do provide an expiration then the cached value will only be updated, although still asyncronously, only when the cache has expired. import { CachingPessimisticRefresh } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(CachingPessimisticRefresh()); // caching will save the data into session storage on the first request - the key is based on the full url including query strings const webInfo = await sp.webs(); // caching will retriece this value from the cache saving a network requests the second time it is loaded (either in the same page, a reload of the page, etc.) const webInfo2 = await sp.webs(); Again as with the default Caching behavior you can provide custom functions for key generation and expiration. Please see the Custom Key Function documentation above for more details. InjectHeaders \u00b6 Adds any specified headers to a given request. Can be used multiple times with a timeline. The supplied headers are added to all requests, and last applied wins - meaning if two InjectHeaders are included in the pipeline which inlcude a value for the same header, the second one applied will be used. import { InjectHeaders } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(InjectHeaders({ \"X-Something\": \"a value\", \"MyCompanySpecialAuth\": \"special company token\", })); const webInfo = await sp.webs(); Parsers \u00b6 Parsers convert the returned fetch Response into something usable. We have included the most common parsers we think you'll need - but you can always write your own parser based on the signature of the parse moment . All of these parsers when applied through using will replace any other observers on the parse moment. DefaultParse \u00b6 Performs error handling and parsing of JSON responses. This is the one you'll use for most of your requests and it is included in all the defaults. import { DefaultParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(DefaultParse()); const webInfo = await sp.webs(); TextParse \u00b6 Checks for errors and parses the results as text with no further manipulation. import { TextParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(TextParse()); BlobParse \u00b6 Checks for errors and parses the results a Blob with no further manipulation. import { BlobParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BlobParse()); JSONParse \u00b6 Checks for errors and parses the results as JSON with no further manipulation. Meaning you will get the raw JSON response vs DefaultParse which will remove wrapping JSON. import { JSONParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(JSONParse()); BufferParse \u00b6 Checks for errors and parses the results a Buffer with no further manipulation. import { BufferParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BufferParse()); HeaderParse \u00b6 Checks for errors and parses the headers of the Response as the result. This is a specialised parses which can be used in those infrequent scenarios where you need information from the headers of a response. import { HeaderParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(HeaderParse()); Resolvers \u00b6 These two behaviors are special and should always be included when composing your own defaults. They implement the expected behavior of resolving or rejecting the promise returned when executing a timeline. They are implemented as behaviors should there be a need to do something different the logic is not locked into the core of the library. ResolveOnData, RejectOnError \u00b6 import { ResolveOnData, RejectOnError } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(ResolveOnData(), RejectOnError()); Timeout \u00b6 The Timeout behavior allows you to include a timeout in requests. You can specify either a number, representing the number of milliseconds until the request should timeout or an AbortSignal. In Nodejs you will need to polyfill AbortController if your version (<15) does not include it when using Timeout and passing a number. If you are supplying your own AbortSignal you do not. import { Timeout } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; // requests should timeout in 5 seconds const sp = spfi().using(Timeout(5000)); import { Timeout } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const controller = new AbortController(); const sp = spfi().using(Timeout(controller.signal)); // abort requests after 6 seconds using our own controller const timer = setTimeout(() => { controller.abort(); }, 6000); // this request will be cancelled if it doesn't complete in 6 seconds const webInfo = await sp.webs(); // be a good citizen and cancel unneeded timers clearTimeout(timer);","title":"Behaviors"},{"location":"queryable/behaviors/#pnpqueryable-behaviors","text":"The article describes the behaviors exported by the @pnp/queryable library. Please also see available behaviors in @pnp/core , @pnp/nodejs , @pnp/sp , and @pnp/graph . Generally you won't need to use these behaviors individually when using the defaults supplied by the library, but when appropriate you can create your own composed behaviors using these as building blocks.","title":"@pnp/queryable : behaviors"},{"location":"queryable/behaviors/#bearer-token","text":"Allows you to inject an existing bearer token into the request. This behavior will not replace any existing authentication behaviors, so you may want to ensure they are cleared if you are supplying your own tokens, regardless of their source. This behavior does no caching or performs any operation other than including your token in an authentication heading. import { BearerToken } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BearerToken(\"HereIsMyBearerTokenStringFromSomeSource\")); // optionally clear any configured authentication as you are supplying a token so additional calls shouldn't be needed // but take care as other behaviors may add observers to auth sp.on.auth.clear(); // the bearer token supplied above will be applied to all requests made from `sp` const webInfo = await sp.webs();","title":"Bearer Token"},{"location":"queryable/behaviors/#browserfetch","text":"This behavior, for use in web browsers, provides basic fetch support through the browser's fetch global method. It replaces any other registered observers on the send moment by default, but this can be controlled via the props. Remember, when registering observers on the send moment only the first one will be used so not replacing For fetch configuration in nodejs please see @pnp/nodejs behaviors . import { BrowserFetch } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BrowserFetch()); const webInfo = await sp.webs(); import { BrowserFetch } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BrowserFetch({ replace: false })); const webInfo = await sp.webs();","title":"BrowserFetch"},{"location":"queryable/behaviors/#browserfetchwithretry","text":"This behavior makes fetch requests but will attempt to retry the request on certain failures such as throttling. import { BrowserFetchWithRetry } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BrowserFetchWithRetry()); const webInfo = await sp.webs(); You can also control how the behavior works through its props. The replace value works as described above for BrowserFetch. interval specifies the initial dynamic back off value in milliseconds. This value is ignored if a \"Retry-After\" header exists in the response. retries indicates the number of times to retry before failing the request, the default is 3. A default of 3 will result in up to 4 total requests being the initial request and threee potential retries. import { BrowserFetchWithRetry } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BrowserFetchWithRetry({ retries: 2, interval: 400, replace: true, })); const webInfo = await sp.webs();","title":"BrowserFetchWithRetry"},{"location":"queryable/behaviors/#caching","text":"This behavior allows you to cache the results of get requests in either session or local storage. If neither is available (such as in Nodejs) the library will shim using an in memory map. It is a good idea to include caching in your projects to improve performance. By default items in the cache will expire after 5 minutes. import { Caching } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(Caching()); // caching will save the data into session storage on the first request - the key is based on the full url including query strings const webInfo = await sp.webs(); // caching will retriece this value from the cache saving a network requests the second time it is loaded (either in the same page, a reload of the page, etc.) const webInfo2 = await sp.webs();","title":"Caching"},{"location":"queryable/behaviors/#custom-key-function","text":"You can also supply custom functionality to control how keys are generated and calculate the expirations. The cache key factory has the form (url: string) => string and you must ensure your keys are unique enough that you won't have collisions. The expire date factory has the form (url: string) => Date and should return the Date when the cached data should expire. If you know that some particular data won't expire often you can set this date far in the future, or for more frequently updated information you can set it lower. If you set the expiration too short there is no reason to use caching as any stored information will likely always be expired. Additionally, you can set the storage to use local storage which will persist across sessions. import { getHashCode, PnPClientStorage, dateAdd, TimelinePipe } from \"@pnp/core\"; import { Caching } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(Caching({ store: \"local\", // use a hascode for the key keyFactory: (url) => getHashCode(url.toLowerCase()).toString(), // cache for one minute expireFunc: (url) => dateAdd(new Date(), \"minute\", 1), })); // caching will save the data into session storage on the first request - the key is based on the full url including query strings const webInfo = await sp.webs(); // caching will retriece this value from the cache saving a network requests the second time it is loaded (either in the same page, a reload of the page, etc.) const webInfo2 = await sp.webs(); As with any behavior you have the option to only apply caching to certain requests: import { getHashCode, dateAdd } from \"@pnp/core\"; import { Caching } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(); // caching will only apply to requests using `cachingList` as the base of the fluent chain const cachingList = sp.web.lists.getByTitle(\"{List Title}\").using(Caching()); // caching will save the data into session storage on the first request - the key is based on the full url including query strings const itemsInfo = await cachingList.items(); // caching will retriece this value from the cache saving a network requests the second time it is loaded (either in the same page, a reload of the page, etc.) const itemsInfo2 = await cachingList.items();","title":"Custom Key Function"},{"location":"queryable/behaviors/#caching-pessimistic-refresh","text":"This behavior is slightly different than our default Caching behavior in that it will always return the cached value if there is one, but also asyncronously update the cached value in the background. Like the default CAchine behavior it allows you to cache the results of get requests in either session or local storage. If neither is available (such as in Nodejs) the library will shim using an in memory map. If you do not provide an expiration function then the cache will be updated asyncronously on every call, if you do provide an expiration then the cached value will only be updated, although still asyncronously, only when the cache has expired. import { CachingPessimisticRefresh } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(CachingPessimisticRefresh()); // caching will save the data into session storage on the first request - the key is based on the full url including query strings const webInfo = await sp.webs(); // caching will retriece this value from the cache saving a network requests the second time it is loaded (either in the same page, a reload of the page, etc.) const webInfo2 = await sp.webs(); Again as with the default Caching behavior you can provide custom functions for key generation and expiration. Please see the Custom Key Function documentation above for more details.","title":"Caching Pessimistic Refresh"},{"location":"queryable/behaviors/#injectheaders","text":"Adds any specified headers to a given request. Can be used multiple times with a timeline. The supplied headers are added to all requests, and last applied wins - meaning if two InjectHeaders are included in the pipeline which inlcude a value for the same header, the second one applied will be used. import { InjectHeaders } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(InjectHeaders({ \"X-Something\": \"a value\", \"MyCompanySpecialAuth\": \"special company token\", })); const webInfo = await sp.webs();","title":"InjectHeaders"},{"location":"queryable/behaviors/#parsers","text":"Parsers convert the returned fetch Response into something usable. We have included the most common parsers we think you'll need - but you can always write your own parser based on the signature of the parse moment . All of these parsers when applied through using will replace any other observers on the parse moment.","title":"Parsers"},{"location":"queryable/behaviors/#defaultparse","text":"Performs error handling and parsing of JSON responses. This is the one you'll use for most of your requests and it is included in all the defaults. import { DefaultParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(DefaultParse()); const webInfo = await sp.webs();","title":"DefaultParse"},{"location":"queryable/behaviors/#textparse","text":"Checks for errors and parses the results as text with no further manipulation. import { TextParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(TextParse());","title":"TextParse"},{"location":"queryable/behaviors/#blobparse","text":"Checks for errors and parses the results a Blob with no further manipulation. import { BlobParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BlobParse());","title":"BlobParse"},{"location":"queryable/behaviors/#jsonparse","text":"Checks for errors and parses the results as JSON with no further manipulation. Meaning you will get the raw JSON response vs DefaultParse which will remove wrapping JSON. import { JSONParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(JSONParse());","title":"JSONParse"},{"location":"queryable/behaviors/#bufferparse","text":"Checks for errors and parses the results a Buffer with no further manipulation. import { BufferParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(BufferParse());","title":"BufferParse"},{"location":"queryable/behaviors/#headerparse","text":"Checks for errors and parses the headers of the Response as the result. This is a specialised parses which can be used in those infrequent scenarios where you need information from the headers of a response. import { HeaderParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(HeaderParse());","title":"HeaderParse"},{"location":"queryable/behaviors/#resolvers","text":"These two behaviors are special and should always be included when composing your own defaults. They implement the expected behavior of resolving or rejecting the promise returned when executing a timeline. They are implemented as behaviors should there be a need to do something different the logic is not locked into the core of the library.","title":"Resolvers"},{"location":"queryable/behaviors/#resolveondata-rejectonerror","text":"import { ResolveOnData, RejectOnError } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(ResolveOnData(), RejectOnError());","title":"ResolveOnData, RejectOnError"},{"location":"queryable/behaviors/#timeout","text":"The Timeout behavior allows you to include a timeout in requests. You can specify either a number, representing the number of milliseconds until the request should timeout or an AbortSignal. In Nodejs you will need to polyfill AbortController if your version (<15) does not include it when using Timeout and passing a number. If you are supplying your own AbortSignal you do not. import { Timeout } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; // requests should timeout in 5 seconds const sp = spfi().using(Timeout(5000)); import { Timeout } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const controller = new AbortController(); const sp = spfi().using(Timeout(controller.signal)); // abort requests after 6 seconds using our own controller const timer = setTimeout(() => { controller.abort(); }, 6000); // this request will be cancelled if it doesn't complete in 6 seconds const webInfo = await sp.webs(); // be a good citizen and cancel unneeded timers clearTimeout(timer);","title":"Timeout"},{"location":"queryable/extensions/","text":"Extensions \u00b6 Extending is the concept of overriding or adding functionality into an object or environment without altering the underlying class instances. This can be useful for debugging, testing, or injecting custom functionality. Extensions work with any invokable and allow you to control any behavior of the library with extensions. Types of Extensions \u00b6 There are two types of Extensions available as well as three methods for registration. You can register any type of extension with any of the registration options. Function Extensions \u00b6 The first type is a simple function with a signature: (op: \"apply\" | \"get\" | \"has\" | \"set\", target: T, ...rest: any[]): void This function is passed the current operation as the first argument, currently one of \"apply\", \"get\", \"has\", or \"set\". The second argument is the target instance upon which the operation is being invoked. The remaining parameters vary by the operation being performed, but will match their respective ProxyHandler method signatures. Named Extensions \u00b6 Named extensions are designed to add or replace a single property or method, though you can register multiple using the same object. These extensions are defined by using an object which has the property/methods you want to override described. Registering named extensions globally will override that operation to all invokables. import { extendFactory } from \"@pnp/queryable\"; import { sp, List, Lists, IWeb, ILists, List, IList, Web } from \"@pnp/sp/presets/all\"; import { escapeQueryStrValue } from \"@pnp/sp/utils/escapeQueryStrValue\"; // create a plain object with the props and methods we want to add/change const myExtensions = { // override the lists property get lists(this: IWeb): ILists { // we will always order our lists by title and select just the Title for ALL calls (just as an example) return Lists(this).orderBy(\"Title\").select(\"Title\"); }, // override the getByTitle method getByTitle: function (this: ILists, title: string): IList { // in our example our list has moved, so we rewrite the request on the fly if (title === \"List1\") { return List(this, `getByTitle('List2')`); } else { // you can't at this point call the \"base\" method as you will end up in loop within the proxy // so you need to ensure you patch/include any original functionality you need return List(this, `getByTitle('${escapeQueryStrValue(title)}')`); } }, }; // register all the named Extensions extendFactory(Web, myExtensions); // this will use our extension to ensure the lists are ordered const lists = await sp.web.lists(); console.log(JSON.stringify(lists, null, 2)); // we will get the items from List1 but within the extension it is rewritten as List2 const items = await sp.web.lists.getByTitle(\"List1\").items(); console.log(JSON.stringify(items.length, null, 2)); ProxyHandler Extensions \u00b6 You can also register a partial ProxyHandler implementation as an extension. You can implement one or more of the ProxyHandler methods as needed. Here we implement the same override of getByTitle globally. This is the most complicated method of creating an extension and assumes an understanding of how ProxyHandlers work. import { extendFactory } from \"@pnp/queryable\"; import { sp, Lists, IWeb, ILists, Web } from \"@pnp/sp/presets/all\"; import { escapeQueryStrValue } from \"@pnp/sp/utils/escapeSingleQuote\"; const myExtensions = { get: (target, p: string | number | symbol, _receiver: any) => { switch (p) { case \"getByTitle\": return (title: string) => { // in our example our list has moved, so we rewrite the request on the fly if (title === \"LookupList\") { return List(target, `getByTitle('OrderByList')`); } else { // you can't at this point call the \"base\" method as you will end up in loop within the proxy // so you need to ensure you patch/include any original functionality you need return List(target, `getByTitle('${escapeQueryStrValue(title)}')`); } }; } }, }; extendFactory(Web, myExtensions); const lists = sp.web.lists; const items = await lists.getByTitle(\"LookupList\").items(); console.log(JSON.stringify(items.length, null, 2)); Registering Extensions \u00b6 You can register Extensions on an invocable factory or on a per-object basis, and you can register a single extension or an array of Extensions. Factory Registration \u00b6 The pattern you will likely find most useful is the ability to extend an invocable factory. This will apply your extensions to all instances created with that factory, meaning all IWebs or ILists will have the extension methods. The example below shows how to add a property to IWeb as well as a method to IList. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { IWeb, Web } from \"@pnp/sp/webs\"; import { ILists, Lists } from \"@pnp/sp/lists\"; import { extendFactory } from \"@pnp/queryable\"; import { sp } from \"@pnp/sp\"; const sp = spfi().using(...); // sets up the types correctly when importing across your application declare module \"@pnp/sp/webs/types\" { // we need to extend the interface interface IWeb { orderedLists: ILists; } } // sets up the types correctly when importing across your application declare module \"@pnp/sp/lists/types\" { // we need to extend the interface interface ILists { getOrderedListsQuery: (this: ILists) => ILists; } } extendFactory(Web, { // add an ordered lists property get orderedLists(this: IWeb): ILists { return this.lists.getOrderedListsQuery(); }, }); extendFactory(Lists, { // add an ordered lists property getOrderedListsQuery(this: ILists): ILists { return this.top(10).orderBy(\"Title\").select(\"Title\"); }, }); // regardless of how we access the web and lists collections our extensions remain with all new instance based on const web = Web([sp.web, \"https://tenant.sharepoint.com/sites/dev/\"]); const lists1 = await web.orderedLists(); console.log(JSON.stringify(lists1, null, 2)); const lists2 = await Web([sp.web, \"https://tenant.sharepoint.com/sites/dev/\"]).orderedLists(); console.log(JSON.stringify(lists2, null, 2)); const lists3 = await sp.web.orderedLists(); console.log(JSON.stringify(lists3, null, 2)); Instance Registration \u00b6 You can also register Extensions on a single object instance, which is often the preferred approach as it will have less of a performance impact across your whole application. This is useful for debugging, overriding methods/properties, or controlling the behavior of specific object instances. Extensions are not transferred to child objects in a fluent chain, be sure you are extending the instance you think you are. Here we show the same override operation of getByTitle on the lists collection, but safely only overriding the single instance. import { extendObj } from \"@pnp/queryable\"; import { sp, List, ILists } from \"@pnp/sp/presets/all\"; const myExtensions = { getByTitle: function (this: ILists, title: string) { // in our example our list has moved, so we rewrite the request on the fly if (title === \"List1\") { return List(this, \"getByTitle('List2')\"); } else { // you can't at this point call the \"base\" method as you will end up in loop within the proxy // so you need to ensure you patch/include any original functionality you need return List(this, `getByTitle('${escapeQueryStrValue(title)}')`); } }, }; const lists = extendObj(sp.web.lists, myExtensions); const items = await lists.getByTitle(\"LookupList\").items(); console.log(JSON.stringify(items.length, null, 2)); Enable & Disable Extensions and Clear Global Extensions \u00b6 Extensions are automatically enabled when you set an extension through any of the above outlined methods. You can disable and enable extensions on demand if needed. import { enableExtensions, disableExtensions, clearGlobalExtensions } from \"@pnp/queryable\"; // disable Extensions disableExtensions(); // enable Extensions enableExtensions();","title":"Extensions"},{"location":"queryable/extensions/#extensions","text":"Extending is the concept of overriding or adding functionality into an object or environment without altering the underlying class instances. This can be useful for debugging, testing, or injecting custom functionality. Extensions work with any invokable and allow you to control any behavior of the library with extensions.","title":"Extensions"},{"location":"queryable/extensions/#types-of-extensions","text":"There are two types of Extensions available as well as three methods for registration. You can register any type of extension with any of the registration options.","title":"Types of Extensions"},{"location":"queryable/extensions/#function-extensions","text":"The first type is a simple function with a signature: (op: \"apply\" | \"get\" | \"has\" | \"set\", target: T, ...rest: any[]): void This function is passed the current operation as the first argument, currently one of \"apply\", \"get\", \"has\", or \"set\". The second argument is the target instance upon which the operation is being invoked. The remaining parameters vary by the operation being performed, but will match their respective ProxyHandler method signatures.","title":"Function Extensions"},{"location":"queryable/extensions/#named-extensions","text":"Named extensions are designed to add or replace a single property or method, though you can register multiple using the same object. These extensions are defined by using an object which has the property/methods you want to override described. Registering named extensions globally will override that operation to all invokables. import { extendFactory } from \"@pnp/queryable\"; import { sp, List, Lists, IWeb, ILists, List, IList, Web } from \"@pnp/sp/presets/all\"; import { escapeQueryStrValue } from \"@pnp/sp/utils/escapeQueryStrValue\"; // create a plain object with the props and methods we want to add/change const myExtensions = { // override the lists property get lists(this: IWeb): ILists { // we will always order our lists by title and select just the Title for ALL calls (just as an example) return Lists(this).orderBy(\"Title\").select(\"Title\"); }, // override the getByTitle method getByTitle: function (this: ILists, title: string): IList { // in our example our list has moved, so we rewrite the request on the fly if (title === \"List1\") { return List(this, `getByTitle('List2')`); } else { // you can't at this point call the \"base\" method as you will end up in loop within the proxy // so you need to ensure you patch/include any original functionality you need return List(this, `getByTitle('${escapeQueryStrValue(title)}')`); } }, }; // register all the named Extensions extendFactory(Web, myExtensions); // this will use our extension to ensure the lists are ordered const lists = await sp.web.lists(); console.log(JSON.stringify(lists, null, 2)); // we will get the items from List1 but within the extension it is rewritten as List2 const items = await sp.web.lists.getByTitle(\"List1\").items(); console.log(JSON.stringify(items.length, null, 2));","title":"Named Extensions"},{"location":"queryable/extensions/#proxyhandler-extensions","text":"You can also register a partial ProxyHandler implementation as an extension. You can implement one or more of the ProxyHandler methods as needed. Here we implement the same override of getByTitle globally. This is the most complicated method of creating an extension and assumes an understanding of how ProxyHandlers work. import { extendFactory } from \"@pnp/queryable\"; import { sp, Lists, IWeb, ILists, Web } from \"@pnp/sp/presets/all\"; import { escapeQueryStrValue } from \"@pnp/sp/utils/escapeSingleQuote\"; const myExtensions = { get: (target, p: string | number | symbol, _receiver: any) => { switch (p) { case \"getByTitle\": return (title: string) => { // in our example our list has moved, so we rewrite the request on the fly if (title === \"LookupList\") { return List(target, `getByTitle('OrderByList')`); } else { // you can't at this point call the \"base\" method as you will end up in loop within the proxy // so you need to ensure you patch/include any original functionality you need return List(target, `getByTitle('${escapeQueryStrValue(title)}')`); } }; } }, }; extendFactory(Web, myExtensions); const lists = sp.web.lists; const items = await lists.getByTitle(\"LookupList\").items(); console.log(JSON.stringify(items.length, null, 2));","title":"ProxyHandler Extensions"},{"location":"queryable/extensions/#registering-extensions","text":"You can register Extensions on an invocable factory or on a per-object basis, and you can register a single extension or an array of Extensions.","title":"Registering Extensions"},{"location":"queryable/extensions/#factory-registration","text":"The pattern you will likely find most useful is the ability to extend an invocable factory. This will apply your extensions to all instances created with that factory, meaning all IWebs or ILists will have the extension methods. The example below shows how to add a property to IWeb as well as a method to IList. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { IWeb, Web } from \"@pnp/sp/webs\"; import { ILists, Lists } from \"@pnp/sp/lists\"; import { extendFactory } from \"@pnp/queryable\"; import { sp } from \"@pnp/sp\"; const sp = spfi().using(...); // sets up the types correctly when importing across your application declare module \"@pnp/sp/webs/types\" { // we need to extend the interface interface IWeb { orderedLists: ILists; } } // sets up the types correctly when importing across your application declare module \"@pnp/sp/lists/types\" { // we need to extend the interface interface ILists { getOrderedListsQuery: (this: ILists) => ILists; } } extendFactory(Web, { // add an ordered lists property get orderedLists(this: IWeb): ILists { return this.lists.getOrderedListsQuery(); }, }); extendFactory(Lists, { // add an ordered lists property getOrderedListsQuery(this: ILists): ILists { return this.top(10).orderBy(\"Title\").select(\"Title\"); }, }); // regardless of how we access the web and lists collections our extensions remain with all new instance based on const web = Web([sp.web, \"https://tenant.sharepoint.com/sites/dev/\"]); const lists1 = await web.orderedLists(); console.log(JSON.stringify(lists1, null, 2)); const lists2 = await Web([sp.web, \"https://tenant.sharepoint.com/sites/dev/\"]).orderedLists(); console.log(JSON.stringify(lists2, null, 2)); const lists3 = await sp.web.orderedLists(); console.log(JSON.stringify(lists3, null, 2));","title":"Factory Registration"},{"location":"queryable/extensions/#instance-registration","text":"You can also register Extensions on a single object instance, which is often the preferred approach as it will have less of a performance impact across your whole application. This is useful for debugging, overriding methods/properties, or controlling the behavior of specific object instances. Extensions are not transferred to child objects in a fluent chain, be sure you are extending the instance you think you are. Here we show the same override operation of getByTitle on the lists collection, but safely only overriding the single instance. import { extendObj } from \"@pnp/queryable\"; import { sp, List, ILists } from \"@pnp/sp/presets/all\"; const myExtensions = { getByTitle: function (this: ILists, title: string) { // in our example our list has moved, so we rewrite the request on the fly if (title === \"List1\") { return List(this, \"getByTitle('List2')\"); } else { // you can't at this point call the \"base\" method as you will end up in loop within the proxy // so you need to ensure you patch/include any original functionality you need return List(this, `getByTitle('${escapeQueryStrValue(title)}')`); } }, }; const lists = extendObj(sp.web.lists, myExtensions); const items = await lists.getByTitle(\"LookupList\").items(); console.log(JSON.stringify(items.length, null, 2));","title":"Instance Registration"},{"location":"queryable/extensions/#enable-disable-extensions-and-clear-global-extensions","text":"Extensions are automatically enabled when you set an extension through any of the above outlined methods. You can disable and enable extensions on demand if needed. import { enableExtensions, disableExtensions, clearGlobalExtensions } from \"@pnp/queryable\"; // disable Extensions disableExtensions(); // enable Extensions enableExtensions();","title":"Enable &amp; Disable Extensions and Clear Global Extensions"},{"location":"queryable/queryable/","text":"@pnp/queryable/queryable \u00b6 Queryable is the base class for both the sp and graph fluent interfaces and provides the structure to which observers are registered. As a background to understand more of the mechanics please see the articles on Timeline , moments , and observers . For reuse it is recommended to compose your observer registrations with behaviors . Queryable Constructor \u00b6 By design the library is meant to allow creating the next part of a url from the current part. In this way each queryable instance is built from a previous instance. As such understanding the Queryable constructor's behavior is important. The constructor takes two parameters, the first required and the second optional. The first parameter can be another queryable, a string, or a tuple of [Queryable, string]. |Parameter|Behavior| |---|---| |Queryable|The new queryable inherits all of the supplied queryable's observers. Any supplied path (second constructor param) is appended to the supplied queryable's url becoming the url of the newly constructed queryable| |string|The new queryable will have NO registered observers. Any supplied path (second constructor param) is appended to the string becoming the url of the newly constructed queryable| |[Queryable, string]|The observers from the supplied queryable are used by the new queryable. The url is a combination of the second tuple argument (absolute url string) and any supplied path. The tuple constructor call can be used to rebase a queryable to call a different host in an otherwise identical way to another queryable. When using the tuple constructor the url provided must be absolute. Examples \u00b6 // represents a fully configured queryable with url and registered observers // url: https://something.com const baseQueryable; // child1 will: // - reference the observers of baseQueryable // - have a url of \"https://something.com/subpath\" const child1 = Child(baseQueryable, \"subpath\"); // child2 will: // - reference the observers of baseQueryable // - have a url of \"https://something.com\" const child2 = Child(baseQueryable); // nonchild1 will: // - have NO registered observers or connection to baseQueryable // - have a url of \"https://somethingelse.com\" const nonchild1 = Child(\"https://somethingelse.com\"); // nonchild2 will: // - have NO registered observers or connection to baseQueryable // - have a url of \"https://somethingelse.com/subpath\" const nonchild2 = Child(\"https://somethingelse.com\", \"subpath\"); // rebased1 will: // - reference the observers of baseQueryable // - have a url of \"https://somethingelse.com\" const rebased1 = Child([baseQueryable, \"https://somethingelse.com\"]); // rebased2 will: // - reference the observers of baseQueryable // - have a url of \"https://somethingelse.com/subpath\" const rebased2 = Child([baseQueryable, \"https://somethingelse.com\"], \"subpath\"); Queryable Lifecycle \u00b6 The Queryable lifecycle is: init pre auth send parse post data dispose As well log and error can emit at any point during the lifecycle. Queryable Observers \u00b6 This section outlines how to write observers for the Queryable lifecycle, and the expectations of each moment's observer behaviors. In the below samples consider the variable query to mean any valid Queryable derived object. log \u00b6 Anything can log to a given timeline's log using the public log method and to intercept those message you can subscribed to the log event. The log observer's signature is: (this: Timeline<T>, message: string, level: number) => void query.on.log((message, level) => { // log only warnings or errors if (level > 1) { console.log(message); } }); The level value is a number indicating the severity of the message. Internally we use the values from the LogLevel enum in @pnp/logging: Verbose = 0, Info = 1, Warning = 2, Error = 3. Be aware that nothing enforces those values other than convention and log can be called with any value for level. As well we provide easy support to use PnP logging within a Timeline derived class: import { LogLevel, PnPLogging } from \"@pnp/logging\"; // any messages of LogLevel Info or higher (1) will be logged to all subscribers of the logging framework query.using(PnPLogging(LogLevel.Info)); More details on the pnp logging framework error \u00b6 Errors can happen at anytime and for any reason. If you are using the RejectOnError behavior, and both sp and graph include that in the defaults, the request promise will be rejected as expected and you can handle the error that way. The error observer's signature is: (this: Timeline<T>, err: string | Error) => void import { spfi, DefaultInit, DefaultHeaders } from \"@pnp/sp\"; import { BrowserFetchWithRetry, DefaultParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(DefaultInit(), DefaultHeaders(), BrowserFetchWithRetry(), DefaultParse()); try { const result = await sp.web(); } catch(e) { // any errors emitted will result in the promise being rejected // and ending up in the catch block as expected } In addition to the default behavior you can register your own observers on error , though it is recommended you leave the default behavior in place. query.on.error((err) => { if (err) { console.error(err); // do other stuff with the error (send it to telemetry) } }); init \u00b6 Along with dispose , init is a special moment that occurs before any of the other lifecycle providing a first chance at doing any tasks before the rest of the lifecycle starts. It is not await aware so only sync operations are supported in init by design. The init observer's signature is: (this: Timeline<T>) => void In the case of init you manipulate the Timeline instance itself query.on.init(function (this: Queryable) { // init is a great place to register additioanl observers ahead of the lifecycle this.on.pre(async function (this: Quyerable, url, init, result) { // stuff happens return [url, init, result]; }); }); pre \u00b6 Pre is used by observers to configure the request before sending. Note there is a dedicated auth moment which is prefered by convention to handle auth related tasks. The pre observer's signature is: (this: IQueryable, url: string, init: RequestInit, result: any) => Promise<[string, RequestInit, any]> The pre , auth , parse , and post are asyncReduce moments, meaning you are expected to always asyncronously return a tuple of the arguments supplied to the function. These are then passed to the next observer registered to the moment. Example of when to use pre are updates to the init, caching scenarios, or manipulation of the url (ensuring it is absolute). The init passed to pre (and auth) is the same object that will be eventually passed to fetch, meaning you can add any properties/congifuration you need. The result should always be left undefined unless you intend to end the lifecycle. If pre completes and result has any value other than undefined that value will be emitted to data and the timeline lifecycle will end. query.on.pre(async function(url, init, result) { init.cache = \"no-store\"; return [url, init, result]; }); query.on.pre(async function(url, init, result) { // setting result causes no moments after pre to be emitted other than data // once data is emitted (resolving the request promise by default) the lifecycle ends result = \"My result\"; return [url, init, result]; }); auth \u00b6 Auth functions very much like pre except it does not have the option to set the result, and the url is considered immutable by convention. Url manipulation should be done in pre. Having a seperate moment for auth allows for easily changing auth specific behavior without having to so a lot of complicated parsing of pre observers. The auth observer's signature is: (this: IQueryable, url: URL, init: RequestInit) => Promise<[URL, RequestInit]> . The pre , auth , parse , and post are asyncReduce moments, meaning you are expected to always asyncronously return a tuple of the arguments supplied to the function. These are then passed to the next observer registered to the moment. query.on.auth(async function(url, init) { // some code to get a token const token = getToken(); init.headers[\"Authorization\"] = `Bearer ${token}`; return [url, init]; }); send \u00b6 Send is implemented using the request moment which uses the first registered observer and invokes it expecting an async Response. The send observer's signature is: (this: IQueryable, url: URL, init: RequestInit) => Promise<Response> . query.on.send(async function(url, init) { // this could represent reading a file, querying a database, or making a web call return fetch(url.toString(), init); }); parse \u00b6 Parse is responsible for turning the raw Response into something usable. By default we handle errors and parse JSON responses, but any logic could be injected here. Perhaps your company encrypts things and you need to decrypt them before parsing further. The parse observer's signature is: (this: IQueryable, url: URL, response: Response, result: any | undefined) => Promise<[URL, Response, any]> . The pre , auth , parse , and post are asyncReduce moments, meaning you are expected to always asyncronously return a tuple of the arguments supplied to the function. These are then passed to the next observer registered to the moment. // you should be careful running multiple parse observers so we replace with our functionality // remember every registered observer is run, so if you set result and a later observer sets a // different value last in wins. query.on.parse.replace(async function(url, response, result) { if (response.ok) { result = await response.json(); } else { // just an example throw Error(response.statusText); } return [url, response, result]; }); post \u00b6 Post is run after parse, meaning you should have a valid fully parsed result, and provides a final opportunity to do caching, some final checks, or whatever you might need immediately prior to the request promise resolving with the value. It is recommened to NOT manipulate the result within post though nothing prevents you from doing so. The post observer's signature is: (this: IQueryable, url: URL, result: any | undefined) => Promise<[URL, any]> . The pre , auth , parse , and post are asyncReduce moments, meaning you are expected to always asyncronously return a tuple of the arguments supplied to the function. These are then passed to the next observer registered to the moment. query.on.post(async function(url, result) { // here we do some caching of a result const key = hash(url); cache(key, result); return [url, result]; }); data \u00b6 Data is called with the result of the Queryable lifecycle produced by send , understood by parse , and passed through post . By default the request promise will resolve with the value, but you can add any additional observers you need. The data observer's signature is: (this: IQueryable, result: T) => void . Clearing the data moment (ie. .on.data.clear()) after the lifecycle has started will result in the request promise never resolving query.on.data(function(result) { console.log(`Our result! ${JSON.stringify(result)}`); }); dispose \u00b6 Along with init , dispose is a special moment that occurs after all other lifecycle moments have completed. It is not await aware so only sync operations are supported in dispose by design. The dispose observer's signature is: (this: Timeline<T>) => void In the case of dispose you manipulate the Timeline instance itself query.on.dispose(function (this: Queryable) { // maybe your queryable calls a database? db.connection.close(); }); Other Methods \u00b6 Queryable exposes some additional methods beyond the observer registration. concat \u00b6 Appends the supplied string to the url without mormalizing slashes. // url: something.com/items query.concat(\"(ID)\"); // url: something.com/items(ID) toRequestUrl \u00b6 Converts the queryable's internal url parameters (url and query) into a relative or absolute url. const s = query.toRequestUrl(); query \u00b6 Map used to manage any query string parameters that will be included. Anything added here will be represented in toRequestUrl 's output. query.query.add(\"$select\", \"Title\"); toUrl \u00b6 Returns the url currently represented by the Queryable, without the querystring part const s = query.toUrl();","title":"Queryable"},{"location":"queryable/queryable/#pnpqueryablequeryable","text":"Queryable is the base class for both the sp and graph fluent interfaces and provides the structure to which observers are registered. As a background to understand more of the mechanics please see the articles on Timeline , moments , and observers . For reuse it is recommended to compose your observer registrations with behaviors .","title":"@pnp/queryable/queryable"},{"location":"queryable/queryable/#queryable-constructor","text":"By design the library is meant to allow creating the next part of a url from the current part. In this way each queryable instance is built from a previous instance. As such understanding the Queryable constructor's behavior is important. The constructor takes two parameters, the first required and the second optional. The first parameter can be another queryable, a string, or a tuple of [Queryable, string]. |Parameter|Behavior| |---|---| |Queryable|The new queryable inherits all of the supplied queryable's observers. Any supplied path (second constructor param) is appended to the supplied queryable's url becoming the url of the newly constructed queryable| |string|The new queryable will have NO registered observers. Any supplied path (second constructor param) is appended to the string becoming the url of the newly constructed queryable| |[Queryable, string]|The observers from the supplied queryable are used by the new queryable. The url is a combination of the second tuple argument (absolute url string) and any supplied path. The tuple constructor call can be used to rebase a queryable to call a different host in an otherwise identical way to another queryable. When using the tuple constructor the url provided must be absolute.","title":"Queryable Constructor"},{"location":"queryable/queryable/#examples","text":"// represents a fully configured queryable with url and registered observers // url: https://something.com const baseQueryable; // child1 will: // - reference the observers of baseQueryable // - have a url of \"https://something.com/subpath\" const child1 = Child(baseQueryable, \"subpath\"); // child2 will: // - reference the observers of baseQueryable // - have a url of \"https://something.com\" const child2 = Child(baseQueryable); // nonchild1 will: // - have NO registered observers or connection to baseQueryable // - have a url of \"https://somethingelse.com\" const nonchild1 = Child(\"https://somethingelse.com\"); // nonchild2 will: // - have NO registered observers or connection to baseQueryable // - have a url of \"https://somethingelse.com/subpath\" const nonchild2 = Child(\"https://somethingelse.com\", \"subpath\"); // rebased1 will: // - reference the observers of baseQueryable // - have a url of \"https://somethingelse.com\" const rebased1 = Child([baseQueryable, \"https://somethingelse.com\"]); // rebased2 will: // - reference the observers of baseQueryable // - have a url of \"https://somethingelse.com/subpath\" const rebased2 = Child([baseQueryable, \"https://somethingelse.com\"], \"subpath\");","title":"Examples"},{"location":"queryable/queryable/#queryable-lifecycle","text":"The Queryable lifecycle is: init pre auth send parse post data dispose As well log and error can emit at any point during the lifecycle.","title":"Queryable Lifecycle"},{"location":"queryable/queryable/#queryable-observers","text":"This section outlines how to write observers for the Queryable lifecycle, and the expectations of each moment's observer behaviors. In the below samples consider the variable query to mean any valid Queryable derived object.","title":"Queryable Observers"},{"location":"queryable/queryable/#log","text":"Anything can log to a given timeline's log using the public log method and to intercept those message you can subscribed to the log event. The log observer's signature is: (this: Timeline<T>, message: string, level: number) => void query.on.log((message, level) => { // log only warnings or errors if (level > 1) { console.log(message); } }); The level value is a number indicating the severity of the message. Internally we use the values from the LogLevel enum in @pnp/logging: Verbose = 0, Info = 1, Warning = 2, Error = 3. Be aware that nothing enforces those values other than convention and log can be called with any value for level. As well we provide easy support to use PnP logging within a Timeline derived class: import { LogLevel, PnPLogging } from \"@pnp/logging\"; // any messages of LogLevel Info or higher (1) will be logged to all subscribers of the logging framework query.using(PnPLogging(LogLevel.Info)); More details on the pnp logging framework","title":"log"},{"location":"queryable/queryable/#error","text":"Errors can happen at anytime and for any reason. If you are using the RejectOnError behavior, and both sp and graph include that in the defaults, the request promise will be rejected as expected and you can handle the error that way. The error observer's signature is: (this: Timeline<T>, err: string | Error) => void import { spfi, DefaultInit, DefaultHeaders } from \"@pnp/sp\"; import { BrowserFetchWithRetry, DefaultParse } from \"@pnp/queryable\"; import \"@pnp/sp/webs\"; const sp = spfi().using(DefaultInit(), DefaultHeaders(), BrowserFetchWithRetry(), DefaultParse()); try { const result = await sp.web(); } catch(e) { // any errors emitted will result in the promise being rejected // and ending up in the catch block as expected } In addition to the default behavior you can register your own observers on error , though it is recommended you leave the default behavior in place. query.on.error((err) => { if (err) { console.error(err); // do other stuff with the error (send it to telemetry) } });","title":"error"},{"location":"queryable/queryable/#init","text":"Along with dispose , init is a special moment that occurs before any of the other lifecycle providing a first chance at doing any tasks before the rest of the lifecycle starts. It is not await aware so only sync operations are supported in init by design. The init observer's signature is: (this: Timeline<T>) => void In the case of init you manipulate the Timeline instance itself query.on.init(function (this: Queryable) { // init is a great place to register additioanl observers ahead of the lifecycle this.on.pre(async function (this: Quyerable, url, init, result) { // stuff happens return [url, init, result]; }); });","title":"init"},{"location":"queryable/queryable/#pre","text":"Pre is used by observers to configure the request before sending. Note there is a dedicated auth moment which is prefered by convention to handle auth related tasks. The pre observer's signature is: (this: IQueryable, url: string, init: RequestInit, result: any) => Promise<[string, RequestInit, any]> The pre , auth , parse , and post are asyncReduce moments, meaning you are expected to always asyncronously return a tuple of the arguments supplied to the function. These are then passed to the next observer registered to the moment. Example of when to use pre are updates to the init, caching scenarios, or manipulation of the url (ensuring it is absolute). The init passed to pre (and auth) is the same object that will be eventually passed to fetch, meaning you can add any properties/congifuration you need. The result should always be left undefined unless you intend to end the lifecycle. If pre completes and result has any value other than undefined that value will be emitted to data and the timeline lifecycle will end. query.on.pre(async function(url, init, result) { init.cache = \"no-store\"; return [url, init, result]; }); query.on.pre(async function(url, init, result) { // setting result causes no moments after pre to be emitted other than data // once data is emitted (resolving the request promise by default) the lifecycle ends result = \"My result\"; return [url, init, result]; });","title":"pre"},{"location":"queryable/queryable/#auth","text":"Auth functions very much like pre except it does not have the option to set the result, and the url is considered immutable by convention. Url manipulation should be done in pre. Having a seperate moment for auth allows for easily changing auth specific behavior without having to so a lot of complicated parsing of pre observers. The auth observer's signature is: (this: IQueryable, url: URL, init: RequestInit) => Promise<[URL, RequestInit]> . The pre , auth , parse , and post are asyncReduce moments, meaning you are expected to always asyncronously return a tuple of the arguments supplied to the function. These are then passed to the next observer registered to the moment. query.on.auth(async function(url, init) { // some code to get a token const token = getToken(); init.headers[\"Authorization\"] = `Bearer ${token}`; return [url, init]; });","title":"auth"},{"location":"queryable/queryable/#send","text":"Send is implemented using the request moment which uses the first registered observer and invokes it expecting an async Response. The send observer's signature is: (this: IQueryable, url: URL, init: RequestInit) => Promise<Response> . query.on.send(async function(url, init) { // this could represent reading a file, querying a database, or making a web call return fetch(url.toString(), init); });","title":"send"},{"location":"queryable/queryable/#parse","text":"Parse is responsible for turning the raw Response into something usable. By default we handle errors and parse JSON responses, but any logic could be injected here. Perhaps your company encrypts things and you need to decrypt them before parsing further. The parse observer's signature is: (this: IQueryable, url: URL, response: Response, result: any | undefined) => Promise<[URL, Response, any]> . The pre , auth , parse , and post are asyncReduce moments, meaning you are expected to always asyncronously return a tuple of the arguments supplied to the function. These are then passed to the next observer registered to the moment. // you should be careful running multiple parse observers so we replace with our functionality // remember every registered observer is run, so if you set result and a later observer sets a // different value last in wins. query.on.parse.replace(async function(url, response, result) { if (response.ok) { result = await response.json(); } else { // just an example throw Error(response.statusText); } return [url, response, result]; });","title":"parse"},{"location":"queryable/queryable/#post","text":"Post is run after parse, meaning you should have a valid fully parsed result, and provides a final opportunity to do caching, some final checks, or whatever you might need immediately prior to the request promise resolving with the value. It is recommened to NOT manipulate the result within post though nothing prevents you from doing so. The post observer's signature is: (this: IQueryable, url: URL, result: any | undefined) => Promise<[URL, any]> . The pre , auth , parse , and post are asyncReduce moments, meaning you are expected to always asyncronously return a tuple of the arguments supplied to the function. These are then passed to the next observer registered to the moment. query.on.post(async function(url, result) { // here we do some caching of a result const key = hash(url); cache(key, result); return [url, result]; });","title":"post"},{"location":"queryable/queryable/#data","text":"Data is called with the result of the Queryable lifecycle produced by send , understood by parse , and passed through post . By default the request promise will resolve with the value, but you can add any additional observers you need. The data observer's signature is: (this: IQueryable, result: T) => void . Clearing the data moment (ie. .on.data.clear()) after the lifecycle has started will result in the request promise never resolving query.on.data(function(result) { console.log(`Our result! ${JSON.stringify(result)}`); });","title":"data"},{"location":"queryable/queryable/#dispose","text":"Along with init , dispose is a special moment that occurs after all other lifecycle moments have completed. It is not await aware so only sync operations are supported in dispose by design. The dispose observer's signature is: (this: Timeline<T>) => void In the case of dispose you manipulate the Timeline instance itself query.on.dispose(function (this: Queryable) { // maybe your queryable calls a database? db.connection.close(); });","title":"dispose"},{"location":"queryable/queryable/#other-methods","text":"Queryable exposes some additional methods beyond the observer registration.","title":"Other Methods"},{"location":"queryable/queryable/#concat","text":"Appends the supplied string to the url without mormalizing slashes. // url: something.com/items query.concat(\"(ID)\"); // url: something.com/items(ID)","title":"concat"},{"location":"queryable/queryable/#torequesturl","text":"Converts the queryable's internal url parameters (url and query) into a relative or absolute url. const s = query.toRequestUrl();","title":"toRequestUrl"},{"location":"queryable/queryable/#query","text":"Map used to manage any query string parameters that will be included. Anything added here will be represented in toRequestUrl 's output. query.query.add(\"$select\", \"Title\");","title":"query"},{"location":"queryable/queryable/#tourl","text":"Returns the url currently represented by the Queryable, without the querystring part const s = query.toUrl();","title":"toUrl"},{"location":"sp/alias-parameters/","text":"@pnp/sp - Aliased Parameters \u00b6 Within the @pnp/sp api you can alias any of the parameters so they will be written into the querystring. This is most helpful if you are hitting up against the url length limits when working with files and folders. To alias a parameter you include the label name, a separator (\"::\") and the value in the string. You also need to prepend a \"!\" to the string to trigger the replacement. You can see this below, as well as the string that will be generated. Labels must start with a \"@\" followed by a letter. It is also your responsibility to ensure that the aliases you supply do not conflict, for example if you use \"@p1\" you should use \"@p2\" for a second parameter alias in the same query. Construct a parameter alias \u00b6 Pattern: !@{label name}::{value} Example: \"!@p1::\\sites\\dev\" or \"!@p2::\\text.txt\" Example without aliasing \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // still works as expected, no aliasing const query = sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/\").files.select(\"Title\").top(3); console.log(query.toUrl()); // _api/web/getFolderByServerRelativeUrl('/sites/dev/Shared Documents/')/files console.log(query.toRequestUrl()); // _api/web/getFolderByServerRelativeUrl('/sites/dev/Shared Documents/')/files?$select=Title&$top=3 const r = await query(); console.log(r); Example with aliasing \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // same query with aliasing const query = sp.web.getFolderByServerRelativeUrl(\"!@p1::/sites/dev/Shared Documents/\").files.select(\"Title\").top(3); console.log(query.toUrl()); // _api/web/getFolderByServerRelativeUrl('!@p1::/sites/dev/Shared Documents/')/files console.log(query.toRequestUrl()); // _api/web/getFolderByServerRelativeUrl(@p1)/files?@p1='/sites/dev/Shared Documents/'&$select=Title&$top=3 const r = await query(); console.log(r); Example with aliasing and batching \u00b6 Aliasing is supported with batching as well: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // same query with aliasing and batching const [batchedWeb, execute] = await sp.web.batched(); const query = batchedWeb.web.getFolderByServerRelativePath(\"!@p1::/sites/dev/Shared Documents/\").files.select(\"Title\").top(3); console.log(query.toUrl()); // _api/web/getFolderByServerRelativeUrl('!@p1::/sites/dev/Shared Documents/')/files console.log(query.toRequestUrl()); // _api/web/getFolderByServerRelativeUrl(@p1)/files?@p1='/sites/dev/Shared Documents/'&$select=Title&$top=3 query().then(r => { console.log(r); }); execute();","title":"Alias Parameters"},{"location":"sp/alias-parameters/#pnpsp-aliased-parameters","text":"Within the @pnp/sp api you can alias any of the parameters so they will be written into the querystring. This is most helpful if you are hitting up against the url length limits when working with files and folders. To alias a parameter you include the label name, a separator (\"::\") and the value in the string. You also need to prepend a \"!\" to the string to trigger the replacement. You can see this below, as well as the string that will be generated. Labels must start with a \"@\" followed by a letter. It is also your responsibility to ensure that the aliases you supply do not conflict, for example if you use \"@p1\" you should use \"@p2\" for a second parameter alias in the same query.","title":"@pnp/sp - Aliased Parameters"},{"location":"sp/alias-parameters/#construct-a-parameter-alias","text":"Pattern: !@{label name}::{value} Example: \"!@p1::\\sites\\dev\" or \"!@p2::\\text.txt\"","title":"Construct a parameter alias"},{"location":"sp/alias-parameters/#example-without-aliasing","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // still works as expected, no aliasing const query = sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/\").files.select(\"Title\").top(3); console.log(query.toUrl()); // _api/web/getFolderByServerRelativeUrl('/sites/dev/Shared Documents/')/files console.log(query.toRequestUrl()); // _api/web/getFolderByServerRelativeUrl('/sites/dev/Shared Documents/')/files?$select=Title&$top=3 const r = await query(); console.log(r);","title":"Example without aliasing"},{"location":"sp/alias-parameters/#example-with-aliasing","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // same query with aliasing const query = sp.web.getFolderByServerRelativeUrl(\"!@p1::/sites/dev/Shared Documents/\").files.select(\"Title\").top(3); console.log(query.toUrl()); // _api/web/getFolderByServerRelativeUrl('!@p1::/sites/dev/Shared Documents/')/files console.log(query.toRequestUrl()); // _api/web/getFolderByServerRelativeUrl(@p1)/files?@p1='/sites/dev/Shared Documents/'&$select=Title&$top=3 const r = await query(); console.log(r);","title":"Example with aliasing"},{"location":"sp/alias-parameters/#example-with-aliasing-and-batching","text":"Aliasing is supported with batching as well: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // same query with aliasing and batching const [batchedWeb, execute] = await sp.web.batched(); const query = batchedWeb.web.getFolderByServerRelativePath(\"!@p1::/sites/dev/Shared Documents/\").files.select(\"Title\").top(3); console.log(query.toUrl()); // _api/web/getFolderByServerRelativeUrl('!@p1::/sites/dev/Shared Documents/')/files console.log(query.toRequestUrl()); // _api/web/getFolderByServerRelativeUrl(@p1)/files?@p1='/sites/dev/Shared Documents/'&$select=Title&$top=3 query().then(r => { console.log(r); }); execute();","title":"Example with aliasing and batching"},{"location":"sp/alm/","text":"@pnp/sp/appcatalog \u00b6 The ALM api allows you to manage app installations both in the tenant app catalog and individual site app catalogs. Some of the methods are still in beta and as such may change in the future. This article outlines how to call this api using @pnp/sp. Remember all these actions are bound by permissions so it is likely most users will not have the rights to perform these ALM actions. Understanding the App Catalog Hierarchy \u00b6 Before you begin provisioning applications it is important to understand the relationship between a local web catalog and the tenant app catalog. Some of the methods described below only work within the context of the tenant app catalog web, such as adding an app to the catalog and the app actions retract, remove, and deploy. You can install, uninstall, and upgrade an app in any web. Read more in the official documentation . Referencing an App Catalog \u00b6 There are several ways using @pnp/sp to get a reference to an app catalog. These methods are to provide you the greatest amount of flexibility in gaining access to the app catalog. Ultimately each method produces an AppCatalog instance differentiated only by the web to which it points. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/appcatalog\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // get the current context web's app catalog const catalog = await sp.web.getAppCatalog()(); // you can also chain off the app catalog const apps = await sp.web.getAppCatalog()(); console.log(apps); import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/appcatalog\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // you can get the tenant app catalog (or any app catalog) by using the getTenantAppCatalogWeb method const appCatWeb = await sp.getTenantAppCatalogWeb()(); const appCatalog = await appCatWeb.getAppCatalog()(); // you can get the tenant app catalog (or any app catalog) by passing in a url // get the tenant app catalog const tenantCatalog = await sp.web.getAppCatalog(\"https://mytenant.sharepoint.com/sites/appcatalog\")(); // get a different app catalog const catalog = await sp.web.getAppCatalog(\"https://mytenant.sharepoint.com/sites/anothersite\")(); // alternatively you can create a new app catalog instance directly by importing the AppCatalog class import { IAppCatalog, AppCatalog } from '@pnp/sp/appcatalog'; const catalog: IAppCatalog = await AppCatalog(\"https://mytenant.sharepoint.com/sites/apps\")(); // and finally you can combine use of the Web and AppCatalog classes to create an AppCatalog instance from an existing Web import { spfi } from \"@pnp/sp\"; import { Web } from '@pnp/sp/webs'; import { AppCatalog } from '@pnp/sp/appcatalog'; const sp = spfi().using(...); const web = Web([sp.web, \"https://mytenant.sharepoint.com/sites/apps\"]); const catalog = await AppCatalog(web)(); The following examples make use of a variable \"catalog\" which is assumed to represent an AppCatalog instance obtained using one of the above methods, supporting code is omitted for brevity. List Available Apps \u00b6 The AppCatalog is itself a queryable collection so you can query this object directly to get a list of available apps. Also, the odata operators work on the catalog to sort, filter, and select. // get available apps await catalog(); // get available apps selecting two fields await catalog.select(\"Title\", \"Deployed\")(); Add an App \u00b6 This action must be performed in the context of the tenant app catalog // this represents the file bytes of the app package file const blob = new Blob(); // there is an optional third argument to control overwriting existing files const r = await catalog.add(\"myapp.app\", blob); // this is at its core a file add operation so you have access to the response data as well // as a File instance representing the created file console.log(JSON.stringify(r.data, null, 4)); // all file operations are available const nameData = await r.file.select(\"Name\")(); Get an App \u00b6 You can get the details of a single app by GUID id. This is also the branch point to perform specific app actions const app = await catalog.getAppById(\"5137dff1-0b79-4ebc-8af4-ca01f7bd393c\")(); Perform app actions \u00b6 Remember: retract, deploy, and remove only work in the context of the tenant app catalog web. All of these methods return void and you can monitor success by wrapping the call in a try/catch block. const myAppId = \"5137dff1-0b79-4ebc-8af4-ca01f7bd393c\"; // deploy await catalog.getAppById(myAppId).deploy(); // retract await catalog.getAppById(myAppId).retract(); // install await catalog.getAppById(myAppId).install(); // uninstall await catalog.getAppById(myAppId).uninstall(); // upgrade await catalog.getAppById(myAppId).upgrade(); // remove await catalog.getAppById(myAppId).remove(); Synchronize a solution/app to the Microsoft Teams App Catalog \u00b6 By default this REST call requires the SharePoint item id of the app, not the app id. PnPjs will try to fetch the SharePoint item id by default. You can still use this the second parameter useSharePointItemId to pass your own item id in the first parameter id . // Using the app id await catalog.syncSolutionToTeams(\"5137dff1-0b79-4ebc-8af4-ca01f7bd393c\"); // Using the SharePoint apps item id await catalog.syncSolutionToTeams(\"123\", true); Notes \u00b6 The app catalog is just a document library under the hood, so you can also perform non-ALM actions on the library if needed. But you should be aware of possible side-effects to the ALM life-cycle when doing so.","title":"ALM api"},{"location":"sp/alm/#pnpspappcatalog","text":"The ALM api allows you to manage app installations both in the tenant app catalog and individual site app catalogs. Some of the methods are still in beta and as such may change in the future. This article outlines how to call this api using @pnp/sp. Remember all these actions are bound by permissions so it is likely most users will not have the rights to perform these ALM actions.","title":"@pnp/sp/appcatalog"},{"location":"sp/alm/#understanding-the-app-catalog-hierarchy","text":"Before you begin provisioning applications it is important to understand the relationship between a local web catalog and the tenant app catalog. Some of the methods described below only work within the context of the tenant app catalog web, such as adding an app to the catalog and the app actions retract, remove, and deploy. You can install, uninstall, and upgrade an app in any web. Read more in the official documentation .","title":"Understanding the App Catalog Hierarchy"},{"location":"sp/alm/#referencing-an-app-catalog","text":"There are several ways using @pnp/sp to get a reference to an app catalog. These methods are to provide you the greatest amount of flexibility in gaining access to the app catalog. Ultimately each method produces an AppCatalog instance differentiated only by the web to which it points. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/appcatalog\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // get the current context web's app catalog const catalog = await sp.web.getAppCatalog()(); // you can also chain off the app catalog const apps = await sp.web.getAppCatalog()(); console.log(apps); import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/appcatalog\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // you can get the tenant app catalog (or any app catalog) by using the getTenantAppCatalogWeb method const appCatWeb = await sp.getTenantAppCatalogWeb()(); const appCatalog = await appCatWeb.getAppCatalog()(); // you can get the tenant app catalog (or any app catalog) by passing in a url // get the tenant app catalog const tenantCatalog = await sp.web.getAppCatalog(\"https://mytenant.sharepoint.com/sites/appcatalog\")(); // get a different app catalog const catalog = await sp.web.getAppCatalog(\"https://mytenant.sharepoint.com/sites/anothersite\")(); // alternatively you can create a new app catalog instance directly by importing the AppCatalog class import { IAppCatalog, AppCatalog } from '@pnp/sp/appcatalog'; const catalog: IAppCatalog = await AppCatalog(\"https://mytenant.sharepoint.com/sites/apps\")(); // and finally you can combine use of the Web and AppCatalog classes to create an AppCatalog instance from an existing Web import { spfi } from \"@pnp/sp\"; import { Web } from '@pnp/sp/webs'; import { AppCatalog } from '@pnp/sp/appcatalog'; const sp = spfi().using(...); const web = Web([sp.web, \"https://mytenant.sharepoint.com/sites/apps\"]); const catalog = await AppCatalog(web)(); The following examples make use of a variable \"catalog\" which is assumed to represent an AppCatalog instance obtained using one of the above methods, supporting code is omitted for brevity.","title":"Referencing an App Catalog"},{"location":"sp/alm/#list-available-apps","text":"The AppCatalog is itself a queryable collection so you can query this object directly to get a list of available apps. Also, the odata operators work on the catalog to sort, filter, and select. // get available apps await catalog(); // get available apps selecting two fields await catalog.select(\"Title\", \"Deployed\")();","title":"List Available Apps"},{"location":"sp/alm/#add-an-app","text":"This action must be performed in the context of the tenant app catalog // this represents the file bytes of the app package file const blob = new Blob(); // there is an optional third argument to control overwriting existing files const r = await catalog.add(\"myapp.app\", blob); // this is at its core a file add operation so you have access to the response data as well // as a File instance representing the created file console.log(JSON.stringify(r.data, null, 4)); // all file operations are available const nameData = await r.file.select(\"Name\")();","title":"Add an App"},{"location":"sp/alm/#get-an-app","text":"You can get the details of a single app by GUID id. This is also the branch point to perform specific app actions const app = await catalog.getAppById(\"5137dff1-0b79-4ebc-8af4-ca01f7bd393c\")();","title":"Get an App"},{"location":"sp/alm/#perform-app-actions","text":"Remember: retract, deploy, and remove only work in the context of the tenant app catalog web. All of these methods return void and you can monitor success by wrapping the call in a try/catch block. const myAppId = \"5137dff1-0b79-4ebc-8af4-ca01f7bd393c\"; // deploy await catalog.getAppById(myAppId).deploy(); // retract await catalog.getAppById(myAppId).retract(); // install await catalog.getAppById(myAppId).install(); // uninstall await catalog.getAppById(myAppId).uninstall(); // upgrade await catalog.getAppById(myAppId).upgrade(); // remove await catalog.getAppById(myAppId).remove();","title":"Perform app actions"},{"location":"sp/alm/#synchronize-a-solutionapp-to-the-microsoft-teams-app-catalog","text":"By default this REST call requires the SharePoint item id of the app, not the app id. PnPjs will try to fetch the SharePoint item id by default. You can still use this the second parameter useSharePointItemId to pass your own item id in the first parameter id . // Using the app id await catalog.syncSolutionToTeams(\"5137dff1-0b79-4ebc-8af4-ca01f7bd393c\"); // Using the SharePoint apps item id await catalog.syncSolutionToTeams(\"123\", true);","title":"Synchronize a solution/app to the Microsoft Teams App Catalog"},{"location":"sp/alm/#notes","text":"The app catalog is just a document library under the hood, so you can also perform non-ALM actions on the library if needed. But you should be aware of possible side-effects to the ALM life-cycle when doing so.","title":"Notes"},{"location":"sp/attachments/","text":"@pnp/sp/attachments \u00b6 The ability to attach file to list items allows users to track documents outside of a document library. You can use the PnP JS Core library to work with attachments as outlined below. Get attachments \u00b6 import { spfi } from \"@pnp/sp\"; import { IAttachmentInfo } from \"@pnp/sp/attachments\"; import { IItem } from \"@pnp/sp/items/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1); // get all the attachments const info: IAttachmentInfo[] = await item.attachmentFiles(); // get a single file by file name const info2: IAttachmentInfo = await item.attachmentFiles.getByName(\"file.txt\")(); // select specific properties using odata operators and use Pick to type the result const info3: Pick<IAttachmentInfo, \"ServerRelativeUrl\">[] = await item.attachmentFiles.select(\"ServerRelativeUrl\")(); Add an Attachment \u00b6 You can add an attachment to a list item using the add method. This method takes either a string, Blob, or ArrayBuffer. import { spfi } from \"@pnp/sp\"; import { IItem } from \"@pnp/sp/items\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1); await item.attachmentFiles.add(\"file2.txt\", \"Here is my content\"); Read Attachment Content \u00b6 You can read the content of an attachment as a string, Blob, ArrayBuffer, or json using the methods supplied. import { spfi } from \"@pnp/sp\"; import { IItem } from \"@pnp/sp/items/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1); const text = await item.attachmentFiles.getByName(\"file.txt\").getText(); // use this in the browser, does not work in nodejs const blob = await item.attachmentFiles.getByName(\"file.mp4\").getBlob(); // use this in nodejs const buffer = await item.attachmentFiles.getByName(\"file.mp4\").getBuffer(); // file must be valid json const json = await item.attachmentFiles.getByName(\"file.json\").getJSON(); Update Attachment Content \u00b6 You can also update the content of an attachment. This API is limited compared to the full file API - so if you need to upload large files consider using a document library. import { spfi } from \"@pnp/sp\"; import { IItem } from \"@pnp/sp/items/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1); await item.attachmentFiles.getByName(\"file2.txt\").setContent(\"My new content!!!\"); Delete Attachment \u00b6 import { spfi } from \"@pnp/sp\"; import { IItem } from \"@pnp/sp/items/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1); await item.attachmentFiles.getByName(\"file2.txt\").delete(); Recycle Attachment \u00b6 Delete the attachment and send it to recycle bin import { spfi } from \"@pnp/sp\"; import { IItem } from \"@pnp/sp/items/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1); await item.attachmentFiles.getByName(\"file2.txt\").recycle(); Recycle Multiple Attachments \u00b6 Delete multiple attachments and send them to recycle bin import { spfi } from \"@pnp/sp\"; import { IList } from \"@pnp/sp/lists/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const [batchedSP, execute] = sp.batched(); const item = await batchedSP.web.lists.getByTitle(\"MyList\").items.getById(2); item.attachmentFiles.getByName(\"1.txt\").recycle(); item.attachmentFiles.getByName(\"2.txt\").recycle(); await execute();","title":"Attachments"},{"location":"sp/attachments/#pnpspattachments","text":"The ability to attach file to list items allows users to track documents outside of a document library. You can use the PnP JS Core library to work with attachments as outlined below.","title":"@pnp/sp/attachments"},{"location":"sp/attachments/#get-attachments","text":"import { spfi } from \"@pnp/sp\"; import { IAttachmentInfo } from \"@pnp/sp/attachments\"; import { IItem } from \"@pnp/sp/items/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1); // get all the attachments const info: IAttachmentInfo[] = await item.attachmentFiles(); // get a single file by file name const info2: IAttachmentInfo = await item.attachmentFiles.getByName(\"file.txt\")(); // select specific properties using odata operators and use Pick to type the result const info3: Pick<IAttachmentInfo, \"ServerRelativeUrl\">[] = await item.attachmentFiles.select(\"ServerRelativeUrl\")();","title":"Get attachments"},{"location":"sp/attachments/#add-an-attachment","text":"You can add an attachment to a list item using the add method. This method takes either a string, Blob, or ArrayBuffer. import { spfi } from \"@pnp/sp\"; import { IItem } from \"@pnp/sp/items\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1); await item.attachmentFiles.add(\"file2.txt\", \"Here is my content\");","title":"Add an Attachment"},{"location":"sp/attachments/#read-attachment-content","text":"You can read the content of an attachment as a string, Blob, ArrayBuffer, or json using the methods supplied. import { spfi } from \"@pnp/sp\"; import { IItem } from \"@pnp/sp/items/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1); const text = await item.attachmentFiles.getByName(\"file.txt\").getText(); // use this in the browser, does not work in nodejs const blob = await item.attachmentFiles.getByName(\"file.mp4\").getBlob(); // use this in nodejs const buffer = await item.attachmentFiles.getByName(\"file.mp4\").getBuffer(); // file must be valid json const json = await item.attachmentFiles.getByName(\"file.json\").getJSON();","title":"Read Attachment Content"},{"location":"sp/attachments/#update-attachment-content","text":"You can also update the content of an attachment. This API is limited compared to the full file API - so if you need to upload large files consider using a document library. import { spfi } from \"@pnp/sp\"; import { IItem } from \"@pnp/sp/items/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1); await item.attachmentFiles.getByName(\"file2.txt\").setContent(\"My new content!!!\");","title":"Update Attachment Content"},{"location":"sp/attachments/#delete-attachment","text":"import { spfi } from \"@pnp/sp\"; import { IItem } from \"@pnp/sp/items/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1); await item.attachmentFiles.getByName(\"file2.txt\").delete();","title":"Delete Attachment"},{"location":"sp/attachments/#recycle-attachment","text":"Delete the attachment and send it to recycle bin import { spfi } from \"@pnp/sp\"; import { IItem } from \"@pnp/sp/items/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const item: IItem = sp.web.lists.getByTitle(\"MyList\").items.getById(1); await item.attachmentFiles.getByName(\"file2.txt\").recycle();","title":"Recycle Attachment"},{"location":"sp/attachments/#recycle-multiple-attachments","text":"Delete multiple attachments and send them to recycle bin import { spfi } from \"@pnp/sp\"; import { IList } from \"@pnp/sp/lists/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/attachments\"; const sp = spfi(...); const [batchedSP, execute] = sp.batched(); const item = await batchedSP.web.lists.getByTitle(\"MyList\").items.getById(2); item.attachmentFiles.getByName(\"1.txt\").recycle(); item.attachmentFiles.getByName(\"2.txt\").recycle(); await execute();","title":"Recycle Multiple Attachments"},{"location":"sp/behaviors/","text":"@pnp/sp : behaviors \u00b6 The article describes the behaviors exported by the @pnp/sp library. Please also see available behaviors in @pnp/core , @pnp/queryable , @pnp/graph , and @pnp/nodejs . DefaultInit \u00b6 The DefaultInit behavior, is a composed behavior which includes Telemetry, RejectOnError, and ResolveOnData. Additionally, it sets the cache and credentials properties of the RequestInit. import { spfi, DefaultInit } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(DefaultInit()); await sp.web(); DefaultHeaders \u00b6 The DefaultHeaders behavior uses InjectHeaders to set the Accept, Content-Type, and User-Agent headers. import { spfi, DefaultHeaders } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(DefaultHeaders()); await sp.web(); DefaultInit and DefaultHeaders are separated to make it easier to create your own default headers or init behavior. You should include both if composing your own default behavior. RequestDigest \u00b6 The RequestDigest behavior ensures that the \"X-RequestDigest\" header is included for requests where it is needed. If you are using MSAL, supplying your own tokens, or doing a GET request it is not required. As well it cache's the digests to reduce the number of requests. Optionally you can provide a function to supply your own digests. The logic followed by the behavior is to check the cache, run a hook if provided, and finally make a request to \"/_api/contextinfo\" for the value. import { spfi, RequestDigest } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(RequestDigest()); await sp.web(); With a hook: import { dateAdd } from \"@pnp/core\"; import { spfi, RequestDigest } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(RequestDigest((url, init) => { // the url will be a URL instance representing the request url // init will be the RequestInit return { expiration: dateAdd(new Date(), \"minute\", 20); value: \"MY VALID REQUEST DIGEST VALUE\"; } })); await sp.web(); SPBrowser \u00b6 A composed behavior suitable for use within a SPA or other scenario outside of SPFx. It includes DefaultHeaders, DefaultInit, BrowserFetchWithRetry, DefaultParse, and RequestDigest. As well it adds a pre observer to try and ensure the request url is absolute if one is supplied in props. The baseUrl prop can be used to configure a fallback when making urls absolute. If you are building a SPA you likely need to handle authentication. For this we support the msal library which you can use directly or as a pattern to roll your own MSAL implementation behavior. import { spfi, SPBrowser } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(SPBrowser()); await sp.web(); You can also set a baseUrl. This is equivalent to calling spfi with an absolute url. import { spfi, SPBrowser } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(SPBrowser({ baseUrl: \"https://tenant.sharepoint.com/sites/dev\" })); // this is the same as the above, and maybe a litter easier to read, and is more efficient // const sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPBrowser()); await sp.web(); SPFx \u00b6 This behavior is designed to work closely with SPFx. The only parameter is the current SPFx Context. SPFx is a composed behavior including DefaultHeaders, DefaultInit, BrowserFetchWithRetry, DefaultParse, and RequestDigest. A hook is supplied to RequestDigest that will attempt to use any existing legacyPageContext formDigestValue it can find, otherwise defaults to the base RequestDigest behavior. It also sets a pre handler to ensure the url is absolute, using the SPFx context's pageContext.web.absoluteUrl as the base. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; // this.context represents the context object within an SPFx webpart, application customizer, or ACE. const sp = spfi(...); await sp.web(); Note that both the sp and graph libraries export an SPFx behavior. They are unique to their respective libraries and cannot be shared, i.e. you can't use the graph SPFx to setup sp and vice-versa. import { GraphFI, graphfi, SPFx as graphSPFx } from '@pnp/graph' import { SPFI, spfi, SPFx as spSPFx } from '@pnp/sp' const sp = spfi().using(spSPFx(this.context)); const graph = graphfi().using(graphSPFx(this.context)); Telemetry \u00b6 This behavior helps provide usage statistics to us about the number of requests made to the service using this library, as well as the methods being called. We do not, and cannot, access any PII information or tie requests to specific users. The data aggregates at the tenant level. We use this information to better understand how the library is being used and look for opportunities to improve high-use code paths. You can always opt out of the telemetry by creating your own default behaviors and leaving it out. However, we encourgage you to include it as it helps us understand usage and impact of the work. import { spfi, Telemetry } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(Telemetry()); await sp.web();","title":"Behaviors"},{"location":"sp/behaviors/#pnpsp-behaviors","text":"The article describes the behaviors exported by the @pnp/sp library. Please also see available behaviors in @pnp/core , @pnp/queryable , @pnp/graph , and @pnp/nodejs .","title":"@pnp/sp : behaviors"},{"location":"sp/behaviors/#defaultinit","text":"The DefaultInit behavior, is a composed behavior which includes Telemetry, RejectOnError, and ResolveOnData. Additionally, it sets the cache and credentials properties of the RequestInit. import { spfi, DefaultInit } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(DefaultInit()); await sp.web();","title":"DefaultInit"},{"location":"sp/behaviors/#defaultheaders","text":"The DefaultHeaders behavior uses InjectHeaders to set the Accept, Content-Type, and User-Agent headers. import { spfi, DefaultHeaders } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(DefaultHeaders()); await sp.web(); DefaultInit and DefaultHeaders are separated to make it easier to create your own default headers or init behavior. You should include both if composing your own default behavior.","title":"DefaultHeaders"},{"location":"sp/behaviors/#requestdigest","text":"The RequestDigest behavior ensures that the \"X-RequestDigest\" header is included for requests where it is needed. If you are using MSAL, supplying your own tokens, or doing a GET request it is not required. As well it cache's the digests to reduce the number of requests. Optionally you can provide a function to supply your own digests. The logic followed by the behavior is to check the cache, run a hook if provided, and finally make a request to \"/_api/contextinfo\" for the value. import { spfi, RequestDigest } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(RequestDigest()); await sp.web(); With a hook: import { dateAdd } from \"@pnp/core\"; import { spfi, RequestDigest } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(RequestDigest((url, init) => { // the url will be a URL instance representing the request url // init will be the RequestInit return { expiration: dateAdd(new Date(), \"minute\", 20); value: \"MY VALID REQUEST DIGEST VALUE\"; } })); await sp.web();","title":"RequestDigest"},{"location":"sp/behaviors/#spbrowser","text":"A composed behavior suitable for use within a SPA or other scenario outside of SPFx. It includes DefaultHeaders, DefaultInit, BrowserFetchWithRetry, DefaultParse, and RequestDigest. As well it adds a pre observer to try and ensure the request url is absolute if one is supplied in props. The baseUrl prop can be used to configure a fallback when making urls absolute. If you are building a SPA you likely need to handle authentication. For this we support the msal library which you can use directly or as a pattern to roll your own MSAL implementation behavior. import { spfi, SPBrowser } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(SPBrowser()); await sp.web(); You can also set a baseUrl. This is equivalent to calling spfi with an absolute url. import { spfi, SPBrowser } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(SPBrowser({ baseUrl: \"https://tenant.sharepoint.com/sites/dev\" })); // this is the same as the above, and maybe a litter easier to read, and is more efficient // const sp = spfi(\"https://tenant.sharepoint.com/sites/dev\").using(SPBrowser()); await sp.web();","title":"SPBrowser"},{"location":"sp/behaviors/#spfx","text":"This behavior is designed to work closely with SPFx. The only parameter is the current SPFx Context. SPFx is a composed behavior including DefaultHeaders, DefaultInit, BrowserFetchWithRetry, DefaultParse, and RequestDigest. A hook is supplied to RequestDigest that will attempt to use any existing legacyPageContext formDigestValue it can find, otherwise defaults to the base RequestDigest behavior. It also sets a pre handler to ensure the url is absolute, using the SPFx context's pageContext.web.absoluteUrl as the base. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; // this.context represents the context object within an SPFx webpart, application customizer, or ACE. const sp = spfi(...); await sp.web(); Note that both the sp and graph libraries export an SPFx behavior. They are unique to their respective libraries and cannot be shared, i.e. you can't use the graph SPFx to setup sp and vice-versa. import { GraphFI, graphfi, SPFx as graphSPFx } from '@pnp/graph' import { SPFI, spfi, SPFx as spSPFx } from '@pnp/sp' const sp = spfi().using(spSPFx(this.context)); const graph = graphfi().using(graphSPFx(this.context));","title":"SPFx"},{"location":"sp/behaviors/#telemetry","text":"This behavior helps provide usage statistics to us about the number of requests made to the service using this library, as well as the methods being called. We do not, and cannot, access any PII information or tie requests to specific users. The data aggregates at the tenant level. We use this information to better understand how the library is being used and look for opportunities to improve high-use code paths. You can always opt out of the telemetry by creating your own default behaviors and leaving it out. However, we encourgage you to include it as it helps us understand usage and impact of the work. import { spfi, Telemetry } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi().using(Telemetry()); await sp.web();","title":"Telemetry"},{"location":"sp/clientside-pages/","text":"@pnp/sp/clientside-pages \u00b6 The 'clientside-pages' module allows you to create, edit, and delete modern SharePoint pages. There are methods to update the page settings and add/remove client-side web parts. Create a new Page \u00b6 You can create a new client-side page in several ways, all are equivalent. Create using IWeb.addClientsidePage \u00b6 import { spfi, SPFI } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages/web\"; import { PromotedState } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // Create a page providing a file name const page = await sp.web.addClientsidePage(\"mypage1\"); // ... other operations on the page as outlined below // the page is initially not published, you must publish it so it appears for others users await page.save(); // include title and page layout const page2 = await sp.web.addClientsidePage(\"mypage\", \"My Page Title\", \"Article\"); // you must publish the new page await page2.save(); // include title, page layout, and specifying the publishing status (Added in 2.0.4) const page3 = await sp.web.addClientsidePage(\"mypage\", \"My Page Title\", \"Article\", PromotedState.PromoteOnPublish); // you must publish the new page, after which the page will immediately be promoted to a news article await page3.save(); Create using CreateClientsidePage method \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { Web } from \"@pnp/sp/webs\"; import { CreateClientsidePage, PromotedState } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); const page1 = await CreateClientsidePage(sp.web, \"mypage2\", \"My Page Title\"); // you must publish the new page await page1.save(true); // specify the page layout type parameter const page2 = await CreateClientsidePage(sp.web, \"mypage3\", \"My Page Title\", \"Article\"); // you must publish the new page await page2.save(); // specify the page layout type parameter while also specifying the publishing status (Added in 2.0.4) const page2half = await CreateClientsidePage(sp.web, \"mypage3\", \"My Page Title\", \"Article\", PromotedState.PromoteOnPublish); // you must publish the new page, after which the page will immediately be promoted to a news article await page2half.save(); // use the web factory to create a page in a specific web const page3 = await CreateClientsidePage(Web([sp, \"https://{absolute web url}\"]), \"mypage4\", \"My Page Title\"); // you must publish the new page await page3.save(); Create using IWeb.addFullPageApp \u00b6 Using this method you can easily create a full page app page given the component id. Don't forget the page will not be published and you will need to call save. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages\"; const sp = spfi(...); const page = await sp.web.addFullPageApp(\"name333\", \"My Title\", \"2CE4E250-B997-11EB-A9D2-C9D2FF95D000\"); // ... other page actions // you must save the page to publish it await page.save(); Load Pages \u00b6 There are a few ways to load pages, each of which results in an IClientsidePage instance being returned. Load using IWeb.loadClientsidePage \u00b6 This method takes a server relative path to the page to load. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { Web } from \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages/web\"; const sp = spfi(...); // use from the sp.web fluent chain const page = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/mypage3.aspx\"); // use the web factory to target a specific web const page2 = await Web([sp.web, \"https://{absolute web url}\"]).loadClientsidePage(\"/sites/dev/sitepages/mypage3.aspx\"); Load using ClientsidePageFromFile \u00b6 This method takes an IFile instance and loads an IClientsidePage instance. import { spfi } from \"@pnp/sp\"; import { ClientsidePageFromFile } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files/web\"; const sp = spfi(...); const page = await ClientsidePageFromFile(sp.web.getFileByServerRelativePath(\"/sites/dev/sitepages/mypage3.aspx\")); Edit Sections and Columns \u00b6 Client-side pages are made up of sections, columns, and controls. Sections contain columns which contain controls. There are methods to operate on these within the page, in addition to the standard array methods available in JavaScript. These samples use a variable page that is understood to be an IClientsidePage instance which is either created or loaded as outlined in previous sections. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // add two columns with factor 6 - this is a two column layout as the total factor in a section should add up to 12 const section1 = page.addSection(); section1.addColumn(6); section1.addColumn(6); // create a three column layout in a new section const section2 = page.addSection(); section2.addColumn(4); section2.addColumn(4); section2.addColumn(4); // publish our changes await page.save(); Manipulate Sections and Columns \u00b6 import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // drop all the columns in this section // this will also DELETE all controls contained in the columns page.sections[1].columns.length = 0; // create a new column layout page.sections[1].addColumn(4); page.sections[1].addColumn(8); // publish our changes await page.save(); Vertical Section \u00b6 The vertical section, if on the page, is stored within the sections array. However, you access it slightly differently to make things easier. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // add or get a vertical section (handles case where section already exists) const vertSection = page.addVerticalSection(); // **************************************************************** // if you know or want to test if a vertical section is present: if (page.hasVerticalSection) { // access the vertical section (this method will NOT create the section if it does not exist) page.verticalSection.addControl(new ClientsideText(\"hello\")); } else { const vertSection = page.addVerticalSection(); vertSection.addControl(new ClientsideText(\"hello\")); } Reorder Sections \u00b6 import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // swap the order of two sections // this will preserve the controls within the columns page.sections = [page.sections[1], page.sections[0]]; // publish our changes await page.save(); Reorder Columns \u00b6 The sections and columns are arrays, so normal array operations work as expected import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // swap the order of two columns // this will preserve the controls within the columns page.sections[1].columns = [page.sections[1].columns[1], page.sections[1].columns[0]]; // publish our changes await page.save(); Clientside Controls \u00b6 Once you have your sections and columns defined you will want to add/edit controls within those columns. Add Text Content \u00b6 import { spfi } from \"@pnp/sp\"; import { ClientsideText, IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); page.addSection().addControl(new ClientsideText(\"@pnp/sp is a great library!\")); await page.save(); Add Controls \u00b6 Adding controls involves loading the available client-side part definitions from the server or creating a text part. import \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages/web\"; import { spfi } from \"@pnp/sp\"; import { ClientsideWebpart } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // this will be a ClientsidePageComponent array // this can be cached on the client in production scenarios const partDefs = await sp.web.getClientsideWebParts(); // find the definition we want, here by id const partDef = partDefs.filter(c => c.Id === \"490d7c76-1824-45b2-9de3-676421c997fa\"); // optionally ensure you found the def if (partDef.length < 1) { // we didn't find it so we throw an error throw new Error(\"Could not find the web part\"); } // create a ClientWebPart instance from the definition const part = ClientsideWebpart.fromComponentDef(partDef[0]); // set the properties on the web part. Here for the embed web part we only have to supply an embedCode - in this case a YouTube video. // the structure of the properties varies for each web part and each version of a web part, so you will need to ensure you are setting // the properties correctly part.setProperties<{ embedCode: string }>({ embedCode: \"https://www.youtube.com/watch?v=IWQFZ7Lx-rg\", }); // we add that part to a new section page.addSection().addControl(part); await page.save(); Handle Different Webpart's Settings \u00b6 There are many ways that client side web parts are implemented and we can't provide handling within the library for all possibilities. This example shows how to handle a property set within the serverProcessedContent, in this case a List part's display title. import { spfi } from \"@pnp/sp\"; import { ClientsideWebpart } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/webs\"; // we create a class to wrap our functionality in a reusable way class ListWebpart extends ClientsideWebpart { constructor(control: ClientsideWebpart) { super((<any>control).json); } // add property getter/setter for what we need, in this case \"listTitle\" within searchablePlainTexts public get DisplayTitle(): string { return this.json.webPartData?.serverProcessedContent?.searchablePlainTexts?.listTitle || \"\"; } public set DisplayTitle(value: string) { this.json.webPartData.serverProcessedContent.searchablePlainTexts.listTitle = value; } } const sp = spfi(...); // now we load our page const page = await sp.web.loadClientsidePage(\"/sites/dev/SitePages/List-Web-Part.aspx\"); // get our part and pass it to the constructor of our wrapper class const part = new ListWebpart(page.sections[0].columns[0].getControl(0)); part.DisplayTitle = \"My New Title!\"; await page.save(); Unfortunately each webpart can be authored differently, so there isn't a way to know how the setting for a given webpart are stored without loading it and examining the properties. Page Operations \u00b6 There are other operation you can perform on a page in addition to manipulating the content. pageLayout \u00b6 You can get and set the page layout. Changing the layout after creating the page may have side effects and should be done cautiously. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.pageLayout; // set the value page.pageLayout = \"Article\"; await page.save(); bannerImageUrl \u00b6 import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.bannerImageUrl; // set the value page.bannerImageUrl = \"/server/relative/path/to/image.png\"; await page.save(); Banner images need to exist within the same site collection as the page where you want to use them. thumbnailUrl \u00b6 Allows you to set the thumbnail used for the page independently of the banner. If you set the bannerImageUrl property and not thumbnailUrl the thumbnail will be reset to match the banner, mimicking the UI functionality. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.thumbnailUrl; // set the value page.thumbnailUrl = \"/server/relative/path/to/image.png\"; await page.save(); topicHeader \u00b6 import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.topicHeader; // set the value page.topicHeader = \"My cool header!\"; await page.save(); // clear the topic header and hide it page.topicHeader = \"\"; await page.save(); title \u00b6 import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.title; // set the value page.title = \"My page title\"; await page.save(); description \u00b6 Descriptions are limited to 255 chars import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.description; // set the value page.description = \"A description\"; await page.save(); layoutType \u00b6 Sets the layout type of the page. The valid values are: \"FullWidthImage\", \"NoImage\", \"ColorBlock\", \"CutInShape\" import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.layoutType; // set the value page.layoutType = \"ColorBlock\"; await page.save(); headerTextAlignment \u00b6 Sets the header text alignment to one of \"Left\" or \"Center\" import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.headerTextAlignment; // set the value page.headerTextAlignment = \"Center\"; await page.save(); showTopicHeader \u00b6 Sets if the topic header is displayed on a page. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.showTopicHeader; // show the header page.showTopicHeader = true; await page.save(); // hide the header page.showTopicHeader = false; await page.save(); showPublishDate \u00b6 Sets if the publish date is displayed on a page. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.showPublishDate; // show the date page.showPublishDate = true; await page.save(); // hide the date page.showPublishDate = false; await page.save(); Get / Set author details \u00b6 import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/site-users\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the author details (string | null) const value = page.authorByLine; // set the author by user id const user = await sp.web.currentUser.select(\"Id\", \"LoginName\")(); const userId = user.Id; const userLogin = user.LoginName; await page.setAuthorById(userId); await page.save(); await page.setAuthorByLoginName(userLogin); await page.save(); you must still save the page after setting the author to persist your changes as shown in the example. load \u00b6 Loads the page from the server. This will overwrite any local unsaved changes. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); await page.load(); save \u00b6 Uncustomized home pages (i.e the home page that is generated with a site out of the box) cannot be updated by this library without becoming corrupted. Saves any changes to the page, optionally keeping them in draft state. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // changes are published await page.save(); // changes remain in draft await page.save(false); discardPageCheckout \u00b6 Discards any current checkout of the page by the current user. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); await page.discardPageCheckout(); promoteToNews \u00b6 Promotes the page as a news article. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); await page.promoteToNews(); enableComments & disableComments \u00b6 Used to control the availability of comments on a page. import { spfi } from \"@pnp/sp\"; // you need to import the comments sub-module or use the all preset import \"@pnp/sp/comments/clientside-page\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // turn on comments await page.enableComments(); // turn off comments await page.disableComments(); findControlById \u00b6 Finds a control within the page by id. import { spfi } from \"@pnp/sp\"; import { IClientsidePage, ClientsideText } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); const control = page.findControlById(\"06d4cdf6-bce6-4200-8b93-667a1b0a6c9d\"); // you can also type the control const control = page.findControlById<ClientsideText>(\"06d4cdf6-bce6-4200-8b93-667a1b0a6c9d\"); findControl \u00b6 Finds a control within the page using the supplied delegate. Can also be used to iterate through all controls in the page. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // find the first control whose order is 9 const control = page.findControl((c) => c.order === 9); // iterate all the controls and output the id to the console page.findControl((c) => { console.log(c.id); return false; }); like & unlike \u00b6 Updates the page's like value for the current user. // our page instance const page: IClientsidePage; // like this page await page.like(); // unlike this page await page.unlike(); getLikedByInformation \u00b6 Gets the likes information for this page. // our page instance const page: IClientsidePage; const info = await page.getLikedByInformation(); copy \u00b6 Creates a copy of the page, including all controls. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // creates a published copy of the page const pageCopy = await page.copy(sp.web, \"newpagename\", \"New Page Title\"); // creates a draft (unpublished) copy of the page const pageCopy2 = await page.copy(sp.web, \"newpagename\", \"New Page Title\", false); // edits to pageCopy2 ... // publish the page pageCopy2.save(); copyTo \u00b6 Copies the contents of a page to another existing page instance. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // our page instances, loaded in any of the ways shown above const source: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); const target: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/target.aspx\"); const target2: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/target2.aspx\"); // creates a published copy of the page await source.copyTo(target); // creates a draft (unpublished) copy of the page await source.copyTo(target2, false); // edits to target2... // publish the page target2.save(); setBannerImage \u00b6 Sets the banner image url and optionally additional properties. Allows you to set additional properties if needed, if you do not need to set the additional properties they are equivalent. Banner images need to exist within the same site collection as the page where you want to use them. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); page.setBannerImage(\"/server/relative/path/to/image.png\"); // save the changes await page.save(); // set additional props page.setBannerImage(\"/server/relative/path/to/image.png\", { altText: \"Image description\", imageSourceType: 2, translateX: 30, translateY: 1234, }); // save the changes await page.save(); This sample shows the full process of adding a page, image file, and setting the banner image in nodejs. The same code would work in a browser with an update on how you get the file - likely from a file input or similar. import { join } from \"path\"; import { createReadStream } from \"fs\"; import { spfi, SPFI, SPFx } from \"@pnp/sp\"; import { SPDefault } from \"@pnp/nodejs\"; import { LogLevel } from \"@pnp/logging\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/clientside-pages\"; const buffer = readFileSync(\"c:/temp/key.pem\"); const config:any = { auth: { authority: \"https://login.microsoftonline.com/{my tenant}/\", clientId: \"{application (client) id}\", clientCertificate: { thumbprint: \"{certificate thumbprint, displayed in AAD}\", privateKey: buffer.toString(), }, }, system: { loggerOptions: { loggerCallback(loglevel: any, message: any, containsPii: any) { console.log(message); }, piiLoggingEnabled: false, logLevel: LogLevel.Verbose } } }; // configure your node options const sp = spfi('{site url}').using(SPDefault({ baseUrl: '{site url}', msal: { config: config, scopes: [ 'https://{my tenant}.sharepoint.com/.default' ] } })); // add the banner image const dirname = join(\"C:/path/to/file\", \"img-file.jpg\"); const chunkedFile = createReadStream(dirname); const far = await sp.web.getFolderByServerRelativePath(\"/sites/dev/Shared Documents\").files.addChunked( \"banner.jpg\", chunkedFile ); // add the page const page = await sp.web.addClientsidePage(\"MyPage\", \"Page Title\"); // set the banner image page.setBannerImage(far.data.ServerRelativeUrl); // publish the page await page.save(); setBannerImageFromExternalUrl \u00b6 Allows you to set the banner image from a source outside the current site collection. The image file will be copied to the SiteAssets library and referenced from there. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // you must await this method await page.setBannerImageFromExternalUrl(\"https://absolute.url/to/my/image.jpg\"); // save the changes await page.save(); You can optionally supply additional props for the banner image, these match the properties when calling setBannerImage import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // you must await this method await page.setBannerImageFromExternalUrl(\"https://absolute.url/to/my/image.jpg\", { altText: \"Image description\", imageSourceType: 2, translateX: 30, translateY: 1234, }); // save the changes await page.save(); recycle \u00b6 Allows you to recycle a page without first needing to use getItem // our page instance const page: IClientsidePage; // you must await this method await page.recycle(); delete \u00b6 Allows you to delete a page without first needing to use getItem // our page instance const page: IClientsidePage; // you must await this method await page.delete(); saveAsTemplate \u00b6 Save page as a template from which other pages can be created. If it doesn't exist a special folder \"Templates\" will be added to the doc lib // our page instance const page: IClientsidePage; // you must await this method await page.saveAsTemplate(); // save a template, but don't publish it allowing you to make changes before it is available to users // you await page.saveAsTemplate(false); // ... changes to the page // you must publish the template so it is available await page.save(); share \u00b6 Allows sharing a page with one or more email addresses, optionall including a message in the email // our page instance const page: IClientsidePage; // you must await this method await page.share([\"email@place.com\", \"email2@otherplace.com\"]); // optionally include a message await page.share([\"email@place.com\", \"email2@otherplace.com\"], \"Please check out this cool page!\"); Add Repost Page \u00b6 You can use the addRepostPage method to add a report page. The method returns the absolute url of the created page. All properties are optional but it is recommended to include as much as possible to improve the quality of the repost card's display. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages\"; const sp = spfi(...); const page = await sp.web.addRepostPage({ BannerImageUrl: \"https://some.absolute/path/to/an/image.jpg\", IsBannerImageUrlExternal: true, Description: \"My Description\", Title: \"This is my title!\", OriginalSourceUrl: \"https://absolute/path/to/article\", }); To specify an existing item in another list all of the four properties OriginalSourceSiteId, OriginalSourceWebId, OriginalSourceListId, and OriginalSourceItemId are required.","title":"Client-side Pages"},{"location":"sp/clientside-pages/#pnpspclientside-pages","text":"The 'clientside-pages' module allows you to create, edit, and delete modern SharePoint pages. There are methods to update the page settings and add/remove client-side web parts.","title":"@pnp/sp/clientside-pages"},{"location":"sp/clientside-pages/#create-a-new-page","text":"You can create a new client-side page in several ways, all are equivalent.","title":"Create a new Page"},{"location":"sp/clientside-pages/#create-using-iwebaddclientsidepage","text":"import { spfi, SPFI } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages/web\"; import { PromotedState } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // Create a page providing a file name const page = await sp.web.addClientsidePage(\"mypage1\"); // ... other operations on the page as outlined below // the page is initially not published, you must publish it so it appears for others users await page.save(); // include title and page layout const page2 = await sp.web.addClientsidePage(\"mypage\", \"My Page Title\", \"Article\"); // you must publish the new page await page2.save(); // include title, page layout, and specifying the publishing status (Added in 2.0.4) const page3 = await sp.web.addClientsidePage(\"mypage\", \"My Page Title\", \"Article\", PromotedState.PromoteOnPublish); // you must publish the new page, after which the page will immediately be promoted to a news article await page3.save();","title":"Create using IWeb.addClientsidePage"},{"location":"sp/clientside-pages/#create-using-createclientsidepage-method","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { Web } from \"@pnp/sp/webs\"; import { CreateClientsidePage, PromotedState } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); const page1 = await CreateClientsidePage(sp.web, \"mypage2\", \"My Page Title\"); // you must publish the new page await page1.save(true); // specify the page layout type parameter const page2 = await CreateClientsidePage(sp.web, \"mypage3\", \"My Page Title\", \"Article\"); // you must publish the new page await page2.save(); // specify the page layout type parameter while also specifying the publishing status (Added in 2.0.4) const page2half = await CreateClientsidePage(sp.web, \"mypage3\", \"My Page Title\", \"Article\", PromotedState.PromoteOnPublish); // you must publish the new page, after which the page will immediately be promoted to a news article await page2half.save(); // use the web factory to create a page in a specific web const page3 = await CreateClientsidePage(Web([sp, \"https://{absolute web url}\"]), \"mypage4\", \"My Page Title\"); // you must publish the new page await page3.save();","title":"Create using CreateClientsidePage method"},{"location":"sp/clientside-pages/#create-using-iwebaddfullpageapp","text":"Using this method you can easily create a full page app page given the component id. Don't forget the page will not be published and you will need to call save. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages\"; const sp = spfi(...); const page = await sp.web.addFullPageApp(\"name333\", \"My Title\", \"2CE4E250-B997-11EB-A9D2-C9D2FF95D000\"); // ... other page actions // you must save the page to publish it await page.save();","title":"Create using IWeb.addFullPageApp"},{"location":"sp/clientside-pages/#load-pages","text":"There are a few ways to load pages, each of which results in an IClientsidePage instance being returned.","title":"Load Pages"},{"location":"sp/clientside-pages/#load-using-iwebloadclientsidepage","text":"This method takes a server relative path to the page to load. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { Web } from \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages/web\"; const sp = spfi(...); // use from the sp.web fluent chain const page = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/mypage3.aspx\"); // use the web factory to target a specific web const page2 = await Web([sp.web, \"https://{absolute web url}\"]).loadClientsidePage(\"/sites/dev/sitepages/mypage3.aspx\");","title":"Load using IWeb.loadClientsidePage"},{"location":"sp/clientside-pages/#load-using-clientsidepagefromfile","text":"This method takes an IFile instance and loads an IClientsidePage instance. import { spfi } from \"@pnp/sp\"; import { ClientsidePageFromFile } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files/web\"; const sp = spfi(...); const page = await ClientsidePageFromFile(sp.web.getFileByServerRelativePath(\"/sites/dev/sitepages/mypage3.aspx\"));","title":"Load using ClientsidePageFromFile"},{"location":"sp/clientside-pages/#edit-sections-and-columns","text":"Client-side pages are made up of sections, columns, and controls. Sections contain columns which contain controls. There are methods to operate on these within the page, in addition to the standard array methods available in JavaScript. These samples use a variable page that is understood to be an IClientsidePage instance which is either created or loaded as outlined in previous sections. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // add two columns with factor 6 - this is a two column layout as the total factor in a section should add up to 12 const section1 = page.addSection(); section1.addColumn(6); section1.addColumn(6); // create a three column layout in a new section const section2 = page.addSection(); section2.addColumn(4); section2.addColumn(4); section2.addColumn(4); // publish our changes await page.save();","title":"Edit Sections and Columns"},{"location":"sp/clientside-pages/#manipulate-sections-and-columns","text":"import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // drop all the columns in this section // this will also DELETE all controls contained in the columns page.sections[1].columns.length = 0; // create a new column layout page.sections[1].addColumn(4); page.sections[1].addColumn(8); // publish our changes await page.save();","title":"Manipulate Sections and Columns"},{"location":"sp/clientside-pages/#vertical-section","text":"The vertical section, if on the page, is stored within the sections array. However, you access it slightly differently to make things easier. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // add or get a vertical section (handles case where section already exists) const vertSection = page.addVerticalSection(); // **************************************************************** // if you know or want to test if a vertical section is present: if (page.hasVerticalSection) { // access the vertical section (this method will NOT create the section if it does not exist) page.verticalSection.addControl(new ClientsideText(\"hello\")); } else { const vertSection = page.addVerticalSection(); vertSection.addControl(new ClientsideText(\"hello\")); }","title":"Vertical Section"},{"location":"sp/clientside-pages/#reorder-sections","text":"import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // swap the order of two sections // this will preserve the controls within the columns page.sections = [page.sections[1], page.sections[0]]; // publish our changes await page.save();","title":"Reorder Sections"},{"location":"sp/clientside-pages/#reorder-columns","text":"The sections and columns are arrays, so normal array operations work as expected import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // swap the order of two columns // this will preserve the controls within the columns page.sections[1].columns = [page.sections[1].columns[1], page.sections[1].columns[0]]; // publish our changes await page.save();","title":"Reorder Columns"},{"location":"sp/clientside-pages/#clientside-controls","text":"Once you have your sections and columns defined you will want to add/edit controls within those columns.","title":"Clientside Controls"},{"location":"sp/clientside-pages/#add-text-content","text":"import { spfi } from \"@pnp/sp\"; import { ClientsideText, IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); page.addSection().addControl(new ClientsideText(\"@pnp/sp is a great library!\")); await page.save();","title":"Add Text Content"},{"location":"sp/clientside-pages/#add-controls","text":"Adding controls involves loading the available client-side part definitions from the server or creating a text part. import \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages/web\"; import { spfi } from \"@pnp/sp\"; import { ClientsideWebpart } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // this will be a ClientsidePageComponent array // this can be cached on the client in production scenarios const partDefs = await sp.web.getClientsideWebParts(); // find the definition we want, here by id const partDef = partDefs.filter(c => c.Id === \"490d7c76-1824-45b2-9de3-676421c997fa\"); // optionally ensure you found the def if (partDef.length < 1) { // we didn't find it so we throw an error throw new Error(\"Could not find the web part\"); } // create a ClientWebPart instance from the definition const part = ClientsideWebpart.fromComponentDef(partDef[0]); // set the properties on the web part. Here for the embed web part we only have to supply an embedCode - in this case a YouTube video. // the structure of the properties varies for each web part and each version of a web part, so you will need to ensure you are setting // the properties correctly part.setProperties<{ embedCode: string }>({ embedCode: \"https://www.youtube.com/watch?v=IWQFZ7Lx-rg\", }); // we add that part to a new section page.addSection().addControl(part); await page.save();","title":"Add Controls"},{"location":"sp/clientside-pages/#handle-different-webparts-settings","text":"There are many ways that client side web parts are implemented and we can't provide handling within the library for all possibilities. This example shows how to handle a property set within the serverProcessedContent, in this case a List part's display title. import { spfi } from \"@pnp/sp\"; import { ClientsideWebpart } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/webs\"; // we create a class to wrap our functionality in a reusable way class ListWebpart extends ClientsideWebpart { constructor(control: ClientsideWebpart) { super((<any>control).json); } // add property getter/setter for what we need, in this case \"listTitle\" within searchablePlainTexts public get DisplayTitle(): string { return this.json.webPartData?.serverProcessedContent?.searchablePlainTexts?.listTitle || \"\"; } public set DisplayTitle(value: string) { this.json.webPartData.serverProcessedContent.searchablePlainTexts.listTitle = value; } } const sp = spfi(...); // now we load our page const page = await sp.web.loadClientsidePage(\"/sites/dev/SitePages/List-Web-Part.aspx\"); // get our part and pass it to the constructor of our wrapper class const part = new ListWebpart(page.sections[0].columns[0].getControl(0)); part.DisplayTitle = \"My New Title!\"; await page.save(); Unfortunately each webpart can be authored differently, so there isn't a way to know how the setting for a given webpart are stored without loading it and examining the properties.","title":"Handle Different Webpart's Settings"},{"location":"sp/clientside-pages/#page-operations","text":"There are other operation you can perform on a page in addition to manipulating the content.","title":"Page Operations"},{"location":"sp/clientside-pages/#pagelayout","text":"You can get and set the page layout. Changing the layout after creating the page may have side effects and should be done cautiously. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.pageLayout; // set the value page.pageLayout = \"Article\"; await page.save();","title":"pageLayout"},{"location":"sp/clientside-pages/#bannerimageurl","text":"import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.bannerImageUrl; // set the value page.bannerImageUrl = \"/server/relative/path/to/image.png\"; await page.save(); Banner images need to exist within the same site collection as the page where you want to use them.","title":"bannerImageUrl"},{"location":"sp/clientside-pages/#thumbnailurl","text":"Allows you to set the thumbnail used for the page independently of the banner. If you set the bannerImageUrl property and not thumbnailUrl the thumbnail will be reset to match the banner, mimicking the UI functionality. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.thumbnailUrl; // set the value page.thumbnailUrl = \"/server/relative/path/to/image.png\"; await page.save();","title":"thumbnailUrl"},{"location":"sp/clientside-pages/#topicheader","text":"import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.topicHeader; // set the value page.topicHeader = \"My cool header!\"; await page.save(); // clear the topic header and hide it page.topicHeader = \"\"; await page.save();","title":"topicHeader"},{"location":"sp/clientside-pages/#title","text":"import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.title; // set the value page.title = \"My page title\"; await page.save();","title":"title"},{"location":"sp/clientside-pages/#description","text":"Descriptions are limited to 255 chars import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.description; // set the value page.description = \"A description\"; await page.save();","title":"description"},{"location":"sp/clientside-pages/#layouttype","text":"Sets the layout type of the page. The valid values are: \"FullWidthImage\", \"NoImage\", \"ColorBlock\", \"CutInShape\" import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.layoutType; // set the value page.layoutType = \"ColorBlock\"; await page.save();","title":"layoutType"},{"location":"sp/clientside-pages/#headertextalignment","text":"Sets the header text alignment to one of \"Left\" or \"Center\" import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.headerTextAlignment; // set the value page.headerTextAlignment = \"Center\"; await page.save();","title":"headerTextAlignment"},{"location":"sp/clientside-pages/#showtopicheader","text":"Sets if the topic header is displayed on a page. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.showTopicHeader; // show the header page.showTopicHeader = true; await page.save(); // hide the header page.showTopicHeader = false; await page.save();","title":"showTopicHeader"},{"location":"sp/clientside-pages/#showpublishdate","text":"Sets if the publish date is displayed on a page. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the current value const value = page.showPublishDate; // show the date page.showPublishDate = true; await page.save(); // hide the date page.showPublishDate = false; await page.save();","title":"showPublishDate"},{"location":"sp/clientside-pages/#get-set-author-details","text":"import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/site-users\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // get the author details (string | null) const value = page.authorByLine; // set the author by user id const user = await sp.web.currentUser.select(\"Id\", \"LoginName\")(); const userId = user.Id; const userLogin = user.LoginName; await page.setAuthorById(userId); await page.save(); await page.setAuthorByLoginName(userLogin); await page.save(); you must still save the page after setting the author to persist your changes as shown in the example.","title":"Get / Set author details"},{"location":"sp/clientside-pages/#load","text":"Loads the page from the server. This will overwrite any local unsaved changes. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); await page.load();","title":"load"},{"location":"sp/clientside-pages/#save","text":"Uncustomized home pages (i.e the home page that is generated with a site out of the box) cannot be updated by this library without becoming corrupted. Saves any changes to the page, optionally keeping them in draft state. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // changes are published await page.save(); // changes remain in draft await page.save(false);","title":"save"},{"location":"sp/clientside-pages/#discardpagecheckout","text":"Discards any current checkout of the page by the current user. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); await page.discardPageCheckout();","title":"discardPageCheckout"},{"location":"sp/clientside-pages/#promotetonews","text":"Promotes the page as a news article. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); await page.promoteToNews();","title":"promoteToNews"},{"location":"sp/clientside-pages/#enablecomments-disablecomments","text":"Used to control the availability of comments on a page. import { spfi } from \"@pnp/sp\"; // you need to import the comments sub-module or use the all preset import \"@pnp/sp/comments/clientside-page\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // turn on comments await page.enableComments(); // turn off comments await page.disableComments();","title":"enableComments &amp; disableComments"},{"location":"sp/clientside-pages/#findcontrolbyid","text":"Finds a control within the page by id. import { spfi } from \"@pnp/sp\"; import { IClientsidePage, ClientsideText } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); const control = page.findControlById(\"06d4cdf6-bce6-4200-8b93-667a1b0a6c9d\"); // you can also type the control const control = page.findControlById<ClientsideText>(\"06d4cdf6-bce6-4200-8b93-667a1b0a6c9d\");","title":"findControlById"},{"location":"sp/clientside-pages/#findcontrol","text":"Finds a control within the page using the supplied delegate. Can also be used to iterate through all controls in the page. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // find the first control whose order is 9 const control = page.findControl((c) => c.order === 9); // iterate all the controls and output the id to the console page.findControl((c) => { console.log(c.id); return false; });","title":"findControl"},{"location":"sp/clientside-pages/#like-unlike","text":"Updates the page's like value for the current user. // our page instance const page: IClientsidePage; // like this page await page.like(); // unlike this page await page.unlike();","title":"like &amp; unlike"},{"location":"sp/clientside-pages/#getlikedbyinformation","text":"Gets the likes information for this page. // our page instance const page: IClientsidePage; const info = await page.getLikedByInformation();","title":"getLikedByInformation"},{"location":"sp/clientside-pages/#copy","text":"Creates a copy of the page, including all controls. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // creates a published copy of the page const pageCopy = await page.copy(sp.web, \"newpagename\", \"New Page Title\"); // creates a draft (unpublished) copy of the page const pageCopy2 = await page.copy(sp.web, \"newpagename\", \"New Page Title\", false); // edits to pageCopy2 ... // publish the page pageCopy2.save();","title":"copy"},{"location":"sp/clientside-pages/#copyto","text":"Copies the contents of a page to another existing page instance. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // our page instances, loaded in any of the ways shown above const source: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); const target: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/target.aspx\"); const target2: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/target2.aspx\"); // creates a published copy of the page await source.copyTo(target); // creates a draft (unpublished) copy of the page await source.copyTo(target2, false); // edits to target2... // publish the page target2.save();","title":"copyTo"},{"location":"sp/clientside-pages/#setbannerimage","text":"Sets the banner image url and optionally additional properties. Allows you to set additional properties if needed, if you do not need to set the additional properties they are equivalent. Banner images need to exist within the same site collection as the page where you want to use them. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); page.setBannerImage(\"/server/relative/path/to/image.png\"); // save the changes await page.save(); // set additional props page.setBannerImage(\"/server/relative/path/to/image.png\", { altText: \"Image description\", imageSourceType: 2, translateX: 30, translateY: 1234, }); // save the changes await page.save(); This sample shows the full process of adding a page, image file, and setting the banner image in nodejs. The same code would work in a browser with an update on how you get the file - likely from a file input or similar. import { join } from \"path\"; import { createReadStream } from \"fs\"; import { spfi, SPFI, SPFx } from \"@pnp/sp\"; import { SPDefault } from \"@pnp/nodejs\"; import { LogLevel } from \"@pnp/logging\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/clientside-pages\"; const buffer = readFileSync(\"c:/temp/key.pem\"); const config:any = { auth: { authority: \"https://login.microsoftonline.com/{my tenant}/\", clientId: \"{application (client) id}\", clientCertificate: { thumbprint: \"{certificate thumbprint, displayed in AAD}\", privateKey: buffer.toString(), }, }, system: { loggerOptions: { loggerCallback(loglevel: any, message: any, containsPii: any) { console.log(message); }, piiLoggingEnabled: false, logLevel: LogLevel.Verbose } } }; // configure your node options const sp = spfi('{site url}').using(SPDefault({ baseUrl: '{site url}', msal: { config: config, scopes: [ 'https://{my tenant}.sharepoint.com/.default' ] } })); // add the banner image const dirname = join(\"C:/path/to/file\", \"img-file.jpg\"); const chunkedFile = createReadStream(dirname); const far = await sp.web.getFolderByServerRelativePath(\"/sites/dev/Shared Documents\").files.addChunked( \"banner.jpg\", chunkedFile ); // add the page const page = await sp.web.addClientsidePage(\"MyPage\", \"Page Title\"); // set the banner image page.setBannerImage(far.data.ServerRelativeUrl); // publish the page await page.save();","title":"setBannerImage"},{"location":"sp/clientside-pages/#setbannerimagefromexternalurl","text":"Allows you to set the banner image from a source outside the current site collection. The image file will be copied to the SiteAssets library and referenced from there. import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // you must await this method await page.setBannerImageFromExternalUrl(\"https://absolute.url/to/my/image.jpg\"); // save the changes await page.save(); You can optionally supply additional props for the banner image, these match the properties when calling setBannerImage import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; const sp = spfi(...); const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // you must await this method await page.setBannerImageFromExternalUrl(\"https://absolute.url/to/my/image.jpg\", { altText: \"Image description\", imageSourceType: 2, translateX: 30, translateY: 1234, }); // save the changes await page.save();","title":"setBannerImageFromExternalUrl"},{"location":"sp/clientside-pages/#recycle","text":"Allows you to recycle a page without first needing to use getItem // our page instance const page: IClientsidePage; // you must await this method await page.recycle();","title":"recycle"},{"location":"sp/clientside-pages/#delete","text":"Allows you to delete a page without first needing to use getItem // our page instance const page: IClientsidePage; // you must await this method await page.delete();","title":"delete"},{"location":"sp/clientside-pages/#saveastemplate","text":"Save page as a template from which other pages can be created. If it doesn't exist a special folder \"Templates\" will be added to the doc lib // our page instance const page: IClientsidePage; // you must await this method await page.saveAsTemplate(); // save a template, but don't publish it allowing you to make changes before it is available to users // you await page.saveAsTemplate(false); // ... changes to the page // you must publish the template so it is available await page.save();","title":"saveAsTemplate"},{"location":"sp/clientside-pages/#share","text":"Allows sharing a page with one or more email addresses, optionall including a message in the email // our page instance const page: IClientsidePage; // you must await this method await page.share([\"email@place.com\", \"email2@otherplace.com\"]); // optionally include a message await page.share([\"email@place.com\", \"email2@otherplace.com\"], \"Please check out this cool page!\");","title":"share"},{"location":"sp/clientside-pages/#add-repost-page","text":"You can use the addRepostPage method to add a report page. The method returns the absolute url of the created page. All properties are optional but it is recommended to include as much as possible to improve the quality of the repost card's display. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages\"; const sp = spfi(...); const page = await sp.web.addRepostPage({ BannerImageUrl: \"https://some.absolute/path/to/an/image.jpg\", IsBannerImageUrlExternal: true, Description: \"My Description\", Title: \"This is my title!\", OriginalSourceUrl: \"https://absolute/path/to/article\", }); To specify an existing item in another list all of the four properties OriginalSourceSiteId, OriginalSourceWebId, OriginalSourceListId, and OriginalSourceItemId are required.","title":"Add Repost Page"},{"location":"sp/column-defaults/","text":"@pnp/sp/column-defaults \u00b6 The column defaults sub-module allows you to manage the default column values on a library or library folder. Get Folder Defaults \u00b6 You can get the default values for a specific folder as shown below: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders/web\"; import \"@pnp/sp/column-defaults\"; const sp = spfi(...); const defaults = await sp.web.getFolderByServerRelativePath(\"/sites/dev/DefaultColumnValues/fld_GHk5\").getDefaultColumnValues(); /* The resulting structure will have the form: [ { \"name\": \"{field internal name}\", \"path\": \"/sites/dev/DefaultColumnValues/fld_GHk5\", \"value\": \"{the default value}\" }, { \"name\": \"{field internal name}\", \"path\": \"/sites/dev/DefaultColumnValues/fld_GHk5\", \"value\": \"{the default value}\" } ] */ Set Folder Defaults \u00b6 When setting the defaults for a folder you need to include the field's internal name and the value. For more examples of other field types see the section Pattern for setting defaults on various column types Note: Be very careful when setting the path as the site collection url is case sensitive import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders/web\"; import \"@pnp/sp/column-defaults\"; const sp = spfi(...); await sp.web.getFolderByServerRelativePath(\"/sites/dev/DefaultColumnValues/fld_GHk5\").setDefaultColumnValues([{ name: \"TextField\", value: \"Something\", }, { name: \"NumberField\", value: 14, }]); Get Library Defaults \u00b6 You can also get all of the defaults for the entire library. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/column-defaults\"; const sp = spfi(...); const defaults = await sp.web.lists.getByTitle(\"DefaultColumnValues\").getDefaultColumnValues(); /* The resulting structure will have the form: [ { \"name\": \"{field internal name}\", \"path\": \"/sites/dev/DefaultColumnValues\", \"value\": \"{the default value}\" }, { \"name\": \"{field internal name}\", \"path\": \"/sites/dev/DefaultColumnValues/fld_GHk5\", \"value\": \"{a different default value}\" } ] */ Set Library Defaults \u00b6 You can also set the defaults for an entire library at once (root and all sub-folders). This may be helpful in provisioning a library or other scenarios. When setting the defaults for the entire library you must also include the path value with is the server relative path to the folder. When setting the defaults for a folder you need to include the field's internal name and the value. For more examples of other field types see the section Pattern for setting defaults on various column types Note: Be very careful when setting the path as the site collection url is case sensitive import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/column-defaults\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"DefaultColumnValues\").setDefaultColumnValues([{ name: \"TextField\", path: \"/sites/dev/DefaultColumnValues\", value: \"#PnPjs Rocks!\", }]); Clear Folder Defaults \u00b6 If you want to clear all of the folder defaults you can use the clear method: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders/web\"; import \"@pnp/sp/column-defaults\"; const sp = spfi(...); await sp.web.getFolderByServerRelativePath(\"/sites/dev/DefaultColumnValues/fld_GHk5\").clearDefaultColumnValues(); Clear Library Defaults \u00b6 If you need to clear all of the default column values in a library you can pass an empty array to the list's setDefaultColumnValues method. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/column-defaults\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"DefaultColumnValues\").setDefaultColumnValues([]); Pattern for setting defaults on various column types \u00b6 The following is an example of the structure for setting the default column value when using the setDefaultColumnValues that covers the various field types. [{ // Text/Boolean/CurrencyDateTime/Choice/User name: \"TextField\": path: \"/sites/dev/DefaultColumnValues\", value: \"#PnPjs Rocks!\", }, { //Number name: \"NumberField\", path: \"/sites/dev/DefaultColumnValues\", value: 42, }, { //Date name: \"NumberField\", path: \"/sites/dev/DefaultColumnValues\", value: \"1900-01-01T00:00:00Z\", }, { //Date - Today name: \"NumberField\", path: \"/sites/dev/DefaultColumnValues\", value: \"[today]\", }, { //MultiChoice name: \"MultiChoiceField\", path: \"/sites/dev/DefaultColumnValues\", value: [\"Item 1\", \"Item 2\"], }, { //MultiChoice - single value name: \"MultiChoiceField\", path: \"/sites/dev/DefaultColumnValues/folder2\", value: [\"Item 1\"], }, { //Taxonomy - single value name: \"TaxonomyField\", path: \"/sites/dev/DefaultColumnValues\", value: { wssId:\"-1\", termName: \"TaxValueName\", termId: \"924d2077-d5e3-4507-9f36-4a3655e74274\" } }, { //Taxonomy - multiple value name: \"TaxonomyMultiField\", path: \"/sites/dev/DefaultColumnValues\", value: [{ wssId:\"-1\", termName: \"TaxValueName\", termId: \"924d2077-d5e3-4507-9f36-4a3655e74274\" },{ wssId:\"-1\", termName: \"TaxValueName2\", termId: \"95d4c307-dde5-49d8-b861-392e145d94d3\" },] }]); Taxonomy Full Example \u00b6 This example shows fully how to get the taxonomy values and set them as a default column value using PnPjs. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/column-defaults\"; import \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get the term's info we want to use as the default const term = await sp.termStore.sets.getById(\"ea6fc521-d293-4f3d-9e84-f3a5bc0936ce\").getTermById(\"775c9cf6-c3cd-4db9-8cfa-fc0aeefad93a\")(); // get the default term label const defLabel = term.labels.find(v => v.isDefault); // set the default value using -1, the term id, and the term's default label name await sp.web.lists.getByTitle(\"MetaDataDocLib\").rootFolder.setDefaultColumnValues([{ name: \"MetaDataColumnInternalName\", value: { wssId: \"-1\", termId: term.id, termName: defLabel.name, } }]) // check that the defaults have updated const newDefaults = await sp.web.lists.getByTitle(\"MetaDataDocLib\").getDefaultColumnValues();","title":"Column Defaults"},{"location":"sp/column-defaults/#pnpspcolumn-defaults","text":"The column defaults sub-module allows you to manage the default column values on a library or library folder.","title":"@pnp/sp/column-defaults"},{"location":"sp/column-defaults/#get-folder-defaults","text":"You can get the default values for a specific folder as shown below: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders/web\"; import \"@pnp/sp/column-defaults\"; const sp = spfi(...); const defaults = await sp.web.getFolderByServerRelativePath(\"/sites/dev/DefaultColumnValues/fld_GHk5\").getDefaultColumnValues(); /* The resulting structure will have the form: [ { \"name\": \"{field internal name}\", \"path\": \"/sites/dev/DefaultColumnValues/fld_GHk5\", \"value\": \"{the default value}\" }, { \"name\": \"{field internal name}\", \"path\": \"/sites/dev/DefaultColumnValues/fld_GHk5\", \"value\": \"{the default value}\" } ] */","title":"Get Folder Defaults"},{"location":"sp/column-defaults/#set-folder-defaults","text":"When setting the defaults for a folder you need to include the field's internal name and the value. For more examples of other field types see the section Pattern for setting defaults on various column types Note: Be very careful when setting the path as the site collection url is case sensitive import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders/web\"; import \"@pnp/sp/column-defaults\"; const sp = spfi(...); await sp.web.getFolderByServerRelativePath(\"/sites/dev/DefaultColumnValues/fld_GHk5\").setDefaultColumnValues([{ name: \"TextField\", value: \"Something\", }, { name: \"NumberField\", value: 14, }]);","title":"Set Folder Defaults"},{"location":"sp/column-defaults/#get-library-defaults","text":"You can also get all of the defaults for the entire library. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/column-defaults\"; const sp = spfi(...); const defaults = await sp.web.lists.getByTitle(\"DefaultColumnValues\").getDefaultColumnValues(); /* The resulting structure will have the form: [ { \"name\": \"{field internal name}\", \"path\": \"/sites/dev/DefaultColumnValues\", \"value\": \"{the default value}\" }, { \"name\": \"{field internal name}\", \"path\": \"/sites/dev/DefaultColumnValues/fld_GHk5\", \"value\": \"{a different default value}\" } ] */","title":"Get Library Defaults"},{"location":"sp/column-defaults/#set-library-defaults","text":"You can also set the defaults for an entire library at once (root and all sub-folders). This may be helpful in provisioning a library or other scenarios. When setting the defaults for the entire library you must also include the path value with is the server relative path to the folder. When setting the defaults for a folder you need to include the field's internal name and the value. For more examples of other field types see the section Pattern for setting defaults on various column types Note: Be very careful when setting the path as the site collection url is case sensitive import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/column-defaults\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"DefaultColumnValues\").setDefaultColumnValues([{ name: \"TextField\", path: \"/sites/dev/DefaultColumnValues\", value: \"#PnPjs Rocks!\", }]);","title":"Set Library Defaults"},{"location":"sp/column-defaults/#clear-folder-defaults","text":"If you want to clear all of the folder defaults you can use the clear method: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders/web\"; import \"@pnp/sp/column-defaults\"; const sp = spfi(...); await sp.web.getFolderByServerRelativePath(\"/sites/dev/DefaultColumnValues/fld_GHk5\").clearDefaultColumnValues();","title":"Clear Folder Defaults"},{"location":"sp/column-defaults/#clear-library-defaults","text":"If you need to clear all of the default column values in a library you can pass an empty array to the list's setDefaultColumnValues method. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/column-defaults\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"DefaultColumnValues\").setDefaultColumnValues([]);","title":"Clear Library Defaults"},{"location":"sp/column-defaults/#pattern-for-setting-defaults-on-various-column-types","text":"The following is an example of the structure for setting the default column value when using the setDefaultColumnValues that covers the various field types. [{ // Text/Boolean/CurrencyDateTime/Choice/User name: \"TextField\": path: \"/sites/dev/DefaultColumnValues\", value: \"#PnPjs Rocks!\", }, { //Number name: \"NumberField\", path: \"/sites/dev/DefaultColumnValues\", value: 42, }, { //Date name: \"NumberField\", path: \"/sites/dev/DefaultColumnValues\", value: \"1900-01-01T00:00:00Z\", }, { //Date - Today name: \"NumberField\", path: \"/sites/dev/DefaultColumnValues\", value: \"[today]\", }, { //MultiChoice name: \"MultiChoiceField\", path: \"/sites/dev/DefaultColumnValues\", value: [\"Item 1\", \"Item 2\"], }, { //MultiChoice - single value name: \"MultiChoiceField\", path: \"/sites/dev/DefaultColumnValues/folder2\", value: [\"Item 1\"], }, { //Taxonomy - single value name: \"TaxonomyField\", path: \"/sites/dev/DefaultColumnValues\", value: { wssId:\"-1\", termName: \"TaxValueName\", termId: \"924d2077-d5e3-4507-9f36-4a3655e74274\" } }, { //Taxonomy - multiple value name: \"TaxonomyMultiField\", path: \"/sites/dev/DefaultColumnValues\", value: [{ wssId:\"-1\", termName: \"TaxValueName\", termId: \"924d2077-d5e3-4507-9f36-4a3655e74274\" },{ wssId:\"-1\", termName: \"TaxValueName2\", termId: \"95d4c307-dde5-49d8-b861-392e145d94d3\" },] }]);","title":"Pattern for setting defaults on various column types"},{"location":"sp/column-defaults/#taxonomy-full-example","text":"This example shows fully how to get the taxonomy values and set them as a default column value using PnPjs. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/column-defaults\"; import \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get the term's info we want to use as the default const term = await sp.termStore.sets.getById(\"ea6fc521-d293-4f3d-9e84-f3a5bc0936ce\").getTermById(\"775c9cf6-c3cd-4db9-8cfa-fc0aeefad93a\")(); // get the default term label const defLabel = term.labels.find(v => v.isDefault); // set the default value using -1, the term id, and the term's default label name await sp.web.lists.getByTitle(\"MetaDataDocLib\").rootFolder.setDefaultColumnValues([{ name: \"MetaDataColumnInternalName\", value: { wssId: \"-1\", termId: term.id, termName: defLabel.name, } }]) // check that the defaults have updated const newDefaults = await sp.web.lists.getByTitle(\"MetaDataDocLib\").getDefaultColumnValues();","title":"Taxonomy Full Example"},{"location":"sp/comments-likes/","text":"@pnp/sp/comments and likes \u00b6 Comments can be accessed through either IItem or IClientsidePage instances, though in slightly different ways. For information on loading clientside pages or items please refer to those articles. These APIs are currently in BETA and are subject to change or may not work on all tenants. ClientsidePage Comments \u00b6 The IClientsidePage interface has three methods to provide easier access to the comments for a page, without requiring that you load the item separately. Add Comments \u00b6 You can add a comment using the addComment method as shown import { spfi } from \"@pnp/sp\"; import { CreateClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/comments/clientside-page\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const page = await CreateClientsidePage(sp.web, \"mypage\", \"My Page Title\", \"Article\"); // optionally publish the page first await page.save(); const comment = await page.addComment(\"A test comment\"); Get Page Comments \u00b6 import { spfi } from \"@pnp/sp\"; import { CreateClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/comments/clientside-page\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const page = await CreateClientsidePage(sp.web, \"mypage\", \"My Page Title\", \"Article\"); // optionally publish the page first await page.save(); await page.addComment(\"A test comment\"); await page.addComment(\"A test comment\"); await page.addComment(\"A test comment\"); await page.addComment(\"A test comment\"); await page.addComment(\"A test comment\"); await page.addComment(\"A test comment\"); const comments = await page.getComments(); enableComments & disableComments \u00b6 Used to control the availability of comments on a page import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; // you need to import the comments sub-module or use the all preset import \"@pnp/sp/comments/clientside-page\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // turn on comments await page.enableComments(); // turn off comments await page.disableComments(); GetById \u00b6 import { spfi } from \"@pnp/sp\"; import { CreateClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/comments/clientside-page\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const page = await CreateClientsidePage(sp.web, \"mypage\", \"My Page Title\", \"Article\"); // optionally publish the page first await page.save(); const comment = await page.addComment(\"A test comment\"); const commentData = await page.getCommentById(parseInt(comment.id, 10)); Clear Comments \u00b6 Item Comments \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/comments/item\"; const sp = spfi(...); const item = await sp.web.getFileByServerRelativePath(\"/sites/dev/SitePages/Test_8q5L.aspx\").getItem(); // as an example, or any of the below options await item.like(); The below examples use a variable named \"item\" which is taken to represent an IItem instance. Comments \u00b6 Get Item Comments \u00b6 const comments = await item.comments(); You can also get the comments merged with instances of the Comment class to immediately start accessing the properties and methods: import { spfi } from \"@pnp/sp\"; import { IComments } from \"@pnp/sp/comments\"; const sp = spfi(...); const comments: IComments = await item.comments(); // these will be Comment instances in the array comments[0].replies.add({ text: \"#PnPjs is pretty ok!\" }); //load the top 20 replies and comments for an item including likedBy information const comments = await item.comments.expand(\"replies\", \"likedBy\", \"replies/likedBy\").top(20)(); Add Comment \u00b6 import { spfi } from \"@pnp/sp\"; import { ICommentInfo } from \"@pnp/sp/comments\"; const sp = spfi(...); // you can add a comment as a string const comment = await item.comments.add(\"string comment\"); // or you can add it as an object to include mentions const commentInfo: Partial<ICommentInfo> = { text: \"This is the test comment with at mentions\", mentions: [{ loginName: 'test@contoso.com', email: 'test@contoso.com', name: 'Test User' }], }; const comment = await page.addComment(commentInfo); Delete a Comment \u00b6 import { spfi } from \"@pnp/sp\"; import { IComments } from \"@pnp/sp/comments\"; const sp = spfi(...); const comments: IComments = await item.comments(); // these will be Comment instances in the array comments[0].delete() Like Comment \u00b6 import { spfi } from \"@pnp/sp\"; import { IComments } from \"@pnp/sp/comments\"; const sp = spfi(...); const comments: IComments = await item.comments(); // these will be Comment instances in the array comments[0].like(); Unlike Comment \u00b6 import { spfi } from \"@pnp/sp\"; import { IComments } from \"@pnp/sp/comments\"; const sp = spfi(...); const comments: IComments = await item.comments(); comments[0].unlike() Reply to a Comment \u00b6 import { spfi } from \"@pnp/sp\"; import { IComments } from \"@pnp/sp/comments\"; const sp = spfi(...); const comments: IComments = await item.comments(); const comment = await comments[0].comments.add({ text: \"#PnPjs is pretty ok!\" }); Load Replies to a Comment \u00b6 import { spfi } from \"@pnp/sp\"; import { IComments } from \"@pnp/sp/comments\"; const sp = spfi(...); const comments: IComments = await item.comments(); const replies = await comments[0].replies(); Like \u00b6 You can like/unlike client-side pages, items, and comments on items. See above for how to like or unlike a comment. Below you can see how to like and unlike an items, as well as get the liked by data. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/comments/item\"; import { ILikeData, ILikedByInformation } from \"@pnp/sp/comments\"; const sp = spfi(...); const item = await sp.web.getFileByServerRelativePath(\"/sites/dev/SitePages/Home.aspx\").getItem(); // like an item await item.like(); // unlike an item await item.unlike(); // get the liked by data const likedByData: ILikeData[] = await item.getLikedBy(); // get the liked by information const likedByInfo: ILikedByInformation = await item.getLikedByInformation(); To like/unlike a client-side page and get liked by information. import { spfi } from \"@pnp/sp\"; import { ILikedByInformation } from \"@pnp/sp/comments\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/comments/clientside-page\"; const sp = spfi(...); const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // like a page await page.like(); // unlike a page await page.unlike(); // get the liked by information const likedByInfo: ILikedByInformation = await page.getLikedByInformation();","title":"Comments and Likes"},{"location":"sp/comments-likes/#pnpspcomments-and-likes","text":"Comments can be accessed through either IItem or IClientsidePage instances, though in slightly different ways. For information on loading clientside pages or items please refer to those articles. These APIs are currently in BETA and are subject to change or may not work on all tenants.","title":"@pnp/sp/comments and likes"},{"location":"sp/comments-likes/#clientsidepage-comments","text":"The IClientsidePage interface has three methods to provide easier access to the comments for a page, without requiring that you load the item separately.","title":"ClientsidePage Comments"},{"location":"sp/comments-likes/#add-comments","text":"You can add a comment using the addComment method as shown import { spfi } from \"@pnp/sp\"; import { CreateClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/comments/clientside-page\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const page = await CreateClientsidePage(sp.web, \"mypage\", \"My Page Title\", \"Article\"); // optionally publish the page first await page.save(); const comment = await page.addComment(\"A test comment\");","title":"Add Comments"},{"location":"sp/comments-likes/#get-page-comments","text":"import { spfi } from \"@pnp/sp\"; import { CreateClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/comments/clientside-page\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const page = await CreateClientsidePage(sp.web, \"mypage\", \"My Page Title\", \"Article\"); // optionally publish the page first await page.save(); await page.addComment(\"A test comment\"); await page.addComment(\"A test comment\"); await page.addComment(\"A test comment\"); await page.addComment(\"A test comment\"); await page.addComment(\"A test comment\"); await page.addComment(\"A test comment\"); const comments = await page.getComments();","title":"Get Page Comments"},{"location":"sp/comments-likes/#enablecomments-disablecomments","text":"Used to control the availability of comments on a page import { spfi } from \"@pnp/sp\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; // you need to import the comments sub-module or use the all preset import \"@pnp/sp/comments/clientside-page\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // our page instance const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // turn on comments await page.enableComments(); // turn off comments await page.disableComments();","title":"enableComments &amp; disableComments"},{"location":"sp/comments-likes/#getbyid","text":"import { spfi } from \"@pnp/sp\"; import { CreateClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/comments/clientside-page\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const page = await CreateClientsidePage(sp.web, \"mypage\", \"My Page Title\", \"Article\"); // optionally publish the page first await page.save(); const comment = await page.addComment(\"A test comment\"); const commentData = await page.getCommentById(parseInt(comment.id, 10));","title":"GetById"},{"location":"sp/comments-likes/#clear-comments","text":"","title":"Clear Comments"},{"location":"sp/comments-likes/#item-comments","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files/web\"; import \"@pnp/sp/items\"; import \"@pnp/sp/comments/item\"; const sp = spfi(...); const item = await sp.web.getFileByServerRelativePath(\"/sites/dev/SitePages/Test_8q5L.aspx\").getItem(); // as an example, or any of the below options await item.like(); The below examples use a variable named \"item\" which is taken to represent an IItem instance.","title":"Item Comments"},{"location":"sp/comments-likes/#comments","text":"","title":"Comments"},{"location":"sp/comments-likes/#get-item-comments","text":"const comments = await item.comments(); You can also get the comments merged with instances of the Comment class to immediately start accessing the properties and methods: import { spfi } from \"@pnp/sp\"; import { IComments } from \"@pnp/sp/comments\"; const sp = spfi(...); const comments: IComments = await item.comments(); // these will be Comment instances in the array comments[0].replies.add({ text: \"#PnPjs is pretty ok!\" }); //load the top 20 replies and comments for an item including likedBy information const comments = await item.comments.expand(\"replies\", \"likedBy\", \"replies/likedBy\").top(20)();","title":"Get Item Comments"},{"location":"sp/comments-likes/#add-comment","text":"import { spfi } from \"@pnp/sp\"; import { ICommentInfo } from \"@pnp/sp/comments\"; const sp = spfi(...); // you can add a comment as a string const comment = await item.comments.add(\"string comment\"); // or you can add it as an object to include mentions const commentInfo: Partial<ICommentInfo> = { text: \"This is the test comment with at mentions\", mentions: [{ loginName: 'test@contoso.com', email: 'test@contoso.com', name: 'Test User' }], }; const comment = await page.addComment(commentInfo);","title":"Add Comment"},{"location":"sp/comments-likes/#delete-a-comment","text":"import { spfi } from \"@pnp/sp\"; import { IComments } from \"@pnp/sp/comments\"; const sp = spfi(...); const comments: IComments = await item.comments(); // these will be Comment instances in the array comments[0].delete()","title":"Delete a Comment"},{"location":"sp/comments-likes/#like-comment","text":"import { spfi } from \"@pnp/sp\"; import { IComments } from \"@pnp/sp/comments\"; const sp = spfi(...); const comments: IComments = await item.comments(); // these will be Comment instances in the array comments[0].like();","title":"Like Comment"},{"location":"sp/comments-likes/#unlike-comment","text":"import { spfi } from \"@pnp/sp\"; import { IComments } from \"@pnp/sp/comments\"; const sp = spfi(...); const comments: IComments = await item.comments(); comments[0].unlike()","title":"Unlike Comment"},{"location":"sp/comments-likes/#reply-to-a-comment","text":"import { spfi } from \"@pnp/sp\"; import { IComments } from \"@pnp/sp/comments\"; const sp = spfi(...); const comments: IComments = await item.comments(); const comment = await comments[0].comments.add({ text: \"#PnPjs is pretty ok!\" });","title":"Reply to a Comment"},{"location":"sp/comments-likes/#load-replies-to-a-comment","text":"import { spfi } from \"@pnp/sp\"; import { IComments } from \"@pnp/sp/comments\"; const sp = spfi(...); const comments: IComments = await item.comments(); const replies = await comments[0].replies();","title":"Load Replies to a Comment"},{"location":"sp/comments-likes/#like","text":"You can like/unlike client-side pages, items, and comments on items. See above for how to like or unlike a comment. Below you can see how to like and unlike an items, as well as get the liked by data. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/comments/item\"; import { ILikeData, ILikedByInformation } from \"@pnp/sp/comments\"; const sp = spfi(...); const item = await sp.web.getFileByServerRelativePath(\"/sites/dev/SitePages/Home.aspx\").getItem(); // like an item await item.like(); // unlike an item await item.unlike(); // get the liked by data const likedByData: ILikeData[] = await item.getLikedBy(); // get the liked by information const likedByInfo: ILikedByInformation = await item.getLikedByInformation(); To like/unlike a client-side page and get liked by information. import { spfi } from \"@pnp/sp\"; import { ILikedByInformation } from \"@pnp/sp/comments\"; import { IClientsidePage } from \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages\"; import \"@pnp/sp/comments/clientside-page\"; const sp = spfi(...); const page: IClientsidePage = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/home.aspx\"); // like a page await page.like(); // unlike a page await page.unlike(); // get the liked by information const likedByInfo: ILikedByInformation = await page.getLikedByInformation();","title":"Like"},{"location":"sp/content-types/","text":"@pnp/sp/content-types \u00b6 Content Types are used to define sets of columns in SharePoint. IContentTypes \u00b6 Add an existing Content Type to a collection \u00b6 The following example shows how to add the built in Picture Content Type to the Documents library. const sp = spfi(...); sp.web.lists.getByTitle(\"Documents\").contentTypes.addAvailableContentType(\"0x010102\"); Get a Content Type by Id \u00b6 import { IContentType } from \"@pnp/sp/content-types\"; const sp = spfi(...); const d: IContentType = await sp.web.contentTypes.getById(\"0x01\")(); // log content type name to console console.log(d.name); Add a new Content Type \u00b6 To add a new Content Type to a collection, parameters id and name are required. For more information on creating content type IDs reference the Microsoft Documentation . While this documentation references SharePoint 2010 the structure of the IDs has not changed. const sp = spfi(...); sp.web.contentTypes.add(\"0x01008D19F38845B0884EBEBE239FDF359184\", \"My Content Type\"); It is also possible to provide a description and group parameter. For other settings, we can use the parameter named 'additionalSettings' which is a TypedHash, meaning you can send whatever properties you'd like in the body (provided that the property is supported by the SharePoint API). const sp = spfi(...); //Adding a content type with id, name, description, group and setting it to read only mode (using additionalsettings) sp.web.contentTypes.add(\"0x01008D19F38845B0884EBEBE239FDF359184\", \"My Content Type\", \"This is my content type.\", \"_PnP Content Types\", { ReadOnly: true }); IContentType \u00b6 Get the field links \u00b6 Use this method to get a collection containing all the field links (SP.FieldLink) for a Content Type. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { ContentType, IContentType } from \"@pnp/sp/content-types\"; const sp = spfi(...); // get field links from built in Content Type Document (Id: \"0x0101\") const d = await sp.web.contentTypes.getById(\"0x0101\").fieldLinks(); // log collection of fieldlinks to console console.log(d); Get Content Type fields \u00b6 To get a collection with all fields on the Content Type, simply use this method. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { ContentType, IContentType } from \"@pnp/sp/content-types\"; const sp = spfi(...); // get fields from built in Content Type Document (Id: \"0x0101\") const d = await sp.web.contentTypes.getById(\"0x0101\").fields(); // log collection of fields to console console.log(d); Get parent Content Type \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { ContentType, IContentType } from \"@pnp/sp/content-types\"; const sp = spfi(...); // get parent Content Type from built in Content Type Document (Id: \"0x0101\") const d = await sp.web.contentTypes.getById(\"0x0101\").parent(); // log name of parent Content Type to console console.log(d.Name) Get Content Type Workflow associations \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { ContentType, IContentType } from \"@pnp/sp/content-types\"; const sp = spfi(...); // get workflow associations from built in Content Type Document (Id: \"0x0101\") const d = await sp.web.contentTypes.getById(\"0x0101\").workflowAssociations(); // log collection of workflow associations to console console.log(d);","title":"Content Types"},{"location":"sp/content-types/#pnpspcontent-types","text":"Content Types are used to define sets of columns in SharePoint.","title":"@pnp/sp/content-types"},{"location":"sp/content-types/#icontenttypes","text":"","title":"IContentTypes"},{"location":"sp/content-types/#add-an-existing-content-type-to-a-collection","text":"The following example shows how to add the built in Picture Content Type to the Documents library. const sp = spfi(...); sp.web.lists.getByTitle(\"Documents\").contentTypes.addAvailableContentType(\"0x010102\");","title":"Add an existing Content Type to a collection"},{"location":"sp/content-types/#get-a-content-type-by-id","text":"import { IContentType } from \"@pnp/sp/content-types\"; const sp = spfi(...); const d: IContentType = await sp.web.contentTypes.getById(\"0x01\")(); // log content type name to console console.log(d.name);","title":"Get a Content Type by Id"},{"location":"sp/content-types/#add-a-new-content-type","text":"To add a new Content Type to a collection, parameters id and name are required. For more information on creating content type IDs reference the Microsoft Documentation . While this documentation references SharePoint 2010 the structure of the IDs has not changed. const sp = spfi(...); sp.web.contentTypes.add(\"0x01008D19F38845B0884EBEBE239FDF359184\", \"My Content Type\"); It is also possible to provide a description and group parameter. For other settings, we can use the parameter named 'additionalSettings' which is a TypedHash, meaning you can send whatever properties you'd like in the body (provided that the property is supported by the SharePoint API). const sp = spfi(...); //Adding a content type with id, name, description, group and setting it to read only mode (using additionalsettings) sp.web.contentTypes.add(\"0x01008D19F38845B0884EBEBE239FDF359184\", \"My Content Type\", \"This is my content type.\", \"_PnP Content Types\", { ReadOnly: true });","title":"Add a new Content Type"},{"location":"sp/content-types/#icontenttype","text":"","title":"IContentType"},{"location":"sp/content-types/#get-the-field-links","text":"Use this method to get a collection containing all the field links (SP.FieldLink) for a Content Type. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { ContentType, IContentType } from \"@pnp/sp/content-types\"; const sp = spfi(...); // get field links from built in Content Type Document (Id: \"0x0101\") const d = await sp.web.contentTypes.getById(\"0x0101\").fieldLinks(); // log collection of fieldlinks to console console.log(d);","title":"Get the field links"},{"location":"sp/content-types/#get-content-type-fields","text":"To get a collection with all fields on the Content Type, simply use this method. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { ContentType, IContentType } from \"@pnp/sp/content-types\"; const sp = spfi(...); // get fields from built in Content Type Document (Id: \"0x0101\") const d = await sp.web.contentTypes.getById(\"0x0101\").fields(); // log collection of fields to console console.log(d);","title":"Get Content Type fields"},{"location":"sp/content-types/#get-parent-content-type","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { ContentType, IContentType } from \"@pnp/sp/content-types\"; const sp = spfi(...); // get parent Content Type from built in Content Type Document (Id: \"0x0101\") const d = await sp.web.contentTypes.getById(\"0x0101\").parent(); // log name of parent Content Type to console console.log(d.Name)","title":"Get parent Content Type"},{"location":"sp/content-types/#get-content-type-workflow-associations","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { ContentType, IContentType } from \"@pnp/sp/content-types\"; const sp = spfi(...); // get workflow associations from built in Content Type Document (Id: \"0x0101\") const d = await sp.web.contentTypes.getById(\"0x0101\").workflowAssociations(); // log collection of workflow associations to console console.log(d);","title":"Get Content Type Workflow associations"},{"location":"sp/features/","text":"@pnp/sp/features \u00b6 Features module provides method to get the details of activated features. And to activate/deactivate features scoped at Site Collection and Web. IFeatures \u00b6 Represents a collection of features. SharePoint Sites and Webs will have a collection of features getById \u00b6 Gets the information about a feature for the given GUID import { spfi } from \"@pnp/sp\"; const sp = spfi(...); //Example of GUID format a7a2793e-67cd-4dc1-9fd0-43f61581207a const webFeatureId = \"guid-of-web-feature\"; const webFeature = await sp.web.features.getById(webFeatureId)(); const siteFeatureId = \"guid-of-site-scope-feature\"; const siteFeature = await sp.site.features.getById(siteFeatureId)(); add \u00b6 Adds (activates) a feature at the Site or Web level import { spfi } from \"@pnp/sp\"; const sp = spfi(...); //Example of GUID format a7a2793e-67cd-4dc1-9fd0-43f61581207a const webFeatureId = \"guid-of-web-feature\"; let res = await sp.web.features.add(webFeatureId); // Activate with force res = await sp.web.features.add(webFeatureId, true); remove \u00b6 Removes and deactivates the specified feature from the SharePoint Site or Web import { spfi } from \"@pnp/sp\"; const sp = spfi(...); //Example of GUID format a7a2793e-67cd-4dc1-9fd0-43f61581207a const webFeatureId = \"guid-of-web-feature\"; let res = await sp.web.features.remove(webFeatureId); // Deactivate with force res = await sp.web.features.remove(webFeatureId, true); IFeature \u00b6 Represents an instance of a SharePoint feature. deactivate \u00b6 Deactivates the specified feature from the SharePoint Site or Web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/features\"; const sp = spfi(...); //Example of GUID format a7a2793e-67cd-4dc1-9fd0-43f61581207a const webFeatureId = \"guid-of-web-feature\"; sp.web.features.remove(webFeatureId); // Deactivate with force sp.web.features.remove(webFeatureId, true);","title":"Features"},{"location":"sp/features/#pnpspfeatures","text":"Features module provides method to get the details of activated features. And to activate/deactivate features scoped at Site Collection and Web.","title":"@pnp/sp/features"},{"location":"sp/features/#ifeatures","text":"Represents a collection of features. SharePoint Sites and Webs will have a collection of features","title":"IFeatures"},{"location":"sp/features/#getbyid","text":"Gets the information about a feature for the given GUID import { spfi } from \"@pnp/sp\"; const sp = spfi(...); //Example of GUID format a7a2793e-67cd-4dc1-9fd0-43f61581207a const webFeatureId = \"guid-of-web-feature\"; const webFeature = await sp.web.features.getById(webFeatureId)(); const siteFeatureId = \"guid-of-site-scope-feature\"; const siteFeature = await sp.site.features.getById(siteFeatureId)();","title":"getById"},{"location":"sp/features/#add","text":"Adds (activates) a feature at the Site or Web level import { spfi } from \"@pnp/sp\"; const sp = spfi(...); //Example of GUID format a7a2793e-67cd-4dc1-9fd0-43f61581207a const webFeatureId = \"guid-of-web-feature\"; let res = await sp.web.features.add(webFeatureId); // Activate with force res = await sp.web.features.add(webFeatureId, true);","title":"add"},{"location":"sp/features/#remove","text":"Removes and deactivates the specified feature from the SharePoint Site or Web import { spfi } from \"@pnp/sp\"; const sp = spfi(...); //Example of GUID format a7a2793e-67cd-4dc1-9fd0-43f61581207a const webFeatureId = \"guid-of-web-feature\"; let res = await sp.web.features.remove(webFeatureId); // Deactivate with force res = await sp.web.features.remove(webFeatureId, true);","title":"remove"},{"location":"sp/features/#ifeature","text":"Represents an instance of a SharePoint feature.","title":"IFeature"},{"location":"sp/features/#deactivate","text":"Deactivates the specified feature from the SharePoint Site or Web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/features\"; const sp = spfi(...); //Example of GUID format a7a2793e-67cd-4dc1-9fd0-43f61581207a const webFeatureId = \"guid-of-web-feature\"; sp.web.features.remove(webFeatureId); // Deactivate with force sp.web.features.remove(webFeatureId, true);","title":"deactivate"},{"location":"sp/fields/","text":"@pnp/sp/fields \u00b6 Fields in SharePoint can be applied to both webs and lists. When referencing a webs' fields you are effectively looking at site columns which are common fields that can be utilized in any list/library in the site. When referencing a lists' fields you are looking at the fields only associated to that particular list. IFields \u00b6 Get Field by Id \u00b6 Gets a field from the collection by id (guid). Note that the library will handle a guid formatted with curly braces (i.e. '{03b05ff4-d95d-45ed-841d-3855f77a2483}') as well as without curly braces (i.e. '03b05ff4-d95d-45ed-841d-3855f77a2483'). The Id parameter is also case insensitive. import { spfi } from \"@pnp/sp\"; import { IField, IFieldInfo } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/fields\"; // set up sp root object const sp = spfi(...); // get the field by Id for web const field: IField = sp.web.fields.getById(\"03b05ff4-d95d-45ed-841d-3855f77a2483\"); // get the field by Id for list 'My List' const field2: IFieldInfo = await sp.web.lists.getByTitle(\"My List\").fields.getById(\"03b05ff4-d95d-45ed-841d-3855f77a2483\")(); // we can use this 'field' variable to execute more queries on the field: const r = await field.select(\"Title\")(); // show the response from the server console.log(r.Title); Get Field by Title \u00b6 You can also get a field from the collection by title. import { spfi } from \"@pnp/sp\"; import { IField, IFieldInfo } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\" import \"@pnp/sp/fields\"; const sp = spfi(...); // get the field with the title 'Author' for web const field: IField = sp.web.fields.getByTitle(\"Author\"); // get the field with the title 'Title' for list 'My List' const field2: IFieldInfo = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"Title\")(); // we can use this 'field' variable to run more queries on the field: const r = await field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Get Field by Internal Name or Title \u00b6 You can also get a field from the collection regardless of if the string is the fields internal name or title which can be different. import { spfi } from \"@pnp/sp\"; import { IField, IFieldInfo } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\" import \"@pnp/sp/fields\"; const sp = spfi(...); // get the field with the internal name 'ModifiedBy' for web const field: IField = sp.web.fields.getByInternalNameOrTitle(\"ModifiedBy\"); // get the field with the internal name 'ModifiedBy' for list 'My List' const field2: IFieldInfo = await sp.web.lists.getByTitle(\"My List\").fields.getByInternalNameOrTitle(\"ModifiedBy\")(); // we can use this 'field' variable to run more queries on the field: const r = await field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Create a Field using an XML schema \u00b6 Create a new field by defining an XML schema that assigns all the properties for the field. import { spfi } from \"@pnp/sp\"; import { IField, IFieldAddResult } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // define the schema for your new field, in this case a date field with a default date of today. const fieldSchema = `<Field ID=\"{03b09ff4-d99d-45ed-841d-3855f77a2483}\" StaticName=\"MyField\" Name=\"MyField\" DisplayName=\"My New Field\" FriendlyDisplayFormat=\"Disabled\" Format=\"DateOnly\" Type=\"DateTime\" Group=\"My Group\"><Default>[today]</Default></Field>`; // create the new field in the web const field: IFieldAddResult = await sp.web.fields.createFieldAsXml(fieldSchema); // create the new field in the list 'My List' const field2: IFieldAddResult = await sp.web.lists.getByTitle(\"My List\").fields.createFieldAsXml(fieldSchema); // we can use this 'field' variable to run more queries on the list: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a New Field \u00b6 Use the add method to create a new field where you define the field type import { spfi } from \"@pnp/sp\"; import { IField, IFieldAddResult, FieldTypes } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new field called 'My Field' in web. const field: IFieldAddResult = await sp.web.fields.add(\"My Field\", FieldTypes.Text, { FieldTypeKind: 3, Group: \"My Group\" }); // create a new field called 'My Field' in the list 'My List' const field2: IFieldAddResult = await sp.web.lists.getByTitle(\"My List\").fields.add(\"My Field\", FieldTypes.Text, { FieldTypeKind: 3, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a Site Field to a List \u00b6 Use the createFieldAsXml method to add a site field to a list. import { spfi } from \"@pnp/sp\"; import { IFieldAddResult, FieldTypes } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new field called 'My Field' in web. const field: IFieldAddResult = await sp.web.fields.add(\"My Field\", FieldTypes.Text, { FieldTypeKind: 3, Group: \"My Group\" }); // add the site field 'My Field' to the list 'My List' const r = await sp.web.lists.getByTitle(\"My List\").fields.createFieldAsXml(field.data.SchemaXml as string); // log the field Id to console console.log(r.data.Id); Add a Text Field \u00b6 Use the addText method to create a new text field. import { spfi } from \"@pnp/sp\"; import { IFieldAddResult, FieldTypes } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new text field called 'My Field' in web. const field: IFieldAddResult = await sp.web.fields.addText(\"My Field\", { MaxLength: 255, Group: \"My Group\" }); // create a new text field called 'My Field' in the list 'My List'. const field2: IFieldAddResult = await sp.web.lists.getByTitle(\"My List\").fields.addText(\"My Field\", { MaxLength: 255, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a Calculated Field \u00b6 Use the addCalculated method to create a new calculated field. import { spfi } from \"@pnp/sp\"; import { DateTimeFieldFormatType, FieldTypes } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new calculated field called 'My Field' in web const field = await sp.web.fields.addCalculated(\"My Field\", { Formula: \"=Modified+1\", DateFormat: DateTimeFieldFormatType.DateOnly, FieldTypeKind: FieldTypes.DateTime, Group: \"MyGroup\" }); // create a new calculated field called 'My Field' in the list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addCalculated(\"My Field\", { Formula: \"=Modified+1\", DateFormat: DateTimeFieldFormatType.DateOnly, FieldTypeKind: FieldTypes.DateTime, Group: \"MyGroup\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a Date/Time Field \u00b6 Use the addDateTime method to create a new date/time field. import { spfi } from \"@pnp/sp\"; import { DateTimeFieldFormatType, CalendarType, DateTimeFieldFriendlyFormatType } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new date/time field called 'My Field' in web const field = await sp.web.fields.addDateTime(\"My Field\", { DisplayFormat: DateTimeFieldFormatType.DateOnly, DateTimeCalendarType: CalendarType.Gregorian, FriendlyDisplayFormat: DateTimeFieldFriendlyFormatType.Disabled, Group: \"My Group\" }); // create a new date/time field called 'My Field' in the list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addDateTime(\"My Field\", { DisplayFormat: DateTimeFieldFormatType.DateOnly, DateTimeCalendarType: CalendarType.Gregorian, FriendlyDisplayFormat: DateTimeFieldFriendlyFormatType.Disabled, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a Currency Field \u00b6 Use the addCurrency method to create a new currency field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new currency field called 'My Field' in web const field = await sp.web.fields.addCurrency(\"My Field\", { MinimumValue: 0, MaximumValue: 100, CurrencyLocaleId: 1033, Group: \"My Group\" }); // create a new currency field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addCurrency(\"My Field\", { MinimumValue: 0, MaximumValue: 100, CurrencyLocaleId: 1033, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a Multi-line Text Field \u00b6 Use the addMultilineText method to create a new multi-line text field. For Enhanced Rich Text mode, see the next section. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new multi-line text field called 'My Field' in web const field = await sp.web.fields.addMultilineText(\"My Field\", { NumberOfLines: 6, RichText: true, RestrictedMode: false, AppendOnly: false, AllowHyperlink: true, Group: \"My Group\" }); // create a new multi-line text field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addMultilineText(\"My Field\", { NumberOfLines: 6, RichText: true, RestrictedMode: false, AppendOnly: false, AllowHyperlink: true, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a Multi-line Text Field with Enhanced Rich Text \u00b6 The REST endpoint doesn't support setting the RichTextMode field therefore you will need to revert to Xml to create the field. The following is an example that will create a multi-line text field in Enhanced Rich Text mode. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); //Create a new multi-line text field called 'My Field' in web const field = await sp.web.lists.getByTitle(\"My List\").fields.createFieldAsXml( `<Field Type=\"Note\" Name=\"MyField\" DisplayName=\"My Field\" Required=\"FALSE\" RichText=\"TRUE\" RichTextMode=\"FullHtml\" />` ); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a Number Field \u00b6 Use the addNumber method to create a new number field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new number field called 'My Field' in web const field = await sp.web.fields.addNumber(\"My Field\", { MinimumValue: 1, MaximumValue: 100, Group: \"My Group\" }); // create a new number field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addNumber(\"My Field\", { MinimumValue: 1, MaximumValue: 100, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a URL Field \u00b6 Use the addUrl method to create a new url field. import { spfi } from \"@pnp/sp\"; import { UrlFieldFormatType } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new url field called 'My Field' in web const field = await sp.web.fields.addUrl(\"My Field\", { DisplayFormat: UrlFieldFormatType.Hyperlink, Group: \"My Group\" }); // create a new url field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addUrl(\"My Field\", { DisplayFormat: UrlFieldFormatType.Hyperlink, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a User Field \u00b6 Use the addUser method to create a new user field. import { spfi } from \"@pnp/sp\"; import { FieldUserSelectionMode } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new user field called 'My Field' in web const field = await sp.web.fields.addUser(\"My Field\", { { SelectionMode: FieldUserSelectionMode.PeopleOnly, Group: \"My Group\" }); // create a new user field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addUser(\"My Field\", { { SelectionMode: FieldUserSelectionMode.PeopleOnly, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a Lookup Field \u00b6 Use the addLookup method to create a new lookup field. import { spfi } from \"@pnp/sp\"; import { FieldTypes } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); const list = await sp.web.lists.getByTitle(\"My Lookup List\")(); // create a new lookup field called 'My Field' based on an existing list 'My Lookup List' showing 'Title' field in web. const field = await sp.web.fields.addLookup(\"My Field\", { LookupListId: list.data.Id, LookupFieldName: \"Title\" }); // create a new lookup field called 'My Field' based on an existing list 'My Lookup List' showing 'Title' field in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addLookup(\"My Field\", {LookupListId: list.data.Id, LookupFieldName: \"Title\"}); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); // ** // Adding a lookup that supports multiple values takes two calls: const fieldAddResult = await sp.web.fields.addLookup(\"Test Lookup 124\", { LookupListId: list.data.Id, LookupFieldName: \"Title\" }); await fieldAddResult.field.update({ Description: 'New Description' }, \"SP.FieldLookup\"); Add a Choice Field \u00b6 Use the addChoice method to create a new choice field. import { spfi } from \"@pnp/sp\"; import { ChoiceFieldFormatType } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); const choices = [`ChoiceA`, `ChoiceB`, `ChoiceC`]; // create a new choice field called 'My Field' in web const field = await sp.web.fields.addChoice(\"My Field\", { Choices: choices, EditFormat: ChoiceFieldFormatType.Dropdown, FillInChoice: false, Group: \"My Group\" }); // create a new choice field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addChoice(\"My Field\", { Choices: choices, EditFormat: ChoiceFieldFormatType.Dropdown, FillInChoice: false, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a Multi-Choice Field \u00b6 Use the addMultiChoice method to create a new multi-choice field. import { spfi } from \"@pnp/sp\"; import { ChoiceFieldFormatType } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); const choices = [`ChoiceA`, `ChoiceB`, `ChoiceC`]; // create a new multi-choice field called 'My Field' in web const field = await sp.web.fields.addMultiChoice(\"My Field\", { Choices: choices, EditFormat: ChoiceFieldFormatType.Dropdown, FillInChoice: false, Group: \"My Group\" }); // create a new multi-choice field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addMultiChoice(\"My Field\", { Choices: choices, EditFormat: ChoiceFieldFormatType.Dropdown, FillInChoice: false, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a Boolean Field \u00b6 Use the addBoolean method to create a new boolean field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new boolean field called 'My Field' in web const field = await sp.web.fields.addBoolean(\"My Field\", { Group: \"My Group\" }); // create a new boolean field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addBoolean(\"My Field\", { Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a Dependent Lookup Field \u00b6 Use the addDependentLookupField method to create a new dependent lookup field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); const field = await sp.web.fields.addLookup(\"My Field\", { LookupListId: list.Id, LookupFieldName: \"Title\" }); // create a new dependent lookup field called 'My Dep Field' showing 'Description' based on an existing 'My Field' lookup field in web. const fieldDep = await sp.web.fields.addDependentLookupField(\"My Dep Field\", field.data.Id as string, \"Description\"); // create a new dependent lookup field called 'My Dep Field' showing 'Description' based on an existing 'My Field' lookup field in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addLookup(\"My Field\", { LookupListId: list.Id, LookupFieldName: \"Title\" }); const fieldDep2 = await sp.web.lists.getByTitle(\"My List\").fields.addDependentLookupField(\"My Dep Field\", field2.data.Id as string, \"Description\"); // we can use this 'fieldDep' variable to run more queries on the field: const r = await fieldDep.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Add a Location Field \u00b6 Use the addLocation method to create a new location field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new location field called 'My Field' in web const field = await sp.web.fields.addLocation(\"My Field\", { Group: \"My Group\" }); // create a new location field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addLocation(\"My Field\", { Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); Delete a Field \u00b6 Use the delete method to delete a field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/fields\"; const sp = spfi(...); await sp.web.fields.addBoolean(\"Temp Field\", { Group: \"My Group\" }); await sp.web.fields.addBoolean(\"Temp Field 2\", { Group: \"My Group\" }); await sp.web.lists.getByTitle(\"My List\").fields.addBoolean(\"Temp Field\", { Group: \"My Group\" }); await sp.web.lists.getByTitle(\"My List\").fields.addBoolean(\"Temp Field 2\", { Group: \"My Group\" }); // delete one or more fields from web, returns boolean const result = await sp.web.fields.getByTitle(\"Temp Field\").delete(); const result2 = await sp.web.fields.getByTitle(\"Temp Field 2\").delete(); // delete one or more fields from list 'My List', returns boolean const result = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"Temp Field\").delete(); const result2 = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"Temp Field 2\").delete(); Update a Field \u00b6 Use the update method to update a field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // update the field called 'My Field' with a description in web, returns FieldUpdateResult const fieldUpdate = await sp.web.fields.getByTitle(\"My Field\").update({ Description: \"My Description\" }); // update the field called 'My Field' with a description in list 'My List', returns FieldUpdateResult const fieldUpdate2 = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Field\").update({ Description: \"My Description\" }); // if you need to update a field with properties for a specific field type you can optionally include the field type as a second param // if you do not include it we will look up the type, but that adds a call to the server const fieldUpdate2 = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Look up Field\").update({ RelationshipDeleteBehavior: 1 }, \"SP.FieldLookup\"); Show a Field in the Display Form \u00b6 Use the setShowInDisplayForm method to add a field to the display form. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // show field called 'My Field' in display form throughout web await sp.web.fields.getByTitle(\"My Field\").setShowInDisplayForm(true); // show field called 'My Field' in display form for list 'My List' await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Field\").setShowInDisplayForm(true); Show a Field in the Edit Form \u00b6 Use the setShowInEditForm method to add a field to the edit form. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // show field called 'My Field' in edit form throughout web await sp.web.fields.getByTitle(\"My Field\").setShowInEditForm(true); // show field called 'My Field' in edit form for list 'My List' await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Field\").setShowInEditForm(true); Show a Field in the New Form \u00b6 Use the setShowInNewForm method to add a field to the display form. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // show field called 'My Field' in new form throughout web await sp.web.fields.getByTitle(\"My Field\").setShowInNewForm(true); // show field called 'My Field' in new form for list 'My List' await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Field\").setShowInNewForm(true);","title":"Fields"},{"location":"sp/fields/#pnpspfields","text":"Fields in SharePoint can be applied to both webs and lists. When referencing a webs' fields you are effectively looking at site columns which are common fields that can be utilized in any list/library in the site. When referencing a lists' fields you are looking at the fields only associated to that particular list.","title":"@pnp/sp/fields"},{"location":"sp/fields/#ifields","text":"","title":"IFields"},{"location":"sp/fields/#get-field-by-id","text":"Gets a field from the collection by id (guid). Note that the library will handle a guid formatted with curly braces (i.e. '{03b05ff4-d95d-45ed-841d-3855f77a2483}') as well as without curly braces (i.e. '03b05ff4-d95d-45ed-841d-3855f77a2483'). The Id parameter is also case insensitive. import { spfi } from \"@pnp/sp\"; import { IField, IFieldInfo } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/fields\"; // set up sp root object const sp = spfi(...); // get the field by Id for web const field: IField = sp.web.fields.getById(\"03b05ff4-d95d-45ed-841d-3855f77a2483\"); // get the field by Id for list 'My List' const field2: IFieldInfo = await sp.web.lists.getByTitle(\"My List\").fields.getById(\"03b05ff4-d95d-45ed-841d-3855f77a2483\")(); // we can use this 'field' variable to execute more queries on the field: const r = await field.select(\"Title\")(); // show the response from the server console.log(r.Title);","title":"Get Field by Id"},{"location":"sp/fields/#get-field-by-title","text":"You can also get a field from the collection by title. import { spfi } from \"@pnp/sp\"; import { IField, IFieldInfo } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\" import \"@pnp/sp/fields\"; const sp = spfi(...); // get the field with the title 'Author' for web const field: IField = sp.web.fields.getByTitle(\"Author\"); // get the field with the title 'Title' for list 'My List' const field2: IFieldInfo = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"Title\")(); // we can use this 'field' variable to run more queries on the field: const r = await field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Get Field by Title"},{"location":"sp/fields/#get-field-by-internal-name-or-title","text":"You can also get a field from the collection regardless of if the string is the fields internal name or title which can be different. import { spfi } from \"@pnp/sp\"; import { IField, IFieldInfo } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\" import \"@pnp/sp/fields\"; const sp = spfi(...); // get the field with the internal name 'ModifiedBy' for web const field: IField = sp.web.fields.getByInternalNameOrTitle(\"ModifiedBy\"); // get the field with the internal name 'ModifiedBy' for list 'My List' const field2: IFieldInfo = await sp.web.lists.getByTitle(\"My List\").fields.getByInternalNameOrTitle(\"ModifiedBy\")(); // we can use this 'field' variable to run more queries on the field: const r = await field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Get Field by Internal Name or Title"},{"location":"sp/fields/#create-a-field-using-an-xml-schema","text":"Create a new field by defining an XML schema that assigns all the properties for the field. import { spfi } from \"@pnp/sp\"; import { IField, IFieldAddResult } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // define the schema for your new field, in this case a date field with a default date of today. const fieldSchema = `<Field ID=\"{03b09ff4-d99d-45ed-841d-3855f77a2483}\" StaticName=\"MyField\" Name=\"MyField\" DisplayName=\"My New Field\" FriendlyDisplayFormat=\"Disabled\" Format=\"DateOnly\" Type=\"DateTime\" Group=\"My Group\"><Default>[today]</Default></Field>`; // create the new field in the web const field: IFieldAddResult = await sp.web.fields.createFieldAsXml(fieldSchema); // create the new field in the list 'My List' const field2: IFieldAddResult = await sp.web.lists.getByTitle(\"My List\").fields.createFieldAsXml(fieldSchema); // we can use this 'field' variable to run more queries on the list: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Create a Field using an XML schema"},{"location":"sp/fields/#add-a-new-field","text":"Use the add method to create a new field where you define the field type import { spfi } from \"@pnp/sp\"; import { IField, IFieldAddResult, FieldTypes } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new field called 'My Field' in web. const field: IFieldAddResult = await sp.web.fields.add(\"My Field\", FieldTypes.Text, { FieldTypeKind: 3, Group: \"My Group\" }); // create a new field called 'My Field' in the list 'My List' const field2: IFieldAddResult = await sp.web.lists.getByTitle(\"My List\").fields.add(\"My Field\", FieldTypes.Text, { FieldTypeKind: 3, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a New Field"},{"location":"sp/fields/#add-a-site-field-to-a-list","text":"Use the createFieldAsXml method to add a site field to a list. import { spfi } from \"@pnp/sp\"; import { IFieldAddResult, FieldTypes } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new field called 'My Field' in web. const field: IFieldAddResult = await sp.web.fields.add(\"My Field\", FieldTypes.Text, { FieldTypeKind: 3, Group: \"My Group\" }); // add the site field 'My Field' to the list 'My List' const r = await sp.web.lists.getByTitle(\"My List\").fields.createFieldAsXml(field.data.SchemaXml as string); // log the field Id to console console.log(r.data.Id);","title":"Add a Site Field to a List"},{"location":"sp/fields/#add-a-text-field","text":"Use the addText method to create a new text field. import { spfi } from \"@pnp/sp\"; import { IFieldAddResult, FieldTypes } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new text field called 'My Field' in web. const field: IFieldAddResult = await sp.web.fields.addText(\"My Field\", { MaxLength: 255, Group: \"My Group\" }); // create a new text field called 'My Field' in the list 'My List'. const field2: IFieldAddResult = await sp.web.lists.getByTitle(\"My List\").fields.addText(\"My Field\", { MaxLength: 255, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a Text Field"},{"location":"sp/fields/#add-a-calculated-field","text":"Use the addCalculated method to create a new calculated field. import { spfi } from \"@pnp/sp\"; import { DateTimeFieldFormatType, FieldTypes } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new calculated field called 'My Field' in web const field = await sp.web.fields.addCalculated(\"My Field\", { Formula: \"=Modified+1\", DateFormat: DateTimeFieldFormatType.DateOnly, FieldTypeKind: FieldTypes.DateTime, Group: \"MyGroup\" }); // create a new calculated field called 'My Field' in the list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addCalculated(\"My Field\", { Formula: \"=Modified+1\", DateFormat: DateTimeFieldFormatType.DateOnly, FieldTypeKind: FieldTypes.DateTime, Group: \"MyGroup\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a Calculated Field"},{"location":"sp/fields/#add-a-datetime-field","text":"Use the addDateTime method to create a new date/time field. import { spfi } from \"@pnp/sp\"; import { DateTimeFieldFormatType, CalendarType, DateTimeFieldFriendlyFormatType } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new date/time field called 'My Field' in web const field = await sp.web.fields.addDateTime(\"My Field\", { DisplayFormat: DateTimeFieldFormatType.DateOnly, DateTimeCalendarType: CalendarType.Gregorian, FriendlyDisplayFormat: DateTimeFieldFriendlyFormatType.Disabled, Group: \"My Group\" }); // create a new date/time field called 'My Field' in the list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addDateTime(\"My Field\", { DisplayFormat: DateTimeFieldFormatType.DateOnly, DateTimeCalendarType: CalendarType.Gregorian, FriendlyDisplayFormat: DateTimeFieldFriendlyFormatType.Disabled, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a Date/Time Field"},{"location":"sp/fields/#add-a-currency-field","text":"Use the addCurrency method to create a new currency field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new currency field called 'My Field' in web const field = await sp.web.fields.addCurrency(\"My Field\", { MinimumValue: 0, MaximumValue: 100, CurrencyLocaleId: 1033, Group: \"My Group\" }); // create a new currency field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addCurrency(\"My Field\", { MinimumValue: 0, MaximumValue: 100, CurrencyLocaleId: 1033, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a Currency Field"},{"location":"sp/fields/#add-a-multi-line-text-field","text":"Use the addMultilineText method to create a new multi-line text field. For Enhanced Rich Text mode, see the next section. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new multi-line text field called 'My Field' in web const field = await sp.web.fields.addMultilineText(\"My Field\", { NumberOfLines: 6, RichText: true, RestrictedMode: false, AppendOnly: false, AllowHyperlink: true, Group: \"My Group\" }); // create a new multi-line text field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addMultilineText(\"My Field\", { NumberOfLines: 6, RichText: true, RestrictedMode: false, AppendOnly: false, AllowHyperlink: true, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a Multi-line Text Field"},{"location":"sp/fields/#add-a-multi-line-text-field-with-enhanced-rich-text","text":"The REST endpoint doesn't support setting the RichTextMode field therefore you will need to revert to Xml to create the field. The following is an example that will create a multi-line text field in Enhanced Rich Text mode. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); //Create a new multi-line text field called 'My Field' in web const field = await sp.web.lists.getByTitle(\"My List\").fields.createFieldAsXml( `<Field Type=\"Note\" Name=\"MyField\" DisplayName=\"My Field\" Required=\"FALSE\" RichText=\"TRUE\" RichTextMode=\"FullHtml\" />` ); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a Multi-line Text Field with Enhanced Rich Text"},{"location":"sp/fields/#add-a-number-field","text":"Use the addNumber method to create a new number field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new number field called 'My Field' in web const field = await sp.web.fields.addNumber(\"My Field\", { MinimumValue: 1, MaximumValue: 100, Group: \"My Group\" }); // create a new number field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addNumber(\"My Field\", { MinimumValue: 1, MaximumValue: 100, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a Number Field"},{"location":"sp/fields/#add-a-url-field","text":"Use the addUrl method to create a new url field. import { spfi } from \"@pnp/sp\"; import { UrlFieldFormatType } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new url field called 'My Field' in web const field = await sp.web.fields.addUrl(\"My Field\", { DisplayFormat: UrlFieldFormatType.Hyperlink, Group: \"My Group\" }); // create a new url field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addUrl(\"My Field\", { DisplayFormat: UrlFieldFormatType.Hyperlink, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a URL Field"},{"location":"sp/fields/#add-a-user-field","text":"Use the addUser method to create a new user field. import { spfi } from \"@pnp/sp\"; import { FieldUserSelectionMode } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new user field called 'My Field' in web const field = await sp.web.fields.addUser(\"My Field\", { { SelectionMode: FieldUserSelectionMode.PeopleOnly, Group: \"My Group\" }); // create a new user field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addUser(\"My Field\", { { SelectionMode: FieldUserSelectionMode.PeopleOnly, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a User Field"},{"location":"sp/fields/#add-a-lookup-field","text":"Use the addLookup method to create a new lookup field. import { spfi } from \"@pnp/sp\"; import { FieldTypes } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); const list = await sp.web.lists.getByTitle(\"My Lookup List\")(); // create a new lookup field called 'My Field' based on an existing list 'My Lookup List' showing 'Title' field in web. const field = await sp.web.fields.addLookup(\"My Field\", { LookupListId: list.data.Id, LookupFieldName: \"Title\" }); // create a new lookup field called 'My Field' based on an existing list 'My Lookup List' showing 'Title' field in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addLookup(\"My Field\", {LookupListId: list.data.Id, LookupFieldName: \"Title\"}); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id); // ** // Adding a lookup that supports multiple values takes two calls: const fieldAddResult = await sp.web.fields.addLookup(\"Test Lookup 124\", { LookupListId: list.data.Id, LookupFieldName: \"Title\" }); await fieldAddResult.field.update({ Description: 'New Description' }, \"SP.FieldLookup\");","title":"Add a Lookup Field"},{"location":"sp/fields/#add-a-choice-field","text":"Use the addChoice method to create a new choice field. import { spfi } from \"@pnp/sp\"; import { ChoiceFieldFormatType } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); const choices = [`ChoiceA`, `ChoiceB`, `ChoiceC`]; // create a new choice field called 'My Field' in web const field = await sp.web.fields.addChoice(\"My Field\", { Choices: choices, EditFormat: ChoiceFieldFormatType.Dropdown, FillInChoice: false, Group: \"My Group\" }); // create a new choice field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addChoice(\"My Field\", { Choices: choices, EditFormat: ChoiceFieldFormatType.Dropdown, FillInChoice: false, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a Choice Field"},{"location":"sp/fields/#add-a-multi-choice-field","text":"Use the addMultiChoice method to create a new multi-choice field. import { spfi } from \"@pnp/sp\"; import { ChoiceFieldFormatType } from \"@pnp/sp/fields/types\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); const choices = [`ChoiceA`, `ChoiceB`, `ChoiceC`]; // create a new multi-choice field called 'My Field' in web const field = await sp.web.fields.addMultiChoice(\"My Field\", { Choices: choices, EditFormat: ChoiceFieldFormatType.Dropdown, FillInChoice: false, Group: \"My Group\" }); // create a new multi-choice field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addMultiChoice(\"My Field\", { Choices: choices, EditFormat: ChoiceFieldFormatType.Dropdown, FillInChoice: false, Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a Multi-Choice Field"},{"location":"sp/fields/#add-a-boolean-field","text":"Use the addBoolean method to create a new boolean field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new boolean field called 'My Field' in web const field = await sp.web.fields.addBoolean(\"My Field\", { Group: \"My Group\" }); // create a new boolean field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addBoolean(\"My Field\", { Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a Boolean Field"},{"location":"sp/fields/#add-a-dependent-lookup-field","text":"Use the addDependentLookupField method to create a new dependent lookup field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); const field = await sp.web.fields.addLookup(\"My Field\", { LookupListId: list.Id, LookupFieldName: \"Title\" }); // create a new dependent lookup field called 'My Dep Field' showing 'Description' based on an existing 'My Field' lookup field in web. const fieldDep = await sp.web.fields.addDependentLookupField(\"My Dep Field\", field.data.Id as string, \"Description\"); // create a new dependent lookup field called 'My Dep Field' showing 'Description' based on an existing 'My Field' lookup field in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addLookup(\"My Field\", { LookupListId: list.Id, LookupFieldName: \"Title\" }); const fieldDep2 = await sp.web.lists.getByTitle(\"My List\").fields.addDependentLookupField(\"My Dep Field\", field2.data.Id as string, \"Description\"); // we can use this 'fieldDep' variable to run more queries on the field: const r = await fieldDep.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a Dependent Lookup Field"},{"location":"sp/fields/#add-a-location-field","text":"Use the addLocation method to create a new location field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // create a new location field called 'My Field' in web const field = await sp.web.fields.addLocation(\"My Field\", { Group: \"My Group\" }); // create a new location field called 'My Field' in list 'My List' const field2 = await sp.web.lists.getByTitle(\"My List\").fields.addLocation(\"My Field\", { Group: \"My Group\" }); // we can use this 'field' variable to run more queries on the field: const r = await field.field.select(\"Id\")(); // log the field Id to console console.log(r.Id);","title":"Add a Location Field"},{"location":"sp/fields/#delete-a-field","text":"Use the delete method to delete a field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/fields\"; const sp = spfi(...); await sp.web.fields.addBoolean(\"Temp Field\", { Group: \"My Group\" }); await sp.web.fields.addBoolean(\"Temp Field 2\", { Group: \"My Group\" }); await sp.web.lists.getByTitle(\"My List\").fields.addBoolean(\"Temp Field\", { Group: \"My Group\" }); await sp.web.lists.getByTitle(\"My List\").fields.addBoolean(\"Temp Field 2\", { Group: \"My Group\" }); // delete one or more fields from web, returns boolean const result = await sp.web.fields.getByTitle(\"Temp Field\").delete(); const result2 = await sp.web.fields.getByTitle(\"Temp Field 2\").delete(); // delete one or more fields from list 'My List', returns boolean const result = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"Temp Field\").delete(); const result2 = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"Temp Field 2\").delete();","title":"Delete a Field"},{"location":"sp/fields/#update-a-field","text":"Use the update method to update a field. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // update the field called 'My Field' with a description in web, returns FieldUpdateResult const fieldUpdate = await sp.web.fields.getByTitle(\"My Field\").update({ Description: \"My Description\" }); // update the field called 'My Field' with a description in list 'My List', returns FieldUpdateResult const fieldUpdate2 = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Field\").update({ Description: \"My Description\" }); // if you need to update a field with properties for a specific field type you can optionally include the field type as a second param // if you do not include it we will look up the type, but that adds a call to the server const fieldUpdate2 = await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Look up Field\").update({ RelationshipDeleteBehavior: 1 }, \"SP.FieldLookup\");","title":"Update a Field"},{"location":"sp/fields/#show-a-field-in-the-display-form","text":"Use the setShowInDisplayForm method to add a field to the display form. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // show field called 'My Field' in display form throughout web await sp.web.fields.getByTitle(\"My Field\").setShowInDisplayForm(true); // show field called 'My Field' in display form for list 'My List' await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Field\").setShowInDisplayForm(true);","title":"Show a Field in the Display Form"},{"location":"sp/fields/#show-a-field-in-the-edit-form","text":"Use the setShowInEditForm method to add a field to the edit form. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // show field called 'My Field' in edit form throughout web await sp.web.fields.getByTitle(\"My Field\").setShowInEditForm(true); // show field called 'My Field' in edit form for list 'My List' await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Field\").setShowInEditForm(true);","title":"Show a Field in the Edit Form"},{"location":"sp/fields/#show-a-field-in-the-new-form","text":"Use the setShowInNewForm method to add a field to the display form. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // show field called 'My Field' in new form throughout web await sp.web.fields.getByTitle(\"My Field\").setShowInNewForm(true); // show field called 'My Field' in new form for list 'My List' await sp.web.lists.getByTitle(\"My List\").fields.getByTitle(\"My Field\").setShowInNewForm(true);","title":"Show a Field in the New Form"},{"location":"sp/files/","text":"@pnp/sp/files \u00b6 One of the more challenging tasks on the client side is working with SharePoint files, especially if they are large files. We have added some methods to the library to help and their use is outlined below. Reading Files \u00b6 Reading files from the client using REST is covered in the below examples. The important thing to remember is choosing which format you want the file in so you can appropriately process it. You can retrieve a file as Blob, Buffer, JSON, or Text. If you have a special requirement you could also write your own parser . import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const blob: Blob = await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/file.avi\").getBlob(); const buffer: ArrayBuffer = await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/file.avi\").getBuffer(); const json: any = await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/file.json\").getJSON(); const text: string = await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/file.txt\").getText(); // all of these also work from a file object no matter how you access it const text2: string = await sp.web.getFolderByServerRelativePath(\"/sites/dev/documents\").files.getByUrl(\"file.txt\").getText(); getFileByUrl \u00b6 This method supports opening files from sharing links or absolute urls. The file must reside in the site from which you are trying to open the file. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files/web\"; const sp = spfi(...); const url = \"{absolute file url OR sharing url}\"; // file is an IFile and supports all the file operations const file = sp.web.getFileByUrl(url); // for example const fileContent = await file.getText(); Adding Files \u00b6 Likewise you can add files using one of two methods, addUsingPath or addChunked. AddChunked is appropriate for larger files, generally larger than 10 MB but this may differ based on your bandwidth/latency so you can adjust the code to use the chunked method. The below example shows getting the file object from an input and uploading it to SharePoint, choosing the upload method based on file size. The addUsingPath method, supports the percent or pound characters in file names. declare var require: (s: string) => any; import { ConsoleListener, Logger, LogLevel } from \"@pnp/logging\"; import { Web } from \"@pnp/sp/webs\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; import { auth } from \"./auth\"; let $ = require(\"jquery\"); // <-- used here for illustration let siteUrl = \"https://mytenant.sharepoint.com/sites/dev\"; // comment this out for non-node execution // auth(siteUrl); Logger.subscribe(new ConsoleListener()); Logger.activeLogLevel = LogLevel.Verbose; let web = Web(siteUrl); $(() => { $(\"#testingdiv\").append(\"<button id='thebuttontodoit'>Do It</button>\"); $(\"#thebuttontodoit\").on('click', async (e) => { e.preventDefault(); let input = <HTMLInputElement>document.getElementById(\"thefileinput\"); let file = input.files[0]; // you can adjust this number to control what size files are uploaded in chunks if (file.size <= 10485760) { // small upload await web.getFolderByServerRelativePath(\"Shared Documents\").files.addUsingPath(file.name, file, {Overwrite: true}); Logger.write(\"done\"); } else { // large upload await web.getFolderByServerRelativePath(\"Shared Documents\").files.addChunked(\"filename%#%.txt\", file, data => { Logger.log({ data: data, level: LogLevel.Verbose, message: \"progress\" }); }, true); Logger.write(\"done!\") } }); }); Adding a file using Nodejs Streams \u00b6 If you are working in nodejs you can also add a file using a stream. This example makes a copy of a file using streams. // triggers auto-application of extensions, in this case to add getStream import \"@pnp/nodejs\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/files\"; import { createReadStream } from 'fs'; import { SPDefault } from \"@pnp/nodejs\"; import { ThrowErrors } from \"@pnp/queryable\"; // get a stream of an existing file const stream = createReadStream(\"c:/temp/file.txt\"); // now add the stream as a new file, remember to set the content-length header const sp = spfi(\"{tenant url}\").using(SPDefault({ baseUrl: 'https://{tenant}.sharepoint.com/sites/dev', msal: { config: config, scopes: [ 'https://{tenant}.sharepoint.com/.default' ] } })).using(ThrowErrors()); const fr = await sp.web.lists.getByTitle(\"Documents\").rootFolder.files.addChunked( \"new.txt\", stream, undefined, true ); Setting Associated Item Values \u00b6 You can also update the file properties of a newly uploaded file using code similar to the below snippet: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const file = await sp.web.getFolderByServerRelativePath(\"/sites/dev/Shared%20Documents/test/\").files.addUsingPath(\"file.name\", \"content\", {Overwrite: true}); const item = await file.file.getItem(); await item.update({ Title: \"A Title\", OtherField: \"My Other Value\" }); Update File Content \u00b6 You can of course use similar methods to update existing files as shown below. This overwrites the existing content in the file. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; const sp = spfi(...); await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/test.txt\").setContent(\"New string content for the file.\"); await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/test.mp4\").setContentChunked(file); Check in, Check out, and Approve & Deny \u00b6 The library provides helper methods for checking in, checking out, and approving files. Examples of these methods are shown below. Check In \u00b6 Check in takes two optional arguments, comment and check in type. import { spfi } from \"@pnp/sp\"; import { CheckinType } from \"@pnp/sp/files\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); // default options with empty comment and CheckinType.Major await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").checkin(); console.log(\"File checked in!\"); // supply a comment (< 1024 chars) and using default check in type CheckinType.Major await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").checkin(\"A comment\"); console.log(\"File checked in!\"); // Supply both comment and check in type await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").checkin(\"A comment\", CheckinType.Overwrite); console.log(\"File checked in!\"); Check Out \u00b6 Check out takes no arguments. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").checkout(); console.log(\"File checked out!\"); Approve and Deny \u00b6 You can also approve or deny files in libraries that use approval. Approve takes a single required argument of comment, the comment is optional for deny. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").approve(\"Approval Comment\"); console.log(\"File approved!\"); // deny with no comment await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").deny(); console.log(\"File denied!\"); // deny with a supplied comment. await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").deny(\"Deny comment\"); console.log(\"File denied!\"); Publish and Unpublish \u00b6 You can both publish and unpublish a file using the library. Both methods take an optional comment argument. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); // publish with no comment await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").publish(); console.log(\"File published!\"); // publish with a supplied comment. await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").publish(\"Publish comment\"); console.log(\"File published!\"); // unpublish with no comment await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").unpublish(); console.log(\"File unpublished!\"); // unpublish with a supplied comment. await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").unpublish(\"Unpublish comment\"); console.log(\"File unpublished!\"); Advanced Upload Options \u00b6 Both the addChunked and setContentChunked methods support options beyond just supplying the file content. progress function \u00b6 A method that is called each time a chunk is uploaded and provides enough information to report progress or update a progress bar easily. The method has the signature: (data: ChunkedFileUploadProgressData) => void The data interface is: export interface ChunkedFileUploadProgressData { stage: \"starting\" | \"continue\" | \"finishing\"; blockNumber: number; totalBlocks: number; chunkSize: number; currentPointer: number; fileSize: number; } chunkSize \u00b6 This property controls the size of the individual chunks and is defaulted to 10485760 bytes (10 MB). You can adjust this based on your bandwidth needs - especially if writing code for mobile uploads or you are seeing frequent timeouts. getItem \u00b6 This method allows you to get the item associated with this file. You can optionally specify one or more select fields. The result will be merged with a new Item instance so you will have both the returned property values and chaining ability in a single object. import { spFI, SPFx } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/security\"; const sp = spfi(...); const item = await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.txt\").getItem(); console.log(item); const item2 = await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.txt\").getItem(\"Title\", \"Modified\"); console.log(item2); // you can also chain directly off this item instance const perms = await item.getCurrentUserEffectivePermissions(); console.log(perms); You can also supply a generic typing parameter and the resulting type will be a union type of Item and the generic type parameter. This allows you to have proper intellisense and type checking. import { spFI, SPFx } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/items\"; import \"@pnp/sp/security\"; const sp = spfi(...); // also supports typing the objects so your type will be a union type const item = await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.txt\").getItem<{ Id: number, Title: string }>(\"Id\", \"Title\"); // You get intellisense and proper typing of the returned object console.log(`Id: ${item.Id} -- ${item.Title}`); // You can also chain directly off this item instance const perms = await item.getCurrentUserEffectivePermissions(); console.log(perms); move \u00b6 It's possible to move a file to a new destination within a site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); // destination is a server-relative url of a new file const destinationUrl = `/sites/dev/SiteAssets/new-file.docx`; await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.docx\").moveByPath(destinationUrl, false, true); copy \u00b6 It's possible to copy a file to a new destination within a site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); // destination is a server-relative url of a new file const destinationUrl = `/sites/dev/SiteAssets/new-file.docx`; await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.docx\").copyTo(destinationUrl, false); copy by path \u00b6 It's possible to copy a file to a new destination within the same or a different site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); // destination is a server-relative url of a new file const destinationUrl = `/sites/dev2/SiteAssets/new-file.docx`; await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.docx\").copyByPath(destinationUrl, false, true); getFileById \u00b6 You can get a file by Id from a web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import { IFile } from \"@pnp/sp/files\"; const sp = spfi(...); const file: IFile = sp.web.getFileById(\"2b281c7b-ece9-4b76-82f9-f5cf5e152ba0\"); delete \u00b6 Deletes a file import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); await sp.web.getFolderByServerRelativePath(\"{folder relative path}\").files.getByUrl(\"filename.txt\").delete(); delete with params \u00b6 Deletes a file with options import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); await sp.web.getFolderByServerRelativePath(\"{folder relative path}\").files.getByUrl(\"filename.txt\").deleteWithParams({ BypassSharedLock: true, }); exists \u00b6 Checks to see if a file exists import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); const exists = await sp.web.getFolderByServerRelativePath(\"{folder relative path}\").files.getByUrl(\"name.txt\").exists();","title":"Files"},{"location":"sp/files/#pnpspfiles","text":"One of the more challenging tasks on the client side is working with SharePoint files, especially if they are large files. We have added some methods to the library to help and their use is outlined below.","title":"@pnp/sp/files"},{"location":"sp/files/#reading-files","text":"Reading files from the client using REST is covered in the below examples. The important thing to remember is choosing which format you want the file in so you can appropriately process it. You can retrieve a file as Blob, Buffer, JSON, or Text. If you have a special requirement you could also write your own parser . import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const blob: Blob = await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/file.avi\").getBlob(); const buffer: ArrayBuffer = await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/file.avi\").getBuffer(); const json: any = await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/file.json\").getJSON(); const text: string = await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/file.txt\").getText(); // all of these also work from a file object no matter how you access it const text2: string = await sp.web.getFolderByServerRelativePath(\"/sites/dev/documents\").files.getByUrl(\"file.txt\").getText();","title":"Reading Files"},{"location":"sp/files/#getfilebyurl","text":"This method supports opening files from sharing links or absolute urls. The file must reside in the site from which you are trying to open the file. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files/web\"; const sp = spfi(...); const url = \"{absolute file url OR sharing url}\"; // file is an IFile and supports all the file operations const file = sp.web.getFileByUrl(url); // for example const fileContent = await file.getText();","title":"getFileByUrl"},{"location":"sp/files/#adding-files","text":"Likewise you can add files using one of two methods, addUsingPath or addChunked. AddChunked is appropriate for larger files, generally larger than 10 MB but this may differ based on your bandwidth/latency so you can adjust the code to use the chunked method. The below example shows getting the file object from an input and uploading it to SharePoint, choosing the upload method based on file size. The addUsingPath method, supports the percent or pound characters in file names. declare var require: (s: string) => any; import { ConsoleListener, Logger, LogLevel } from \"@pnp/logging\"; import { Web } from \"@pnp/sp/webs\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; import { auth } from \"./auth\"; let $ = require(\"jquery\"); // <-- used here for illustration let siteUrl = \"https://mytenant.sharepoint.com/sites/dev\"; // comment this out for non-node execution // auth(siteUrl); Logger.subscribe(new ConsoleListener()); Logger.activeLogLevel = LogLevel.Verbose; let web = Web(siteUrl); $(() => { $(\"#testingdiv\").append(\"<button id='thebuttontodoit'>Do It</button>\"); $(\"#thebuttontodoit\").on('click', async (e) => { e.preventDefault(); let input = <HTMLInputElement>document.getElementById(\"thefileinput\"); let file = input.files[0]; // you can adjust this number to control what size files are uploaded in chunks if (file.size <= 10485760) { // small upload await web.getFolderByServerRelativePath(\"Shared Documents\").files.addUsingPath(file.name, file, {Overwrite: true}); Logger.write(\"done\"); } else { // large upload await web.getFolderByServerRelativePath(\"Shared Documents\").files.addChunked(\"filename%#%.txt\", file, data => { Logger.log({ data: data, level: LogLevel.Verbose, message: \"progress\" }); }, true); Logger.write(\"done!\") } }); });","title":"Adding Files"},{"location":"sp/files/#adding-a-file-using-nodejs-streams","text":"If you are working in nodejs you can also add a file using a stream. This example makes a copy of a file using streams. // triggers auto-application of extensions, in this case to add getStream import \"@pnp/nodejs\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/files\"; import { createReadStream } from 'fs'; import { SPDefault } from \"@pnp/nodejs\"; import { ThrowErrors } from \"@pnp/queryable\"; // get a stream of an existing file const stream = createReadStream(\"c:/temp/file.txt\"); // now add the stream as a new file, remember to set the content-length header const sp = spfi(\"{tenant url}\").using(SPDefault({ baseUrl: 'https://{tenant}.sharepoint.com/sites/dev', msal: { config: config, scopes: [ 'https://{tenant}.sharepoint.com/.default' ] } })).using(ThrowErrors()); const fr = await sp.web.lists.getByTitle(\"Documents\").rootFolder.files.addChunked( \"new.txt\", stream, undefined, true );","title":"Adding a file using Nodejs Streams"},{"location":"sp/files/#setting-associated-item-values","text":"You can also update the file properties of a newly uploaded file using code similar to the below snippet: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const file = await sp.web.getFolderByServerRelativePath(\"/sites/dev/Shared%20Documents/test/\").files.addUsingPath(\"file.name\", \"content\", {Overwrite: true}); const item = await file.file.getItem(); await item.update({ Title: \"A Title\", OtherField: \"My Other Value\" });","title":"Setting Associated Item Values"},{"location":"sp/files/#update-file-content","text":"You can of course use similar methods to update existing files as shown below. This overwrites the existing content in the file. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; const sp = spfi(...); await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/test.txt\").setContent(\"New string content for the file.\"); await sp.web.getFileByServerRelativePath(\"/sites/dev/documents/test.mp4\").setContentChunked(file);","title":"Update File Content"},{"location":"sp/files/#check-in-check-out-and-approve-deny","text":"The library provides helper methods for checking in, checking out, and approving files. Examples of these methods are shown below.","title":"Check in, Check out, and Approve &amp; Deny"},{"location":"sp/files/#check-in","text":"Check in takes two optional arguments, comment and check in type. import { spfi } from \"@pnp/sp\"; import { CheckinType } from \"@pnp/sp/files\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); // default options with empty comment and CheckinType.Major await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").checkin(); console.log(\"File checked in!\"); // supply a comment (< 1024 chars) and using default check in type CheckinType.Major await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").checkin(\"A comment\"); console.log(\"File checked in!\"); // Supply both comment and check in type await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").checkin(\"A comment\", CheckinType.Overwrite); console.log(\"File checked in!\");","title":"Check In"},{"location":"sp/files/#check-out","text":"Check out takes no arguments. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").checkout(); console.log(\"File checked out!\");","title":"Check Out"},{"location":"sp/files/#approve-and-deny","text":"You can also approve or deny files in libraries that use approval. Approve takes a single required argument of comment, the comment is optional for deny. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").approve(\"Approval Comment\"); console.log(\"File approved!\"); // deny with no comment await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").deny(); console.log(\"File denied!\"); // deny with a supplied comment. await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").deny(\"Deny comment\"); console.log(\"File denied!\");","title":"Approve and Deny"},{"location":"sp/files/#publish-and-unpublish","text":"You can both publish and unpublish a file using the library. Both methods take an optional comment argument. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); // publish with no comment await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").publish(); console.log(\"File published!\"); // publish with a supplied comment. await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").publish(\"Publish comment\"); console.log(\"File published!\"); // unpublish with no comment await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").unpublish(); console.log(\"File unpublished!\"); // unpublish with a supplied comment. await sp.web.getFileByServerRelativePath(\"/sites/dev/shared documents/file.txt\").unpublish(\"Unpublish comment\"); console.log(\"File unpublished!\");","title":"Publish and Unpublish"},{"location":"sp/files/#advanced-upload-options","text":"Both the addChunked and setContentChunked methods support options beyond just supplying the file content.","title":"Advanced Upload Options"},{"location":"sp/files/#progress-function","text":"A method that is called each time a chunk is uploaded and provides enough information to report progress or update a progress bar easily. The method has the signature: (data: ChunkedFileUploadProgressData) => void The data interface is: export interface ChunkedFileUploadProgressData { stage: \"starting\" | \"continue\" | \"finishing\"; blockNumber: number; totalBlocks: number; chunkSize: number; currentPointer: number; fileSize: number; }","title":"progress function"},{"location":"sp/files/#chunksize","text":"This property controls the size of the individual chunks and is defaulted to 10485760 bytes (10 MB). You can adjust this based on your bandwidth needs - especially if writing code for mobile uploads or you are seeing frequent timeouts.","title":"chunkSize"},{"location":"sp/files/#getitem","text":"This method allows you to get the item associated with this file. You can optionally specify one or more select fields. The result will be merged with a new Item instance so you will have both the returned property values and chaining ability in a single object. import { spFI, SPFx } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/security\"; const sp = spfi(...); const item = await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.txt\").getItem(); console.log(item); const item2 = await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.txt\").getItem(\"Title\", \"Modified\"); console.log(item2); // you can also chain directly off this item instance const perms = await item.getCurrentUserEffectivePermissions(); console.log(perms); You can also supply a generic typing parameter and the resulting type will be a union type of Item and the generic type parameter. This allows you to have proper intellisense and type checking. import { spFI, SPFx } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/items\"; import \"@pnp/sp/security\"; const sp = spfi(...); // also supports typing the objects so your type will be a union type const item = await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.txt\").getItem<{ Id: number, Title: string }>(\"Id\", \"Title\"); // You get intellisense and proper typing of the returned object console.log(`Id: ${item.Id} -- ${item.Title}`); // You can also chain directly off this item instance const perms = await item.getCurrentUserEffectivePermissions(); console.log(perms);","title":"getItem"},{"location":"sp/files/#move","text":"It's possible to move a file to a new destination within a site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); // destination is a server-relative url of a new file const destinationUrl = `/sites/dev/SiteAssets/new-file.docx`; await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.docx\").moveByPath(destinationUrl, false, true);","title":"move"},{"location":"sp/files/#copy","text":"It's possible to copy a file to a new destination within a site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); // destination is a server-relative url of a new file const destinationUrl = `/sites/dev/SiteAssets/new-file.docx`; await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.docx\").copyTo(destinationUrl, false);","title":"copy"},{"location":"sp/files/#copy-by-path","text":"It's possible to copy a file to a new destination within the same or a different site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); // destination is a server-relative url of a new file const destinationUrl = `/sites/dev2/SiteAssets/new-file.docx`; await sp.web.getFileByServerRelativePath(\"/sites/dev/Shared Documents/test.docx\").copyByPath(destinationUrl, false, true);","title":"copy by path"},{"location":"sp/files/#getfilebyid","text":"You can get a file by Id from a web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; import { IFile } from \"@pnp/sp/files\"; const sp = spfi(...); const file: IFile = sp.web.getFileById(\"2b281c7b-ece9-4b76-82f9-f5cf5e152ba0\");","title":"getFileById"},{"location":"sp/files/#delete","text":"Deletes a file import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); await sp.web.getFolderByServerRelativePath(\"{folder relative path}\").files.getByUrl(\"filename.txt\").delete();","title":"delete"},{"location":"sp/files/#delete-with-params","text":"Deletes a file with options import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); await sp.web.getFolderByServerRelativePath(\"{folder relative path}\").files.getByUrl(\"filename.txt\").deleteWithParams({ BypassSharedLock: true, });","title":"delete with params"},{"location":"sp/files/#exists","text":"Checks to see if a file exists import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files\"; const sp = spfi(...); const exists = await sp.web.getFolderByServerRelativePath(\"{folder relative path}\").files.getByUrl(\"name.txt\").exists();","title":"exists"},{"location":"sp/folders/","text":"@pnp/sp/folders \u00b6 Folders serve as a container for your files and list items. IFolders \u00b6 Represents a collection of folders. SharePoint webs, lists, and list items have a collection of folders under their properties. Get folders collection for various SharePoint objects \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/items\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // gets web's folders const webFolders = await sp.web.folders(); // gets list's folders const listFolders = await sp.web.lists.getByTitle(\"My List\").rootFolder.folders(); // gets item's folders const itemFolders = await sp.web.lists.getByTitle(\"My List\").items.getById(1).folder.folders(); add \u00b6 Adds a new folder to collection of folders import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // creates a new folder for web with specified url const folderAddResult = await sp.web.folders.addUsingPath(\"folder url\"); getByUrl \u00b6 Gets a folder instance from a collection by folder's name import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const folder = await sp.web.folders.getByUrl(\"folder name\")(); IFolder \u00b6 Represents an instance of a SharePoint folder. Get a folder object associated with different SharePoint artifacts (web, list, list item) \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); // web's folder const rootFolder = await sp.web.rootFolder(); // list's folder const listRootFolder = await sp.web.lists.getByTitle(\"234\").rootFolder(); // item's folder const itemFolder = await sp.web.lists.getByTitle(\"234\").items.getById(1).folder(); getItem \u00b6 Gets list item associated with a folder import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const folderItem = await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").getItem(); move \u00b6 It's possible to move a folder to a new destination within a site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // destination is a server-relative url of a new folder const destinationUrl = `/sites/my-site/SiteAssets/new-folder`; await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").moveByPath(destinationUrl); copy \u00b6 It's possible to copy a folder to a new destination within a site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // destination is a server-relative url of a new folder const destinationUrl = `/sites/my-site/SiteAssets/new-folder`; await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").copyByPath(destinationUrl); move by path \u00b6 It's possible to move a folder to a new destination within the same or a different site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // destination is a server-relative url of a new folder const destinationUrl = `/sites/my-site/SiteAssets/new-folder`; await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").moveByPath(destinationUrl, true); copy by path \u00b6 It's possible to copy a folder to a new destination within the same or a different site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // destination is a server-relative url of a new folder const destinationUrl = `/sites/my-site/SiteAssets/new-folder`; await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").copyByPath(destinationUrl, true); delete \u00b6 Deletes a folder import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); await sp.web.rootFolder.folders.getByUrl(\"My Folder\").delete(); delete with params \u00b6 Deletes a folder with options import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); await sp.web.rootFolder.folders.getByUrl(\"My Folder\").deleteWithParams({ BypassSharedLock: true, DeleteIfEmpty: true, }); recycle \u00b6 Recycles a folder import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); await sp.web.rootFolder.folders.getByUrl(\"My Folder\").recycle(); serverRelativeUrl \u00b6 Gets folder's server relative url import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const relUrl = await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").select('ServerRelativeUrl')(); update \u00b6 Updates folder's properties import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); await sp.web.getFolderByServerRelativePath(\"Shared Documents/Folder2\").update({ \"Name\": \"New name\", }); contentTypeOrder \u00b6 Gets content type order of a folder import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const order = await sp.web.getFolderByServerRelativePath(\"Shared Documents\").select('contentTypeOrder')(); folders \u00b6 Gets all child folders associated with the current folder import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const folders = await sp.web.rootFolder.folders(); files \u00b6 Gets all files inside a folder import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/files/folder\"; const sp = spfi(...); const files = await sp.web.getFolderByServerRelativePath(\"Shared Documents\").files(); listItemAllFields \u00b6 Gets this folder's list item field values import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const itemFields = await sp.web.getFolderByServerRelativePath(\"Shared Documents/My Folder\").listItemAllFields(); parentFolder \u00b6 Gets the parent folder, if available import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const parentFolder = await sp.web.getFolderByServerRelativePath(\"Shared Documents/My Folder\").parentFolder(); properties \u00b6 Gets this folder's properties import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const properties = await sp.web.getFolderByServerRelativePath(\"Shared Documents/Folder2\").properties(); uniqueContentTypeOrder \u00b6 Gets a value that specifies the content type order. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const contentTypeOrder = await sp.web.getFolderByServerRelativePath(\"Shared Documents/Folder2\").select('uniqueContentTypeOrder')(); Rename a folder \u00b6 You can rename a folder by updating FileLeafRef property: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const folder = sp.web.getFolderByServerRelativePath(\"Shared Documents/My Folder\"); const item = await folder.getItem(); const result = await item.update({ FileLeafRef: \"Folder2\" }); Create a folder with custom content type \u00b6 Below code creates a new folder under Document library and assigns custom folder content type to a newly created folder. Additionally it sets a field of a custom folder content type. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/items\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/lists\"; const sp = spfi(...); const newFolderResult = await sp.web.rootFolder.folders.getByUrl(\"Shared Documents\").folders.addUsingPath(\"My New Folder\"); const item = await newFolderResult.folder.listItemAllFields(); await sp.web.lists.getByTitle(\"Documents\").items.getById(item.ID).update({ ContentTypeId: \"0x0120001E76ED75A3E3F3408811F0BF56C4CDDD\", MyFolderField: \"field value\", Title: \"My New Folder\", }); addSubFolderUsingPath \u00b6 You can use the addSubFolderUsingPath method to add a folder with some special chars supported import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; import { IFolder } from \"@pnp/sp/folders\"; const sp = spfi(...); // add a folder to site assets const folder: IFolder = await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").addSubFolderUsingPath(\"folder name\"); getFolderById \u00b6 You can get a folder by Id from a web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; import { IFolder } from \"@pnp/sp/folders\"; const sp = spfi(...); const folder: IFolder = sp.web.getFolderById(\"2b281c7b-ece9-4b76-82f9-f5cf5e152ba0\"); getParentInfos \u00b6 Gets information about folder, including details about the parent list, parent list root folder, and parent web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const folder: IFolder = sp.web.getFolderById(\"2b281c7b-ece9-4b76-82f9-f5cf5e152ba0\"); await folder.getParentInfos();","title":"Folders"},{"location":"sp/folders/#pnpspfolders","text":"Folders serve as a container for your files and list items.","title":"@pnp/sp/folders"},{"location":"sp/folders/#ifolders","text":"Represents a collection of folders. SharePoint webs, lists, and list items have a collection of folders under their properties.","title":"IFolders"},{"location":"sp/folders/#get-folders-collection-for-various-sharepoint-objects","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/items\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // gets web's folders const webFolders = await sp.web.folders(); // gets list's folders const listFolders = await sp.web.lists.getByTitle(\"My List\").rootFolder.folders(); // gets item's folders const itemFolders = await sp.web.lists.getByTitle(\"My List\").items.getById(1).folder.folders();","title":"Get folders collection for various SharePoint objects"},{"location":"sp/folders/#add","text":"Adds a new folder to collection of folders import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // creates a new folder for web with specified url const folderAddResult = await sp.web.folders.addUsingPath(\"folder url\");","title":"add"},{"location":"sp/folders/#getbyurl","text":"Gets a folder instance from a collection by folder's name import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const folder = await sp.web.folders.getByUrl(\"folder name\")();","title":"getByUrl"},{"location":"sp/folders/#ifolder","text":"Represents an instance of a SharePoint folder.","title":"IFolder"},{"location":"sp/folders/#get-a-folder-object-associated-with-different-sharepoint-artifacts-web-list-list-item","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); // web's folder const rootFolder = await sp.web.rootFolder(); // list's folder const listRootFolder = await sp.web.lists.getByTitle(\"234\").rootFolder(); // item's folder const itemFolder = await sp.web.lists.getByTitle(\"234\").items.getById(1).folder();","title":"Get a folder object associated with different SharePoint artifacts (web, list, list item)"},{"location":"sp/folders/#getitem","text":"Gets list item associated with a folder import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const folderItem = await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").getItem();","title":"getItem"},{"location":"sp/folders/#move","text":"It's possible to move a folder to a new destination within a site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // destination is a server-relative url of a new folder const destinationUrl = `/sites/my-site/SiteAssets/new-folder`; await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").moveByPath(destinationUrl);","title":"move"},{"location":"sp/folders/#copy","text":"It's possible to copy a folder to a new destination within a site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // destination is a server-relative url of a new folder const destinationUrl = `/sites/my-site/SiteAssets/new-folder`; await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").copyByPath(destinationUrl);","title":"copy"},{"location":"sp/folders/#move-by-path","text":"It's possible to move a folder to a new destination within the same or a different site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // destination is a server-relative url of a new folder const destinationUrl = `/sites/my-site/SiteAssets/new-folder`; await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").moveByPath(destinationUrl, true);","title":"move by path"},{"location":"sp/folders/#copy-by-path","text":"It's possible to copy a folder to a new destination within the same or a different site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); // destination is a server-relative url of a new folder const destinationUrl = `/sites/my-site/SiteAssets/new-folder`; await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").folders.getByUrl(\"My Folder\").copyByPath(destinationUrl, true);","title":"copy by path"},{"location":"sp/folders/#delete","text":"Deletes a folder import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); await sp.web.rootFolder.folders.getByUrl(\"My Folder\").delete();","title":"delete"},{"location":"sp/folders/#delete-with-params","text":"Deletes a folder with options import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); await sp.web.rootFolder.folders.getByUrl(\"My Folder\").deleteWithParams({ BypassSharedLock: true, DeleteIfEmpty: true, });","title":"delete with params"},{"location":"sp/folders/#recycle","text":"Recycles a folder import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); await sp.web.rootFolder.folders.getByUrl(\"My Folder\").recycle();","title":"recycle"},{"location":"sp/folders/#serverrelativeurl","text":"Gets folder's server relative url import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const relUrl = await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").select('ServerRelativeUrl')();","title":"serverRelativeUrl"},{"location":"sp/folders/#update","text":"Updates folder's properties import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); await sp.web.getFolderByServerRelativePath(\"Shared Documents/Folder2\").update({ \"Name\": \"New name\", });","title":"update"},{"location":"sp/folders/#contenttypeorder","text":"Gets content type order of a folder import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const order = await sp.web.getFolderByServerRelativePath(\"Shared Documents\").select('contentTypeOrder')();","title":"contentTypeOrder"},{"location":"sp/folders/#folders","text":"Gets all child folders associated with the current folder import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const folders = await sp.web.rootFolder.folders();","title":"folders"},{"location":"sp/folders/#files","text":"Gets all files inside a folder import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/files/folder\"; const sp = spfi(...); const files = await sp.web.getFolderByServerRelativePath(\"Shared Documents\").files();","title":"files"},{"location":"sp/folders/#listitemallfields","text":"Gets this folder's list item field values import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const itemFields = await sp.web.getFolderByServerRelativePath(\"Shared Documents/My Folder\").listItemAllFields();","title":"listItemAllFields"},{"location":"sp/folders/#parentfolder","text":"Gets the parent folder, if available import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const parentFolder = await sp.web.getFolderByServerRelativePath(\"Shared Documents/My Folder\").parentFolder();","title":"parentFolder"},{"location":"sp/folders/#properties","text":"Gets this folder's properties import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const properties = await sp.web.getFolderByServerRelativePath(\"Shared Documents/Folder2\").properties();","title":"properties"},{"location":"sp/folders/#uniquecontenttypeorder","text":"Gets a value that specifies the content type order. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const contentTypeOrder = await sp.web.getFolderByServerRelativePath(\"Shared Documents/Folder2\").select('uniqueContentTypeOrder')();","title":"uniqueContentTypeOrder"},{"location":"sp/folders/#rename-a-folder","text":"You can rename a folder by updating FileLeafRef property: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const folder = sp.web.getFolderByServerRelativePath(\"Shared Documents/My Folder\"); const item = await folder.getItem(); const result = await item.update({ FileLeafRef: \"Folder2\" });","title":"Rename a folder"},{"location":"sp/folders/#create-a-folder-with-custom-content-type","text":"Below code creates a new folder under Document library and assigns custom folder content type to a newly created folder. Additionally it sets a field of a custom folder content type. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/items\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/lists\"; const sp = spfi(...); const newFolderResult = await sp.web.rootFolder.folders.getByUrl(\"Shared Documents\").folders.addUsingPath(\"My New Folder\"); const item = await newFolderResult.folder.listItemAllFields(); await sp.web.lists.getByTitle(\"Documents\").items.getById(item.ID).update({ ContentTypeId: \"0x0120001E76ED75A3E3F3408811F0BF56C4CDDD\", MyFolderField: \"field value\", Title: \"My New Folder\", });","title":"Create a folder with custom content type"},{"location":"sp/folders/#addsubfolderusingpath","text":"You can use the addSubFolderUsingPath method to add a folder with some special chars supported import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; import { IFolder } from \"@pnp/sp/folders\"; const sp = spfi(...); // add a folder to site assets const folder: IFolder = await sp.web.rootFolder.folders.getByUrl(\"SiteAssets\").addSubFolderUsingPath(\"folder name\");","title":"addSubFolderUsingPath"},{"location":"sp/folders/#getfolderbyid","text":"You can get a folder by Id from a web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; import { IFolder } from \"@pnp/sp/folders\"; const sp = spfi(...); const folder: IFolder = sp.web.getFolderById(\"2b281c7b-ece9-4b76-82f9-f5cf5e152ba0\");","title":"getFolderById"},{"location":"sp/folders/#getparentinfos","text":"Gets information about folder, including details about the parent list, parent list root folder, and parent web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders\"; const sp = spfi(...); const folder: IFolder = sp.web.getFolderById(\"2b281c7b-ece9-4b76-82f9-f5cf5e152ba0\"); await folder.getParentInfos();","title":"getParentInfos"},{"location":"sp/forms/","text":"@pnp/sp/forms \u00b6 Forms in SharePoint are the Display, New, and Edit forms associated with a list. IForms \u00b6 Get Form by Id \u00b6 Gets a form from the collection by id (guid). Note that the library will handle a guid formatted with curly braces (i.e. '{03b05ff4-d95d-45ed-841d-3855f77a2483}') as well as without curly braces (i.e. '03b05ff4-d95d-45ed-841d-3855f77a2483'). The Id parameter is also case insensitive. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/forms\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // get the field by Id for web const form = sp.web.lists.getByTitle(\"Documents\").forms.getById(\"{c4486774-f1e2-4804-96f3-91edf3e22a19}\")();","title":"Forms"},{"location":"sp/forms/#pnpspforms","text":"Forms in SharePoint are the Display, New, and Edit forms associated with a list.","title":"@pnp/sp/forms"},{"location":"sp/forms/#iforms","text":"","title":"IForms"},{"location":"sp/forms/#get-form-by-id","text":"Gets a form from the collection by id (guid). Note that the library will handle a guid formatted with curly braces (i.e. '{03b05ff4-d95d-45ed-841d-3855f77a2483}') as well as without curly braces (i.e. '03b05ff4-d95d-45ed-841d-3855f77a2483'). The Id parameter is also case insensitive. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/forms\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // get the field by Id for web const form = sp.web.lists.getByTitle(\"Documents\").forms.getById(\"{c4486774-f1e2-4804-96f3-91edf3e22a19}\")();","title":"Get Form by Id"},{"location":"sp/hubsites/","text":"@pnp/sp/hubsites \u00b6 This module helps you with working with hub sites in your tenant. IHubSites \u00b6 Get a Listing of All Hub sites \u00b6 import { spfi } from \"@pnp/sp\"; import { IHubSiteInfo } from \"@pnp/sp/hubsites\"; import \"@pnp/sp/hubsites\"; const sp = spfi(...); // invoke the hub sites object const hubsites: IHubSiteInfo[] = await sp.hubSites(); // you can also use select to only return certain fields: const hubsites2: IHubSiteInfo[] = await sp.hubSites.select(\"ID\", \"Title\", \"RelatedHubSiteIds\")(); Get Hub site by Id \u00b6 Using the getById method on the hubsites module to get a hub site by site Id (guid). import { spfi } from \"@pnp/sp\"; import { IHubSiteInfo } from \"@pnp/sp/hubsites\"; import \"@pnp/sp/hubsites\"; const sp = spfi(...); const hubsite: IHubSiteInfo = await sp.hubSites.getById(\"3504348e-b2be-49fb-a2a9-2d748db64beb\")(); // log hub site title to console console.log(hubsite.Title); Get ISite instance \u00b6 We provide a helper method to load the ISite instance from the HubSite import { spfi } from \"@pnp/sp\"; import { ISite } from \"@pnp/sp/sites\"; import \"@pnp/sp/hubsites\"; const sp = spfi(...); const site: ISite = await sp.hubSites.getById(\"3504348e-b2be-49fb-a2a9-2d748db64beb\").getSite(); const siteData = await site(); console.log(siteData.Title); Get Hub site data for a web \u00b6 import { spfi } from \"@pnp/sp\"; import { IHubSiteWebData } from \"@pnp/sp/hubsites\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/hubsites/web\"; const sp = spfi(...); const webData: Partial<IHubSiteWebData> = await sp.web.hubSiteData(); // you can also force a refresh of the hub site data const webData2: Partial<IHubSiteWebData> = await sp.web.hubSiteData(true); syncHubSiteTheme \u00b6 Allows you to apply theme updates from the parent hub site collection. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/hubsites/web\"; const sp = spfi(...); await sp.web.syncHubSiteTheme(); Hub site Site Methods \u00b6 You manage hub sites at the Site level. joinHubSite \u00b6 Id of the hub site collection you want to join. If you want to disassociate the site collection from hub site, then pass the siteId as 00000000-0000-0000-0000-000000000000 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; import \"@pnp/sp/hubsites/site\"; const sp = spfi(...); // join a site to a hub site await sp.site.joinHubSite(\"{parent hub site id}\"); // remove a site from a hub site await sp.site.joinHubSite(\"00000000-0000-0000-0000-000000000000\"); registerHubSite \u00b6 Registers the current site collection as hub site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; import \"@pnp/sp/hubsites/site\"; const sp = spfi(...); // register current site as a hub site await sp.site.registerHubSite(); unRegisterHubSite \u00b6 Un-registers the current site collection as hub site collection. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; import \"@pnp/sp/hubsites/site\"; const sp = spfi(...); // make a site no longer a hub await sp.site.unRegisterHubSite();","title":"Hubsites"},{"location":"sp/hubsites/#pnpsphubsites","text":"This module helps you with working with hub sites in your tenant.","title":"@pnp/sp/hubsites"},{"location":"sp/hubsites/#ihubsites","text":"","title":"IHubSites"},{"location":"sp/hubsites/#get-a-listing-of-all-hub-sites","text":"import { spfi } from \"@pnp/sp\"; import { IHubSiteInfo } from \"@pnp/sp/hubsites\"; import \"@pnp/sp/hubsites\"; const sp = spfi(...); // invoke the hub sites object const hubsites: IHubSiteInfo[] = await sp.hubSites(); // you can also use select to only return certain fields: const hubsites2: IHubSiteInfo[] = await sp.hubSites.select(\"ID\", \"Title\", \"RelatedHubSiteIds\")();","title":"Get a Listing of All Hub sites"},{"location":"sp/hubsites/#get-hub-site-by-id","text":"Using the getById method on the hubsites module to get a hub site by site Id (guid). import { spfi } from \"@pnp/sp\"; import { IHubSiteInfo } from \"@pnp/sp/hubsites\"; import \"@pnp/sp/hubsites\"; const sp = spfi(...); const hubsite: IHubSiteInfo = await sp.hubSites.getById(\"3504348e-b2be-49fb-a2a9-2d748db64beb\")(); // log hub site title to console console.log(hubsite.Title);","title":"Get Hub site by Id"},{"location":"sp/hubsites/#get-isite-instance","text":"We provide a helper method to load the ISite instance from the HubSite import { spfi } from \"@pnp/sp\"; import { ISite } from \"@pnp/sp/sites\"; import \"@pnp/sp/hubsites\"; const sp = spfi(...); const site: ISite = await sp.hubSites.getById(\"3504348e-b2be-49fb-a2a9-2d748db64beb\").getSite(); const siteData = await site(); console.log(siteData.Title);","title":"Get ISite instance"},{"location":"sp/hubsites/#get-hub-site-data-for-a-web","text":"import { spfi } from \"@pnp/sp\"; import { IHubSiteWebData } from \"@pnp/sp/hubsites\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/hubsites/web\"; const sp = spfi(...); const webData: Partial<IHubSiteWebData> = await sp.web.hubSiteData(); // you can also force a refresh of the hub site data const webData2: Partial<IHubSiteWebData> = await sp.web.hubSiteData(true);","title":"Get Hub site data for a web"},{"location":"sp/hubsites/#synchubsitetheme","text":"Allows you to apply theme updates from the parent hub site collection. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/hubsites/web\"; const sp = spfi(...); await sp.web.syncHubSiteTheme();","title":"syncHubSiteTheme"},{"location":"sp/hubsites/#hub-site-site-methods","text":"You manage hub sites at the Site level.","title":"Hub site Site Methods"},{"location":"sp/hubsites/#joinhubsite","text":"Id of the hub site collection you want to join. If you want to disassociate the site collection from hub site, then pass the siteId as 00000000-0000-0000-0000-000000000000 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; import \"@pnp/sp/hubsites/site\"; const sp = spfi(...); // join a site to a hub site await sp.site.joinHubSite(\"{parent hub site id}\"); // remove a site from a hub site await sp.site.joinHubSite(\"00000000-0000-0000-0000-000000000000\");","title":"joinHubSite"},{"location":"sp/hubsites/#registerhubsite","text":"Registers the current site collection as hub site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; import \"@pnp/sp/hubsites/site\"; const sp = spfi(...); // register current site as a hub site await sp.site.registerHubSite();","title":"registerHubSite"},{"location":"sp/hubsites/#unregisterhubsite","text":"Un-registers the current site collection as hub site collection. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; import \"@pnp/sp/hubsites/site\"; const sp = spfi(...); // make a site no longer a hub await sp.site.unRegisterHubSite();","title":"unRegisterHubSite"},{"location":"sp/items/","text":"@pnp/sp/items \u00b6 GET \u00b6 Getting items from a list is one of the basic actions that most applications require. This is made easy through the library and the following examples demonstrate these actions. Basic Get \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); // get all the items from a list const items: any[] = await sp.web.lists.getByTitle(\"My List\").items(); console.log(items); // get a specific item by id. const item: any = await sp.web.lists.getByTitle(\"My List\").items.getById(1)(); console.log(item); // use odata operators for more efficient queries const items2: any[] = await sp.web.lists.getByTitle(\"My List\").items.select(\"Title\", \"Description\").top(5).orderBy(\"Modified\", true)(); console.log(items2); Get Paged Items \u00b6 Working with paging can be a challenge as it is based on skip tokens and item ids, something that is hard to guess at runtime. To simplify things you can use the getPaged method on the Items class to assist. Note that there isn't a way to move backwards in the collection, this is by design. The pattern you should use to support backwards navigation in the results is to cache the results into a local array and use the standard array operators to get previous pages. Alternatively you can append the results to the UI, but this can have performance impact for large result sets. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); // basic case to get paged items form a list const items = await sp.web.lists.getByTitle(\"BigList\").items.getPaged(); // you can also provide a type for the returned values instead of any const items = await sp.web.lists.getByTitle(\"BigList\").items.getPaged<{Title: string}[]>(); // the query also works with select to choose certain fields and top to set the page size const items = await sp.web.lists.getByTitle(\"BigList\").items.select(\"Title\", \"Description\").top(50).getPaged<{Title: string}[]>(); // the results object will have two properties and one method: // the results property will be an array of the items returned if (items.results.length > 0) { console.log(\"We got results!\"); for (let i = 0; i < items.results.length; i++) { // type checking works here if we specify the return type console.log(items.results[i].Title); } } // the hasNext property is used with the getNext method to handle paging // hasNext will be true so long as there are additional results if (items.hasNext) { // this will carry over the type specified in the original query for the results array items = await items.getNext(); console.log(items.results.length); } getListItemChangesSinceToken \u00b6 The GetListItemChangesSinceToken method allows clients to track changes on a list. Changes, including deleted items, are returned along with a token that represents the moment in time when those changes were requested. By including this token when you call GetListItemChangesSinceToken, the server looks for only those changes that have occurred since the token was generated. Sending a GetListItemChangesSinceToken request without including a token returns the list schema, the full list contents and a token. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // Using RowLimit. Enables paging const changes = await sp.web.lists.getByTitle(\"BigList\").getListItemChangesSinceToken({RowLimit: '5'}); // Use QueryOptions to make a XML-style query. // Because it's XML we need to escape special characters // Instead of & we use &amp; in the query const changes = await sp.web.lists.getByTitle(\"BigList\").getListItemChangesSinceToken({QueryOptions: '<Paging ListItemCollectionPositionNext=\"Paged=TRUE&amp;p_ID=5\" />'}); // Get everything. Using null with ChangeToken gets everything const changes = await sp.web.lists.getByTitle(\"BigList\").getListItemChangesSinceToken({ChangeToken: null}); Get All Items \u00b6 Using the items collection's getAll method you can get all of the items in a list regardless of the size of the list. Sample usage is shown below. Only the odata operations top, select, and filter are supported. usingCaching and inBatch are ignored - you will need to handle caching the results on your own. This method will write a warning to the Logger and should not frequently be used. Instead the standard paging operations should be used. In v3 there is a separate import for get-all to include the functionality. This is to remove the code from bundles for folks who do not need it. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import \"@pnp/sp/items/get-all\"; const sp = spfi(...); // basic usage const allItems: any[] = await sp.web.lists.getByTitle(\"BigList\").items.getAll(); console.log(allItems.length); // set page size const allItems: any[] = await sp.web.lists.getByTitle(\"BigList\").items.getAll(4000); console.log(allItems.length); // use select and top. top will set page size and override the any value passed to getAll const allItems: any[] = await sp.web.lists.getByTitle(\"BigList\").items.select(\"Title\").top(4000).getAll(); console.log(allItems.length); // we can also use filter as a supported odata operation, but this will likely fail on large lists const allItems: any[] = await sp.web.lists.getByTitle(\"BigList\").items.select(\"Title\").filter(\"Title eq 'Test'\").getAll(); console.log(allItems.length); Retrieving Lookup Fields \u00b6 When working with lookup fields you need to use the expand operator along with select to get the related fields from the lookup column. This works for both the items collection and item instances. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const items = await sp.web.lists.getByTitle(\"LookupList\").items.select(\"Title\", \"Lookup/Title\", \"Lookup/ID\").expand(\"Lookup\")(); console.log(items); const item = await sp.web.lists.getByTitle(\"LookupList\").items.getById(1).select(\"Title\", \"Lookup/Title\", \"Lookup/ID\").expand(\"Lookup\")(); console.log(item); Filter using Metadata fields \u00b6 To filter on a metadata field you must use the getItemsByCAMLQuery method as $filter does not support these fields. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; const sp = spfi(...); const r = await sp.web.lists.getByTitle(\"TaxonomyList\").getItemsByCAMLQuery({ ViewXml: `<View><Query><Where><Eq><FieldRef Name=\"MetaData\"/><Value Type=\"TaxonomyFieldType\">Term 2</Value></Eq></Where></Query></View>`, }); Retrieving PublishingPageImage \u00b6 The PublishingPageImage and some other publishing-related fields aren't stored in normal fields, rather in the MetaInfo field. To get these values you need to use the technique shown below, and originally outlined in this thread . Note that a lot of information can be stored in this field so will pull back potentially a significant amount of data, so limit the rows as possible to aid performance. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import { Web } from \"@pnp/sp/webs\"; try { const sp = spfi(\"https://{publishing site url}\").using(SPFx(this.context)); const r = await sp.web.lists.getByTitle(\"Pages\").items .select(\"Title\", \"FileRef\", \"FieldValuesAsText/MetaInfo\") .expand(\"FieldValuesAsText\") (); // look through the returned items. for (var i = 0; i < r.length; i++) { // the title field value console.log(r[i].Title); // find the value in the MetaInfo string using regex const matches = /PublishingPageImage:SW\\|(.*?)\\r\\n/ig.exec(r[i].FieldValuesAsText.MetaInfo); if (matches !== null && matches.length > 1) { // this wil be the value of the PublishingPageImage field console.log(matches[1]); } } } catch (e) { console.error(e); } Add Items \u00b6 There are several ways to add items to a list. The simplest just uses the add method of the items collection passing in the properties as a plain object. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import { IItemAddResult } from \"@pnp/sp/items\"; const sp = spfi(...); // add an item to the list const iar: IItemAddResult = await sp.web.lists.getByTitle(\"My List\").items.add({ Title: \"Title\", Description: \"Description\" }); console.log(iar); Content Type \u00b6 You can also set the content type id when you create an item as shown in the example below. For more information on content type IDs reference the Microsoft Documentation . While this documentation references SharePoint 2010 the structure of the IDs has not changed. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); await sp.web.lists.getById(\"4D5A36EA-6E84-4160-8458-65C436DB765C\").items.add({ Title: \"Test 1\", ContentTypeId: \"0x01030058FD86C279252341AB303852303E4DAF\" }); User Fields \u00b6 There are two types of user fields, those that allow a single value and those that allow multiple. For both types, you first need to determine the Id field name, which you can do by doing a GET REST request on an existing item. Typically the value will be the user field internal name with \"Id\" appended. So in our example, we have two fields User1 and User2 so the Id fields are User1Id and User2Id. Next, you need to remember there are two types of user fields, those that take a single value and those that allow multiple - these are updated in different ways. For single value user fields you supply just the user's id. For multiple value fields, you need to supply an object with a \"results\" property and an array. Examples for both are shown below. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import { getGUID } from \"@pnp/core\"; const sp = spfi(...); const i = await sp.web.lists.getByTitle(\"PeopleFields\").items.add({ Title: getGUID(), User1Id: 9, // allows a single user User2Id: [16, 45] // allows multiple users }); console.log(i); If you want to update or add user field values when using validateUpdateListItem you need to use the form shown below. You can specify multiple values in the array. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const result = await sp.web.lists.getByTitle(\"UserFieldList\").items.getById(1).validateUpdateListItem([{ FieldName: \"UserField\", FieldValue: JSON.stringify([{ \"Key\": \"i:0#.f|membership|person@tenant.com\" }]), }, { FieldName: \"Title\", FieldValue: \"Test - Updated\", }]); Lookup Fields \u00b6 What is said for User Fields is, in general, relevant to Lookup Fields: Lookup Field types: Single-valued lookup Multiple-valued lookup Id suffix should be appended to the end of lookups EntityPropertyName in payloads Numeric Ids for lookups' items should be passed as values import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import { getGUID } from \"@pnp/core\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"LookupFields\").items.add({ Title: getGUID(), LookupFieldId: 2, // allows a single lookup value MultiLookupFieldId: [1, 56] // allows multiple lookup value }); Add Multiple Items \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"rapidadd\"); const entityTypeFullName = await list.getListItemEntityTypeFullName() const batch = sp.web.createBatch(); list.items.inBatch(batch).add({ Title: \"Batch 6\" }, entityTypeFullName).then(b => { console.log(b); }); list.items.inBatch(batch).add({ Title: \"Batch 7\" }, entityTypeFullName).then(b => { console.log(b); }); await batch.execute(); console.log(\"Done\"); Update \u00b6 The update method is very similar to the add method in that it takes a plain object representing the fields to update. The property names are the internal names of the fields. If you aren't sure you can always do a get request for an item in the list and see the field names that come back - you would use these same names to update the item. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"MyList\"); const i = await list.items.getById(1).update({ Title: \"My New Title\", Description: \"Here is a new description\" }); console.log(i); Getting and updating a collection using filter \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); // you are getting back a collection here const items: any[] = await sp.web.lists.getByTitle(\"MyList\").items.top(1).filter(\"Title eq 'A Title'\")(); // see if we got something if (items.length > 0) { const updatedItem = await sp.web.lists.getByTitle(\"MyList\").items.getById(items[0].Id).update({ Title: \"Updated Title\", }); console.log(JSON.stringify(updatedItem)); } Update Multiple Items \u00b6 This approach avoids multiple calls for the same list's entity type name. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"rapidupdate\"); const entityTypeFullName = await list.getListItemEntityTypeFullName() const batch = sp.web.createBatch(); // note requirement of \"*\" eTag param - or use a specific eTag value as needed list.items.getById(1).inBatch(batch).update({ Title: \"Batch 6\" }, \"*\", entityTypeFullName).then(b => { console.log(b); }); list.items.getById(2).inBatch(batch).update({ Title: \"Batch 7\" }, \"*\", entityTypeFullName).then(b => { console.log(b); }); await batch.execute(); console.log(\"Done\") Update Multi-value Taxonomy field \u00b6 Based on this excellent article from Beau Cameron. As he says you must update a hidden field to get this to work via REST. My meta data field accepting multiple values is called \"MultiMetaData\". import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // first we need to get the hidden field's internal name. // The Title of that hidden field is, in my case and in the linked article just the visible field name with \"_0\" appended. const fields = await sp.web.lists.getByTitle(\"TestList\").fields.filter(\"Title eq 'MultiMetaData_0'\").select(\"Title\", \"InternalName\")(); // get an item to update, here we just create one for testing const newItem = await sp.web.lists.getByTitle(\"TestList\").items.add({ Title: \"Testing\", }); // now we have to create an update object // to do that for each field value you need to serialize each as -1;#{field label}|{field id} joined by \";#\" // update with the values you want, this also works in the add call directly to avoid a second call const updateVal = {}; Reflect.defineProperty(updateVal, fields[0].InternalName, { value: \"-1;#New Term|bb046161-49cc-41bd-a459-5667175920d4;#-1;#New 2|0069972e-67f1-4c5e-99b6-24ac5c90b7c9\" }); // execute the update call await newItem.item.update(updateVal); Update BCS Field \u00b6 Please see the issue for full details. You will need to use validateUpdateListItem to ensure hte BCS field is updated correctly. const update = await sp.web.lists.getByTitle(\"Price\").items.getById(7).select('*,External').validateUpdateListItem([ {FieldName:\"External\",FieldValue:\"Fauntleroy Circus\"}, {FieldName:\"Customers_ID\", FieldValue:\"__bk410024003500240054006500\"} ]); Recycle \u00b6 To send an item to the recycle bin use recycle. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"MyList\"); const recycleBinIdentifier = await list.items.getById(1).recycle(); Delete \u00b6 Delete is as simple as calling the .delete method. It optionally takes an eTag if you need to manage concurrency. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"MyList\"); await list.items.getById(1).delete(); Delete With Params \u00b6 Deletes the item object with options. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"MyList\"); await list.items.getById(1).deleteWithParams({ BypassSharedLock: true, }); The deleteWithParams method can only be used by accounts where UserToken.IsSystemAccount is true Resolving field names \u00b6 It's a very common mistake trying wrong field names in the requests. Field's EntityPropertyName value should be used. The easiest way to get know EntityPropertyName is to use the following snippet: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import \"@pnp/sp/fields\"; const sp = spfi(...); const response = await sp.web.lists .getByTitle('[Lists_Title]') .fields .select('Title, EntityPropertyName') .filter(`Hidden eq false and Title eq '[Field's_Display_Name]'`) (); console.log(response.map(field => { return { Title: field.Title, EntityPropertyName: field.EntityPropertyName }; })); Lookup fields' names should be ended with additional Id suffix. E.g. for Editor EntityPropertyName EditorId should be used. getParentInfos \u00b6 Gets information about an item, including details about the parent list, parent list root folder, and parent web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/items\"; const sp = spfi(...); const item: any = await sp.web.lists.getByTitle(\"My List\").items.getById(1)(); await item.getParentInfos();","title":"List Items"},{"location":"sp/items/#pnpspitems","text":"","title":"@pnp/sp/items"},{"location":"sp/items/#get","text":"Getting items from a list is one of the basic actions that most applications require. This is made easy through the library and the following examples demonstrate these actions.","title":"GET"},{"location":"sp/items/#basic-get","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); // get all the items from a list const items: any[] = await sp.web.lists.getByTitle(\"My List\").items(); console.log(items); // get a specific item by id. const item: any = await sp.web.lists.getByTitle(\"My List\").items.getById(1)(); console.log(item); // use odata operators for more efficient queries const items2: any[] = await sp.web.lists.getByTitle(\"My List\").items.select(\"Title\", \"Description\").top(5).orderBy(\"Modified\", true)(); console.log(items2);","title":"Basic Get"},{"location":"sp/items/#get-paged-items","text":"Working with paging can be a challenge as it is based on skip tokens and item ids, something that is hard to guess at runtime. To simplify things you can use the getPaged method on the Items class to assist. Note that there isn't a way to move backwards in the collection, this is by design. The pattern you should use to support backwards navigation in the results is to cache the results into a local array and use the standard array operators to get previous pages. Alternatively you can append the results to the UI, but this can have performance impact for large result sets. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); // basic case to get paged items form a list const items = await sp.web.lists.getByTitle(\"BigList\").items.getPaged(); // you can also provide a type for the returned values instead of any const items = await sp.web.lists.getByTitle(\"BigList\").items.getPaged<{Title: string}[]>(); // the query also works with select to choose certain fields and top to set the page size const items = await sp.web.lists.getByTitle(\"BigList\").items.select(\"Title\", \"Description\").top(50).getPaged<{Title: string}[]>(); // the results object will have two properties and one method: // the results property will be an array of the items returned if (items.results.length > 0) { console.log(\"We got results!\"); for (let i = 0; i < items.results.length; i++) { // type checking works here if we specify the return type console.log(items.results[i].Title); } } // the hasNext property is used with the getNext method to handle paging // hasNext will be true so long as there are additional results if (items.hasNext) { // this will carry over the type specified in the original query for the results array items = await items.getNext(); console.log(items.results.length); }","title":"Get Paged Items"},{"location":"sp/items/#getlistitemchangessincetoken","text":"The GetListItemChangesSinceToken method allows clients to track changes on a list. Changes, including deleted items, are returned along with a token that represents the moment in time when those changes were requested. By including this token when you call GetListItemChangesSinceToken, the server looks for only those changes that have occurred since the token was generated. Sending a GetListItemChangesSinceToken request without including a token returns the list schema, the full list contents and a token. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // Using RowLimit. Enables paging const changes = await sp.web.lists.getByTitle(\"BigList\").getListItemChangesSinceToken({RowLimit: '5'}); // Use QueryOptions to make a XML-style query. // Because it's XML we need to escape special characters // Instead of & we use &amp; in the query const changes = await sp.web.lists.getByTitle(\"BigList\").getListItemChangesSinceToken({QueryOptions: '<Paging ListItemCollectionPositionNext=\"Paged=TRUE&amp;p_ID=5\" />'}); // Get everything. Using null with ChangeToken gets everything const changes = await sp.web.lists.getByTitle(\"BigList\").getListItemChangesSinceToken({ChangeToken: null});","title":"getListItemChangesSinceToken"},{"location":"sp/items/#get-all-items","text":"Using the items collection's getAll method you can get all of the items in a list regardless of the size of the list. Sample usage is shown below. Only the odata operations top, select, and filter are supported. usingCaching and inBatch are ignored - you will need to handle caching the results on your own. This method will write a warning to the Logger and should not frequently be used. Instead the standard paging operations should be used. In v3 there is a separate import for get-all to include the functionality. This is to remove the code from bundles for folks who do not need it. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import \"@pnp/sp/items/get-all\"; const sp = spfi(...); // basic usage const allItems: any[] = await sp.web.lists.getByTitle(\"BigList\").items.getAll(); console.log(allItems.length); // set page size const allItems: any[] = await sp.web.lists.getByTitle(\"BigList\").items.getAll(4000); console.log(allItems.length); // use select and top. top will set page size and override the any value passed to getAll const allItems: any[] = await sp.web.lists.getByTitle(\"BigList\").items.select(\"Title\").top(4000).getAll(); console.log(allItems.length); // we can also use filter as a supported odata operation, but this will likely fail on large lists const allItems: any[] = await sp.web.lists.getByTitle(\"BigList\").items.select(\"Title\").filter(\"Title eq 'Test'\").getAll(); console.log(allItems.length);","title":"Get All Items"},{"location":"sp/items/#retrieving-lookup-fields","text":"When working with lookup fields you need to use the expand operator along with select to get the related fields from the lookup column. This works for both the items collection and item instances. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const items = await sp.web.lists.getByTitle(\"LookupList\").items.select(\"Title\", \"Lookup/Title\", \"Lookup/ID\").expand(\"Lookup\")(); console.log(items); const item = await sp.web.lists.getByTitle(\"LookupList\").items.getById(1).select(\"Title\", \"Lookup/Title\", \"Lookup/ID\").expand(\"Lookup\")(); console.log(item);","title":"Retrieving Lookup Fields"},{"location":"sp/items/#filter-using-metadata-fields","text":"To filter on a metadata field you must use the getItemsByCAMLQuery method as $filter does not support these fields. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; const sp = spfi(...); const r = await sp.web.lists.getByTitle(\"TaxonomyList\").getItemsByCAMLQuery({ ViewXml: `<View><Query><Where><Eq><FieldRef Name=\"MetaData\"/><Value Type=\"TaxonomyFieldType\">Term 2</Value></Eq></Where></Query></View>`, });","title":"Filter using Metadata fields"},{"location":"sp/items/#retrieving-publishingpageimage","text":"The PublishingPageImage and some other publishing-related fields aren't stored in normal fields, rather in the MetaInfo field. To get these values you need to use the technique shown below, and originally outlined in this thread . Note that a lot of information can be stored in this field so will pull back potentially a significant amount of data, so limit the rows as possible to aid performance. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import { Web } from \"@pnp/sp/webs\"; try { const sp = spfi(\"https://{publishing site url}\").using(SPFx(this.context)); const r = await sp.web.lists.getByTitle(\"Pages\").items .select(\"Title\", \"FileRef\", \"FieldValuesAsText/MetaInfo\") .expand(\"FieldValuesAsText\") (); // look through the returned items. for (var i = 0; i < r.length; i++) { // the title field value console.log(r[i].Title); // find the value in the MetaInfo string using regex const matches = /PublishingPageImage:SW\\|(.*?)\\r\\n/ig.exec(r[i].FieldValuesAsText.MetaInfo); if (matches !== null && matches.length > 1) { // this wil be the value of the PublishingPageImage field console.log(matches[1]); } } } catch (e) { console.error(e); }","title":"Retrieving PublishingPageImage"},{"location":"sp/items/#add-items","text":"There are several ways to add items to a list. The simplest just uses the add method of the items collection passing in the properties as a plain object. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import { IItemAddResult } from \"@pnp/sp/items\"; const sp = spfi(...); // add an item to the list const iar: IItemAddResult = await sp.web.lists.getByTitle(\"My List\").items.add({ Title: \"Title\", Description: \"Description\" }); console.log(iar);","title":"Add Items"},{"location":"sp/items/#content-type","text":"You can also set the content type id when you create an item as shown in the example below. For more information on content type IDs reference the Microsoft Documentation . While this documentation references SharePoint 2010 the structure of the IDs has not changed. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); await sp.web.lists.getById(\"4D5A36EA-6E84-4160-8458-65C436DB765C\").items.add({ Title: \"Test 1\", ContentTypeId: \"0x01030058FD86C279252341AB303852303E4DAF\" });","title":"Content Type"},{"location":"sp/items/#user-fields","text":"There are two types of user fields, those that allow a single value and those that allow multiple. For both types, you first need to determine the Id field name, which you can do by doing a GET REST request on an existing item. Typically the value will be the user field internal name with \"Id\" appended. So in our example, we have two fields User1 and User2 so the Id fields are User1Id and User2Id. Next, you need to remember there are two types of user fields, those that take a single value and those that allow multiple - these are updated in different ways. For single value user fields you supply just the user's id. For multiple value fields, you need to supply an object with a \"results\" property and an array. Examples for both are shown below. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import { getGUID } from \"@pnp/core\"; const sp = spfi(...); const i = await sp.web.lists.getByTitle(\"PeopleFields\").items.add({ Title: getGUID(), User1Id: 9, // allows a single user User2Id: [16, 45] // allows multiple users }); console.log(i); If you want to update or add user field values when using validateUpdateListItem you need to use the form shown below. You can specify multiple values in the array. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const result = await sp.web.lists.getByTitle(\"UserFieldList\").items.getById(1).validateUpdateListItem([{ FieldName: \"UserField\", FieldValue: JSON.stringify([{ \"Key\": \"i:0#.f|membership|person@tenant.com\" }]), }, { FieldName: \"Title\", FieldValue: \"Test - Updated\", }]);","title":"User Fields"},{"location":"sp/items/#lookup-fields","text":"What is said for User Fields is, in general, relevant to Lookup Fields: Lookup Field types: Single-valued lookup Multiple-valued lookup Id suffix should be appended to the end of lookups EntityPropertyName in payloads Numeric Ids for lookups' items should be passed as values import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import { getGUID } from \"@pnp/core\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"LookupFields\").items.add({ Title: getGUID(), LookupFieldId: 2, // allows a single lookup value MultiLookupFieldId: [1, 56] // allows multiple lookup value });","title":"Lookup Fields"},{"location":"sp/items/#add-multiple-items","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"rapidadd\"); const entityTypeFullName = await list.getListItemEntityTypeFullName() const batch = sp.web.createBatch(); list.items.inBatch(batch).add({ Title: \"Batch 6\" }, entityTypeFullName).then(b => { console.log(b); }); list.items.inBatch(batch).add({ Title: \"Batch 7\" }, entityTypeFullName).then(b => { console.log(b); }); await batch.execute(); console.log(\"Done\");","title":"Add Multiple Items"},{"location":"sp/items/#update","text":"The update method is very similar to the add method in that it takes a plain object representing the fields to update. The property names are the internal names of the fields. If you aren't sure you can always do a get request for an item in the list and see the field names that come back - you would use these same names to update the item. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"MyList\"); const i = await list.items.getById(1).update({ Title: \"My New Title\", Description: \"Here is a new description\" }); console.log(i);","title":"Update"},{"location":"sp/items/#getting-and-updating-a-collection-using-filter","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); // you are getting back a collection here const items: any[] = await sp.web.lists.getByTitle(\"MyList\").items.top(1).filter(\"Title eq 'A Title'\")(); // see if we got something if (items.length > 0) { const updatedItem = await sp.web.lists.getByTitle(\"MyList\").items.getById(items[0].Id).update({ Title: \"Updated Title\", }); console.log(JSON.stringify(updatedItem)); }","title":"Getting and updating a collection using filter"},{"location":"sp/items/#update-multiple-items","text":"This approach avoids multiple calls for the same list's entity type name. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"rapidupdate\"); const entityTypeFullName = await list.getListItemEntityTypeFullName() const batch = sp.web.createBatch(); // note requirement of \"*\" eTag param - or use a specific eTag value as needed list.items.getById(1).inBatch(batch).update({ Title: \"Batch 6\" }, \"*\", entityTypeFullName).then(b => { console.log(b); }); list.items.getById(2).inBatch(batch).update({ Title: \"Batch 7\" }, \"*\", entityTypeFullName).then(b => { console.log(b); }); await batch.execute(); console.log(\"Done\")","title":"Update Multiple Items"},{"location":"sp/items/#update-multi-value-taxonomy-field","text":"Based on this excellent article from Beau Cameron. As he says you must update a hidden field to get this to work via REST. My meta data field accepting multiple values is called \"MultiMetaData\". import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import \"@pnp/sp/fields\"; const sp = spfi(...); // first we need to get the hidden field's internal name. // The Title of that hidden field is, in my case and in the linked article just the visible field name with \"_0\" appended. const fields = await sp.web.lists.getByTitle(\"TestList\").fields.filter(\"Title eq 'MultiMetaData_0'\").select(\"Title\", \"InternalName\")(); // get an item to update, here we just create one for testing const newItem = await sp.web.lists.getByTitle(\"TestList\").items.add({ Title: \"Testing\", }); // now we have to create an update object // to do that for each field value you need to serialize each as -1;#{field label}|{field id} joined by \";#\" // update with the values you want, this also works in the add call directly to avoid a second call const updateVal = {}; Reflect.defineProperty(updateVal, fields[0].InternalName, { value: \"-1;#New Term|bb046161-49cc-41bd-a459-5667175920d4;#-1;#New 2|0069972e-67f1-4c5e-99b6-24ac5c90b7c9\" }); // execute the update call await newItem.item.update(updateVal);","title":"Update Multi-value Taxonomy field"},{"location":"sp/items/#update-bcs-field","text":"Please see the issue for full details. You will need to use validateUpdateListItem to ensure hte BCS field is updated correctly. const update = await sp.web.lists.getByTitle(\"Price\").items.getById(7).select('*,External').validateUpdateListItem([ {FieldName:\"External\",FieldValue:\"Fauntleroy Circus\"}, {FieldName:\"Customers_ID\", FieldValue:\"__bk410024003500240054006500\"} ]);","title":"Update BCS Field"},{"location":"sp/items/#recycle","text":"To send an item to the recycle bin use recycle. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"MyList\"); const recycleBinIdentifier = await list.items.getById(1).recycle();","title":"Recycle"},{"location":"sp/items/#delete","text":"Delete is as simple as calling the .delete method. It optionally takes an eTag if you need to manage concurrency. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"MyList\"); await list.items.getById(1).delete();","title":"Delete"},{"location":"sp/items/#delete-with-params","text":"Deletes the item object with options. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"MyList\"); await list.items.getById(1).deleteWithParams({ BypassSharedLock: true, }); The deleteWithParams method can only be used by accounts where UserToken.IsSystemAccount is true","title":"Delete With Params"},{"location":"sp/items/#resolving-field-names","text":"It's a very common mistake trying wrong field names in the requests. Field's EntityPropertyName value should be used. The easiest way to get know EntityPropertyName is to use the following snippet: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; import \"@pnp/sp/fields\"; const sp = spfi(...); const response = await sp.web.lists .getByTitle('[Lists_Title]') .fields .select('Title, EntityPropertyName') .filter(`Hidden eq false and Title eq '[Field's_Display_Name]'`) (); console.log(response.map(field => { return { Title: field.Title, EntityPropertyName: field.EntityPropertyName }; })); Lookup fields' names should be ended with additional Id suffix. E.g. for Editor EntityPropertyName EditorId should be used.","title":"Resolving field names"},{"location":"sp/items/#getparentinfos","text":"Gets information about an item, including details about the parent list, parent list root folder, and parent web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/items\"; const sp = spfi(...); const item: any = await sp.web.lists.getByTitle(\"My List\").items.getById(1)(); await item.getParentInfos();","title":"getParentInfos"},{"location":"sp/lists/","text":"@pnp/sp/lists \u00b6 Lists in SharePoint are collections of information built in a structural way using columns and rows. Columns for metadata, and rows representing each entry. Visually, it reminds us a lot of a database table or an Excel spreadsheet. ILists \u00b6 Get List by Id \u00b6 Gets a list from the collection by id (guid). Note that the library will handle a guid formatted with curly braces (i.e. '{03b05ff4-d95d-45ed-841d-3855f77a2483}') as well as without curly braces (i.e. '03b05ff4-d95d-45ed-841d-3855f77a2483'). The Id parameter is also case insensitive. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // get the list by Id const list = sp.web.lists.getById(\"03b05ff4-d95d-45ed-841d-3855f77a2483\"); // we can use this 'list' variable to execute more queries on the list: const r = await list.select(\"Title\")(); // show the response from the server console.log(r.Title); Get List by Title \u00b6 You can also get a list from the collection by title. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // get the default document library 'Documents' const list = sp.web.lists.getByTitle(\"Documents\"); // we can use this 'list' variable to run more queries on the list: const r = await list.select(\"Id\")(); // log the list Id to console console.log(r.Id); Add List \u00b6 You can add a list to the web's list collection using the .add-method. To invoke this method in its most simple form, you can provide only a title as a parameter. This will result in a standard out of the box list with all default settings, and the title you provide. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // create a new list, passing only the title const listAddResult = await sp.web.lists.add(\"My new list\"); // we can work with the list created using the IListAddResult.list property: const r = await listAddResult.list.select(\"Title\")(); // log newly created list title to console console.log(r.Title); }); You can also provide other (optional) parameters like description, template and enableContentTypes. If that is not enough for you, you can use the parameter named 'additionalSettings' which is just a TypedHash, meaning you can sent whatever properties you'd like in the body (provided that the property is supported by the SharePoint API). You can find a listing of list template codes in the official docs. // this will create a list with template 101 (Document library), content types enabled and show it on the quick launch (using additionalSettings) const listAddResult = await sp.web.lists.add(\"My Doc Library\", \"This is a description of doc lib.\", 101, true, { OnQuickLaunch: true }); // get the Id of the newly added document library const r = await listAddResult.list.select(\"Id\")(); // log id to console console.log(r.Id); Ensure that a List exists (by title) \u00b6 Ensures that the specified list exists in the collection (note: this method not supported for batching). Just like with the add-method (see examples above) you can provide only the title, or any or all of the optional parameters desc, template, enableContentTypes and additionalSettings. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // ensure that a list exists. If it doesn't it will be created with the provided title (the rest of the settings will be default): const listEnsureResult = await sp.web.lists.ensure(\"My List\"); // check if the list was created, or if it already existed: if (listEnsureResult.created) { console.log(\"My List was created!\"); } else { console.log(\"My List already existed!\"); } // work on the created/updated list const r = await listEnsureResult.list.select(\"Id\")(); // log the Id console.log(r.Id); If the list already exists, the other settings you provide will be used to update the existing list. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // add a new list to the lists collection of the web sp.web.lists.add(\"My List 2\").then(async () => { // then call ensure on the created list with an updated description const listEnsureResult = await sp.web.lists.ensure(\"My List 2\", \"Updated description\"); // get the updated description const r = await listEnsureResult.list.select(\"Description\")(); // log the updated description console.log(r.Description); }); Ensure Site Assets Library exist \u00b6 Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // get Site Assets library const siteAssetsList = await sp.web.lists.ensureSiteAssetsLibrary(); // get the Title const r = await siteAssetsList.select(\"Title\")(); // log Title console.log(r.Title); Ensure Site Pages Library exist \u00b6 Gets a list that is the default location for wiki pages. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // get Site Pages library const siteAssetsList = await sp.web.lists.ensureSitePagesLibrary(); // get the Title const r = await siteAssetsList.select(\"Title\")(); // log Title console.log(r.Title); IList \u00b6 <<<<<<< HEAD |Scenario|Import Statement| |--|--| |Selective 1|import { List, IList } from \"@pnp/sp/lists\";| |Selective 2|import \"@pnp/sp/lists\";| |Preset: All|import { sp, List, IList } from \"@pnp/sp/presets/all\";| |Preset: Core|import { sp, List, IList } from \"@pnp/sp/presets/core\";| ======= 52a91d788431066d44d536df1352b6ce855675e3 Update a list \u00b6 Update an existing list with the provided properties. You can also provide an eTag value that will be used in the IF-Match header (default is \"*\") import { IListUpdateResult } from \"@pnp/sp/lists\"; // create a TypedHash object with the properties to update const updateProperties = { Description: \"This list title and description has been updated using PnPjs.\", Title: \"Updated title\", }; // update the list with the properties above list.update(updateProperties).then(async (l: IListUpdateResult) => { // get the updated title and description const r = await l.list.select(\"Title\", \"Description\")(); // log the updated properties to the console console.log(r.Title); console.log(r.Description); }); Get changes on a list \u00b6 From the change log, you can get a collection of changes that have occurred within the list based on the specified query. import { IChangeQuery } from \"@pnp/sp\"; // build the changeQuery object, here we look att changes regarding Add, DeleteObject and Restore const changeQuery: IChangeQuery = { Add: true, ChangeTokenEnd: null, ChangeTokenStart: null, DeleteObject: true, Rename: true, Restore: true, }; // get list changes const r = await list.getChanges(changeQuery); // log changes to console console.log(r); To get changes from a specific time range you can use the ChangeTokenStart or a combination of ChangeTokenStart and ChangeTokenEnd. import { IChangeQuery } from \"@pnp/sp\"; //Resource is the list Id (as Guid) const resource = list.Id; const changeStart = new Date(\"2022-02-22\").getTime(); const changeTokenStart = `1;3;${resource};${changeStart};-1`; // build the changeQuery object, here we look at changes regarding Add and Update for Items. const changeQuery: IChangeQuery = { Add: true, Update: true, Item: true, ChangeTokenEnd: null, ChangeTokenStart: { StringValue: changeTokenStart }, }; // get list changes const r = await list.getChanges(changeQuery); // log changes to console console.log(r); Get list items using a CAML Query \u00b6 You can get items from SharePoint using a CAML Query. import { ICamlQuery } from \"@pnp/sp/lists\"; // build the caml query object (in this example, we include Title field and limit rows to 5) const caml: ICamlQuery = { ViewXml: \"<View><ViewFields><FieldRef Name='Title' /></ViewFields><RowLimit>5</RowLimit></View>\", }; // get list items const r = await list.getItemsByCAMLQuery(caml); // log resulting array to console console.log(r); If you need to get and expand a lookup field, there is a spread array parameter on the getItemsByCAMLQuery. This means that you can provide multiple properties to this method depending on how many lookup fields you are working with on your list. Below is a minimal example showing how to expand one field (RoleAssignment) import { ICamlQuery } from \"@pnp/sp/lists\"; // build the caml query object (in this example, we include Title field and limit rows to 5) const caml: ICamlQuery = { ViewXml: \"<View><ViewFields><FieldRef Name='Title' /><FieldRef Name='RoleAssignments' /></ViewFields><RowLimit>5</RowLimit></View>\", }; // get list items const r = await list.getItemsByCAMLQuery(caml, \"RoleAssignments\"); // log resulting item array to console console.log(r); Get list items changes using a Token \u00b6 import { IChangeLogItemQuery } from \"@pnp/sp/lists\"; // build the caml query object (in this example, we include Title field and limit rows to 5) const changeLogItemQuery: IChangeLogItemQuery = { Contains: `<Contains><FieldRef Name=\"Title\"/><Value Type=\"Text\">Item16</Value></Contains>`, QueryOptions: `<QueryOptions> <IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns> <DateInUtc>False</DateInUtc> <IncludePermissions>TRUE</IncludePermissions> <IncludeAttachmentUrls>FALSE</IncludeAttachmentUrls> <Folder>My List</Folder></QueryOptions>`, }; // get list items const r = await list.getListItemChangesSinceToken(changeLogItemQuery); // log resulting XML to console console.log(r); Recycle a list \u00b6 Removes the list from the web's list collection and puts it in the recycle bin. await list.recycle(); Render list data \u00b6 import { IRenderListData } from \"@pnp/sp/lists\"; // render list data, top 5 items const r: IRenderListData = await list.renderListData(\"<View><RowLimit>5</RowLimit></View>\"); // log array of items in response console.log(r.Row); Render list data as stream \u00b6 import { IRenderListDataParameters } from \"@pnp/sp/lists\"; // setup parameters object const renderListDataParams: IRenderListDataParameters = { ViewXml: \"<View><RowLimit>5</RowLimit></View>\", }; // render list data as stream const r = await list.renderListDataAsStream(renderListDataParams); // log array of items in response console.log(r.Row); You can also supply other options to renderListDataAsStream including override parameters and query params. This can be helpful when looking to apply sorting to the returned data. import { IRenderListDataParameters } from \"@pnp/sp/lists\"; // setup parameters object const renderListDataParams: IRenderListDataParameters = { ViewXml: \"<View><RowLimit>5</RowLimit></View>\", }; const overrideParams = { ViewId = \"{view guid}\" }; // OR if you don't want to supply override params use null // overrideParams = null; // Set the query params using a map const query = new Map<string, string>(); query.set(\"SortField\", \"{AField}\"); query.set(\"SortDir\", \"Desc\"); // render list data as stream const r = await list.renderListDataAsStream(renderListDataParams, overrideParams, query); // log array of items in response console.log(r.Row); Reserve list item Id for idempotent list item creation \u00b6 const listItemId = await list.reserveListItemId(); // log id to console console.log(listItemId); Get list item entity type name \u00b6 const entityTypeFullName = await list.getListItemEntityTypeFullName(); // log entity type name console.log(entityTypeFullName); Add a list item using path (folder), validation and set field values \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); const list = await sp.webs.lists.getByTitle(\"MyList\").select(\"Title\", \"ParentWebUrl\")(); const formValues: IListItemFormUpdateValue[] = [ { FieldName: \"Title\", FieldValue: title, }, ]; list.addValidateUpdateItemUsingPath(formValues,`${list.ParentWebUrl}/Lists/${list.Title}/MyFolder`) content-types imports \u00b6 contentTypes \u00b6 Get all content types for a list import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); import \"@pnp/sp/content-types/list\"; const list = sp.web.lists.getByTitle(\"Documents\"); const r = await list.contentTypes(); fields imports \u00b6 Scenario Import Statement Selective 1 import \"@pnp/sp/fields\"; Selective 2 import \"@pnp/sp/fields/list\"; Preset: All import { sp } from \"@pnp/sp/presets/all\"; fields \u00b6 Get all the fields for a list import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); import \"@pnp/sp/fields/list\"; const list = sp.web.lists.getByTitle(\"Documents\"); const r = await list.fields(); Add a field to the site, then add the site field to a list import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); const fld = await sp.site.rootWeb.fields.addText(\"MyField\"); await sp.web.lists.getByTitle(\"MyList\").fields.createFieldAsXml(fld.data.SchemaXml); folders \u00b6 Get the root folder of a list. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/folders/list\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"Documents\"); const r = await list.rootFolder(); forms \u00b6 import \"@pnp/sp/forms/list\"; const r = await list.forms(); items \u00b6 Get a collection of list items. import \"@pnp/sp/items/list\"; const r = await list.items(); views \u00b6 Get the default view of the list import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views/list\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"Documents\"); const views = await list.views(); const defaultView = await list.defaultView(); Get a list view by Id const view = await list.getView(defaultView.Id).select(\"Title\")(); security imports \u00b6 To work with list security, you can import the list methods as follows: import \"@pnp/sp/security/list\"; For more information on how to call security methods for lists, please refer to the @pnp/sp/security documentation. subscriptions \u00b6 Get all subscriptions on the list import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/subscriptions/list\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"Documents\"); const subscriptions = await list.subscriptions(); userCustomActions \u00b6 Get a collection of the list's user custom actions. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/user-custom-actions/web\" const sp = spfi(...); const list = sp.web.lists.getByTitle(\"Documents\"); const r = await list.userCustomActions(); getParentInfos \u00b6 Gets information about an list, including details about the parent list root folder, and parent web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"Documents\"); await list.getParentInfos();","title":"Lists"},{"location":"sp/lists/#pnpsplists","text":"Lists in SharePoint are collections of information built in a structural way using columns and rows. Columns for metadata, and rows representing each entry. Visually, it reminds us a lot of a database table or an Excel spreadsheet.","title":"@pnp/sp/lists"},{"location":"sp/lists/#ilists","text":"","title":"ILists"},{"location":"sp/lists/#get-list-by-id","text":"Gets a list from the collection by id (guid). Note that the library will handle a guid formatted with curly braces (i.e. '{03b05ff4-d95d-45ed-841d-3855f77a2483}') as well as without curly braces (i.e. '03b05ff4-d95d-45ed-841d-3855f77a2483'). The Id parameter is also case insensitive. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // get the list by Id const list = sp.web.lists.getById(\"03b05ff4-d95d-45ed-841d-3855f77a2483\"); // we can use this 'list' variable to execute more queries on the list: const r = await list.select(\"Title\")(); // show the response from the server console.log(r.Title);","title":"Get List by Id"},{"location":"sp/lists/#get-list-by-title","text":"You can also get a list from the collection by title. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // get the default document library 'Documents' const list = sp.web.lists.getByTitle(\"Documents\"); // we can use this 'list' variable to run more queries on the list: const r = await list.select(\"Id\")(); // log the list Id to console console.log(r.Id);","title":"Get List by Title"},{"location":"sp/lists/#add-list","text":"You can add a list to the web's list collection using the .add-method. To invoke this method in its most simple form, you can provide only a title as a parameter. This will result in a standard out of the box list with all default settings, and the title you provide. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // create a new list, passing only the title const listAddResult = await sp.web.lists.add(\"My new list\"); // we can work with the list created using the IListAddResult.list property: const r = await listAddResult.list.select(\"Title\")(); // log newly created list title to console console.log(r.Title); }); You can also provide other (optional) parameters like description, template and enableContentTypes. If that is not enough for you, you can use the parameter named 'additionalSettings' which is just a TypedHash, meaning you can sent whatever properties you'd like in the body (provided that the property is supported by the SharePoint API). You can find a listing of list template codes in the official docs. // this will create a list with template 101 (Document library), content types enabled and show it on the quick launch (using additionalSettings) const listAddResult = await sp.web.lists.add(\"My Doc Library\", \"This is a description of doc lib.\", 101, true, { OnQuickLaunch: true }); // get the Id of the newly added document library const r = await listAddResult.list.select(\"Id\")(); // log id to console console.log(r.Id);","title":"Add List"},{"location":"sp/lists/#ensure-that-a-list-exists-by-title","text":"Ensures that the specified list exists in the collection (note: this method not supported for batching). Just like with the add-method (see examples above) you can provide only the title, or any or all of the optional parameters desc, template, enableContentTypes and additionalSettings. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // ensure that a list exists. If it doesn't it will be created with the provided title (the rest of the settings will be default): const listEnsureResult = await sp.web.lists.ensure(\"My List\"); // check if the list was created, or if it already existed: if (listEnsureResult.created) { console.log(\"My List was created!\"); } else { console.log(\"My List already existed!\"); } // work on the created/updated list const r = await listEnsureResult.list.select(\"Id\")(); // log the Id console.log(r.Id); If the list already exists, the other settings you provide will be used to update the existing list. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // add a new list to the lists collection of the web sp.web.lists.add(\"My List 2\").then(async () => { // then call ensure on the created list with an updated description const listEnsureResult = await sp.web.lists.ensure(\"My List 2\", \"Updated description\"); // get the updated description const r = await listEnsureResult.list.select(\"Description\")(); // log the updated description console.log(r.Description); });","title":"Ensure that a List exists (by title)"},{"location":"sp/lists/#ensure-site-assets-library-exist","text":"Gets a list that is the default asset location for images or other files, which the users upload to their wiki pages. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // get Site Assets library const siteAssetsList = await sp.web.lists.ensureSiteAssetsLibrary(); // get the Title const r = await siteAssetsList.select(\"Title\")(); // log Title console.log(r.Title);","title":"Ensure Site Assets Library exist"},{"location":"sp/lists/#ensure-site-pages-library-exist","text":"Gets a list that is the default location for wiki pages. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); // get Site Pages library const siteAssetsList = await sp.web.lists.ensureSitePagesLibrary(); // get the Title const r = await siteAssetsList.select(\"Title\")(); // log Title console.log(r.Title);","title":"Ensure Site Pages Library exist"},{"location":"sp/lists/#ilist","text":"<<<<<<< HEAD |Scenario|Import Statement| |--|--| |Selective 1|import { List, IList } from \"@pnp/sp/lists\";| |Selective 2|import \"@pnp/sp/lists\";| |Preset: All|import { sp, List, IList } from \"@pnp/sp/presets/all\";| |Preset: Core|import { sp, List, IList } from \"@pnp/sp/presets/core\";| ======= 52a91d788431066d44d536df1352b6ce855675e3","title":"IList"},{"location":"sp/lists/#update-a-list","text":"Update an existing list with the provided properties. You can also provide an eTag value that will be used in the IF-Match header (default is \"*\") import { IListUpdateResult } from \"@pnp/sp/lists\"; // create a TypedHash object with the properties to update const updateProperties = { Description: \"This list title and description has been updated using PnPjs.\", Title: \"Updated title\", }; // update the list with the properties above list.update(updateProperties).then(async (l: IListUpdateResult) => { // get the updated title and description const r = await l.list.select(\"Title\", \"Description\")(); // log the updated properties to the console console.log(r.Title); console.log(r.Description); });","title":"Update a list"},{"location":"sp/lists/#get-changes-on-a-list","text":"From the change log, you can get a collection of changes that have occurred within the list based on the specified query. import { IChangeQuery } from \"@pnp/sp\"; // build the changeQuery object, here we look att changes regarding Add, DeleteObject and Restore const changeQuery: IChangeQuery = { Add: true, ChangeTokenEnd: null, ChangeTokenStart: null, DeleteObject: true, Rename: true, Restore: true, }; // get list changes const r = await list.getChanges(changeQuery); // log changes to console console.log(r); To get changes from a specific time range you can use the ChangeTokenStart or a combination of ChangeTokenStart and ChangeTokenEnd. import { IChangeQuery } from \"@pnp/sp\"; //Resource is the list Id (as Guid) const resource = list.Id; const changeStart = new Date(\"2022-02-22\").getTime(); const changeTokenStart = `1;3;${resource};${changeStart};-1`; // build the changeQuery object, here we look at changes regarding Add and Update for Items. const changeQuery: IChangeQuery = { Add: true, Update: true, Item: true, ChangeTokenEnd: null, ChangeTokenStart: { StringValue: changeTokenStart }, }; // get list changes const r = await list.getChanges(changeQuery); // log changes to console console.log(r);","title":"Get changes on a list"},{"location":"sp/lists/#get-list-items-using-a-caml-query","text":"You can get items from SharePoint using a CAML Query. import { ICamlQuery } from \"@pnp/sp/lists\"; // build the caml query object (in this example, we include Title field and limit rows to 5) const caml: ICamlQuery = { ViewXml: \"<View><ViewFields><FieldRef Name='Title' /></ViewFields><RowLimit>5</RowLimit></View>\", }; // get list items const r = await list.getItemsByCAMLQuery(caml); // log resulting array to console console.log(r); If you need to get and expand a lookup field, there is a spread array parameter on the getItemsByCAMLQuery. This means that you can provide multiple properties to this method depending on how many lookup fields you are working with on your list. Below is a minimal example showing how to expand one field (RoleAssignment) import { ICamlQuery } from \"@pnp/sp/lists\"; // build the caml query object (in this example, we include Title field and limit rows to 5) const caml: ICamlQuery = { ViewXml: \"<View><ViewFields><FieldRef Name='Title' /><FieldRef Name='RoleAssignments' /></ViewFields><RowLimit>5</RowLimit></View>\", }; // get list items const r = await list.getItemsByCAMLQuery(caml, \"RoleAssignments\"); // log resulting item array to console console.log(r);","title":"Get list items using a CAML Query"},{"location":"sp/lists/#get-list-items-changes-using-a-token","text":"import { IChangeLogItemQuery } from \"@pnp/sp/lists\"; // build the caml query object (in this example, we include Title field and limit rows to 5) const changeLogItemQuery: IChangeLogItemQuery = { Contains: `<Contains><FieldRef Name=\"Title\"/><Value Type=\"Text\">Item16</Value></Contains>`, QueryOptions: `<QueryOptions> <IncludeMandatoryColumns>FALSE</IncludeMandatoryColumns> <DateInUtc>False</DateInUtc> <IncludePermissions>TRUE</IncludePermissions> <IncludeAttachmentUrls>FALSE</IncludeAttachmentUrls> <Folder>My List</Folder></QueryOptions>`, }; // get list items const r = await list.getListItemChangesSinceToken(changeLogItemQuery); // log resulting XML to console console.log(r);","title":"Get list items changes using a Token"},{"location":"sp/lists/#recycle-a-list","text":"Removes the list from the web's list collection and puts it in the recycle bin. await list.recycle();","title":"Recycle a list"},{"location":"sp/lists/#render-list-data","text":"import { IRenderListData } from \"@pnp/sp/lists\"; // render list data, top 5 items const r: IRenderListData = await list.renderListData(\"<View><RowLimit>5</RowLimit></View>\"); // log array of items in response console.log(r.Row);","title":"Render list data"},{"location":"sp/lists/#render-list-data-as-stream","text":"import { IRenderListDataParameters } from \"@pnp/sp/lists\"; // setup parameters object const renderListDataParams: IRenderListDataParameters = { ViewXml: \"<View><RowLimit>5</RowLimit></View>\", }; // render list data as stream const r = await list.renderListDataAsStream(renderListDataParams); // log array of items in response console.log(r.Row); You can also supply other options to renderListDataAsStream including override parameters and query params. This can be helpful when looking to apply sorting to the returned data. import { IRenderListDataParameters } from \"@pnp/sp/lists\"; // setup parameters object const renderListDataParams: IRenderListDataParameters = { ViewXml: \"<View><RowLimit>5</RowLimit></View>\", }; const overrideParams = { ViewId = \"{view guid}\" }; // OR if you don't want to supply override params use null // overrideParams = null; // Set the query params using a map const query = new Map<string, string>(); query.set(\"SortField\", \"{AField}\"); query.set(\"SortDir\", \"Desc\"); // render list data as stream const r = await list.renderListDataAsStream(renderListDataParams, overrideParams, query); // log array of items in response console.log(r.Row);","title":"Render list data as stream"},{"location":"sp/lists/#reserve-list-item-id-for-idempotent-list-item-creation","text":"const listItemId = await list.reserveListItemId(); // log id to console console.log(listItemId);","title":"Reserve list item Id for idempotent list item creation"},{"location":"sp/lists/#get-list-item-entity-type-name","text":"const entityTypeFullName = await list.getListItemEntityTypeFullName(); // log entity type name console.log(entityTypeFullName);","title":"Get list item entity type name"},{"location":"sp/lists/#add-a-list-item-using-path-folder-validation-and-set-field-values","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); const list = await sp.webs.lists.getByTitle(\"MyList\").select(\"Title\", \"ParentWebUrl\")(); const formValues: IListItemFormUpdateValue[] = [ { FieldName: \"Title\", FieldValue: title, }, ]; list.addValidateUpdateItemUsingPath(formValues,`${list.ParentWebUrl}/Lists/${list.Title}/MyFolder`)","title":"Add a list item using path (folder), validation and set field values"},{"location":"sp/lists/#content-types-imports","text":"","title":"content-types imports"},{"location":"sp/lists/#contenttypes","text":"Get all content types for a list import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); import \"@pnp/sp/content-types/list\"; const list = sp.web.lists.getByTitle(\"Documents\"); const r = await list.contentTypes();","title":"contentTypes"},{"location":"sp/lists/#fields-imports","text":"Scenario Import Statement Selective 1 import \"@pnp/sp/fields\"; Selective 2 import \"@pnp/sp/fields/list\"; Preset: All import { sp } from \"@pnp/sp/presets/all\";","title":"fields imports"},{"location":"sp/lists/#fields","text":"Get all the fields for a list import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); import \"@pnp/sp/fields/list\"; const list = sp.web.lists.getByTitle(\"Documents\"); const r = await list.fields(); Add a field to the site, then add the site field to a list import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); const fld = await sp.site.rootWeb.fields.addText(\"MyField\"); await sp.web.lists.getByTitle(\"MyList\").fields.createFieldAsXml(fld.data.SchemaXml);","title":"fields"},{"location":"sp/lists/#folders","text":"Get the root folder of a list. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/folders/list\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"Documents\"); const r = await list.rootFolder();","title":"folders"},{"location":"sp/lists/#forms","text":"import \"@pnp/sp/forms/list\"; const r = await list.forms();","title":"forms"},{"location":"sp/lists/#items","text":"Get a collection of list items. import \"@pnp/sp/items/list\"; const r = await list.items();","title":"items"},{"location":"sp/lists/#views","text":"Get the default view of the list import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views/list\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"Documents\"); const views = await list.views(); const defaultView = await list.defaultView(); Get a list view by Id const view = await list.getView(defaultView.Id).select(\"Title\")();","title":"views"},{"location":"sp/lists/#security-imports","text":"To work with list security, you can import the list methods as follows: import \"@pnp/sp/security/list\"; For more information on how to call security methods for lists, please refer to the @pnp/sp/security documentation.","title":"security imports"},{"location":"sp/lists/#subscriptions","text":"Get all subscriptions on the list import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/subscriptions/list\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"Documents\"); const subscriptions = await list.subscriptions();","title":"subscriptions"},{"location":"sp/lists/#usercustomactions","text":"Get a collection of the list's user custom actions. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/user-custom-actions/web\" const sp = spfi(...); const list = sp.web.lists.getByTitle(\"Documents\"); const r = await list.userCustomActions();","title":"userCustomActions"},{"location":"sp/lists/#getparentinfos","text":"Gets information about an list, including details about the parent list root folder, and parent web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"Documents\"); await list.getParentInfos();","title":"getParentInfos"},{"location":"sp/navigation/","text":"@pnp/sp - navigation \u00b6 Navigation Service \u00b6 getMenuState \u00b6 The MenuState service operation returns a Menu-State (dump) of a SiteMapProvider on a site. It will return an exception if the SiteMapProvider cannot be found on the site, the SiteMapProvider does not implement the IEditableSiteMapProvider interface or the SiteMapNode key cannot be found within the provider hierarchy. The IEditableSiteMapProvider also supports Custom Properties which is an optional feature. What will be return in the custom properties is up to the IEditableSiteMapProvider implementation and can differ for for each SiteMapProvider implementation. The custom properties can be requested by providing a comma separated string of property names like: property1,property2,property3\\,containingcomma NOTE: the , separator can be escaped using the \\ as escape character as done in the example above. The string above would split like: property1 property2 property3,containingcomma import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/navigation\"; const sp = spfi(...); // Will return a menu state of the default SiteMapProvider 'SPSiteMapProvider' where the dump starts a the RootNode (within the site) with a depth of 10 levels. const state = await sp.navigation.getMenuState(); // Will return the menu state of the 'SPSiteMapProvider', starting with the node with the key '1002' with a depth of 5 const state2 = await sp.navigation.getMenuState(\"1002\", 5); // Will return the menu state of the 'CurrentNavSiteMapProviderNoEncode' from the root node of the provider with a depth of 5 const state3 = await sp.navigation.getMenuState(null, 5, \"CurrentNavSiteMapProviderNoEncode\"); getMenuNodeKey \u00b6 Tries to get a SiteMapNode.Key for a given URL within a site collection. If the SiteMapNode cannot be found an Exception is returned. The method is using SiteMapProvider.FindSiteMapNodeFromKey(string rawUrl) to lookup the SiteMapNode. Depending on the actual implementation of FindSiteMapNodeFromKey the matching can differ for different SiteMapProviders. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/navigation\"; const sp = spfi(...); const key = await sp.navigation.getMenuNodeKey(\"/sites/dev/Lists/SPPnPJSExampleList/AllItems.aspx\"); Web Navigation \u00b6 <<<<<<< HEAD |Scenario|Import Statement| |--|--| |Selective 1|import \"@pnp/sp/webs\"; import \"@pnp/sp/navigation\"; ======= 52a91d788431066d44d536df1352b6ce855675e3 The navigation object contains two properties \"quicklaunch\" and \"topnavigationbar\". Both have the same set of methods so our examples below show use of only quicklaunch but apply equally to topnavigationbar. Get navigation \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/navigation\"; const sp = spfi(...); const top = await sp.web.navigation.topNavigationBar(); const quick = await sp.web.navigation.quicklaunch(); For the following examples we will refer to a variable named \"nav\" that is understood to be one of topNavigationBar or quicklaunch: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/navigation\"; const sp = spfi(...); // note we are just getting a ref to the nav object, not executing a request const nav = sp.web.navigation.topNavigationBar; // -- OR -- // note we are just getting a ref to the nav object, not executing a request const nav = sp.web.navigation.quicklaunch; getById \u00b6 import \"@pnp/sp/navigation\"; const node = await nav.getById(3)(); add \u00b6 import \"@pnp/sp/navigation\"; const result = await nav.add(\"Node Title\", \"/sites/dev/pages/mypage.aspx\", true); const nodeDataRaw = result.data; // request the data from the created node const nodeData = result.node(); moveAfter \u00b6 Places a navigation node after another node in the tree import \"@pnp/sp/navigation\"; const node1result = await nav.add(`Testing - ${getRandomString(4)} (1)`, url, true); const node2result = await nav.add(`Testing - ${getRandomString(4)} (2)`, url, true); const node1 = await node1result.node(); const node2 = await node2result.node(); await nav.moveAfter(node1.Id, node2.Id); Delete \u00b6 Deletes a given node import \"@pnp/sp/navigation\"; const node1result = await nav.add(`Testing - ${getRandomString(4)}`, url, true); let nodes = await nav(); // check we added a node let index = nodes.findIndex(n => n.Id === node1result.data.Id) // index >= 0 // delete a node await nav.getById(node1result.data.Id).delete(); nodes = await nav(); index = nodes.findIndex(n => n.Id === node1result.data.Id) // index = -1 Update \u00b6 import \"@pnp/sp/navigation\"; await nav.getById(4).update({ Title: \"A new title\", }); Children \u00b6 The children property of a Navigation Node represents a collection with all the same properties and methods available on topNavigationBar or quicklaunch. import \"@pnp/sp/navigation\"; const childrenData = await nav.getById(1).children(); // add a child await nav.getById(1).children.add(\"Title\", \"Url\", true);","title":"Navigation"},{"location":"sp/navigation/#pnpsp-navigation","text":"","title":"@pnp/sp - navigation"},{"location":"sp/navigation/#navigation-service","text":"","title":"Navigation Service"},{"location":"sp/navigation/#getmenustate","text":"The MenuState service operation returns a Menu-State (dump) of a SiteMapProvider on a site. It will return an exception if the SiteMapProvider cannot be found on the site, the SiteMapProvider does not implement the IEditableSiteMapProvider interface or the SiteMapNode key cannot be found within the provider hierarchy. The IEditableSiteMapProvider also supports Custom Properties which is an optional feature. What will be return in the custom properties is up to the IEditableSiteMapProvider implementation and can differ for for each SiteMapProvider implementation. The custom properties can be requested by providing a comma separated string of property names like: property1,property2,property3\\,containingcomma NOTE: the , separator can be escaped using the \\ as escape character as done in the example above. The string above would split like: property1 property2 property3,containingcomma import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/navigation\"; const sp = spfi(...); // Will return a menu state of the default SiteMapProvider 'SPSiteMapProvider' where the dump starts a the RootNode (within the site) with a depth of 10 levels. const state = await sp.navigation.getMenuState(); // Will return the menu state of the 'SPSiteMapProvider', starting with the node with the key '1002' with a depth of 5 const state2 = await sp.navigation.getMenuState(\"1002\", 5); // Will return the menu state of the 'CurrentNavSiteMapProviderNoEncode' from the root node of the provider with a depth of 5 const state3 = await sp.navigation.getMenuState(null, 5, \"CurrentNavSiteMapProviderNoEncode\");","title":"getMenuState"},{"location":"sp/navigation/#getmenunodekey","text":"Tries to get a SiteMapNode.Key for a given URL within a site collection. If the SiteMapNode cannot be found an Exception is returned. The method is using SiteMapProvider.FindSiteMapNodeFromKey(string rawUrl) to lookup the SiteMapNode. Depending on the actual implementation of FindSiteMapNodeFromKey the matching can differ for different SiteMapProviders. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/navigation\"; const sp = spfi(...); const key = await sp.navigation.getMenuNodeKey(\"/sites/dev/Lists/SPPnPJSExampleList/AllItems.aspx\");","title":"getMenuNodeKey"},{"location":"sp/navigation/#web-navigation","text":"<<<<<<< HEAD |Scenario|Import Statement| |--|--| |Selective 1|import \"@pnp/sp/webs\"; import \"@pnp/sp/navigation\"; ======= 52a91d788431066d44d536df1352b6ce855675e3 The navigation object contains two properties \"quicklaunch\" and \"topnavigationbar\". Both have the same set of methods so our examples below show use of only quicklaunch but apply equally to topnavigationbar.","title":"Web Navigation"},{"location":"sp/navigation/#get-navigation","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/navigation\"; const sp = spfi(...); const top = await sp.web.navigation.topNavigationBar(); const quick = await sp.web.navigation.quicklaunch(); For the following examples we will refer to a variable named \"nav\" that is understood to be one of topNavigationBar or quicklaunch: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/navigation\"; const sp = spfi(...); // note we are just getting a ref to the nav object, not executing a request const nav = sp.web.navigation.topNavigationBar; // -- OR -- // note we are just getting a ref to the nav object, not executing a request const nav = sp.web.navigation.quicklaunch;","title":"Get navigation"},{"location":"sp/navigation/#getbyid","text":"import \"@pnp/sp/navigation\"; const node = await nav.getById(3)();","title":"getById"},{"location":"sp/navigation/#add","text":"import \"@pnp/sp/navigation\"; const result = await nav.add(\"Node Title\", \"/sites/dev/pages/mypage.aspx\", true); const nodeDataRaw = result.data; // request the data from the created node const nodeData = result.node();","title":"add"},{"location":"sp/navigation/#moveafter","text":"Places a navigation node after another node in the tree import \"@pnp/sp/navigation\"; const node1result = await nav.add(`Testing - ${getRandomString(4)} (1)`, url, true); const node2result = await nav.add(`Testing - ${getRandomString(4)} (2)`, url, true); const node1 = await node1result.node(); const node2 = await node2result.node(); await nav.moveAfter(node1.Id, node2.Id);","title":"moveAfter"},{"location":"sp/navigation/#delete","text":"Deletes a given node import \"@pnp/sp/navigation\"; const node1result = await nav.add(`Testing - ${getRandomString(4)}`, url, true); let nodes = await nav(); // check we added a node let index = nodes.findIndex(n => n.Id === node1result.data.Id) // index >= 0 // delete a node await nav.getById(node1result.data.Id).delete(); nodes = await nav(); index = nodes.findIndex(n => n.Id === node1result.data.Id) // index = -1","title":"Delete"},{"location":"sp/navigation/#update","text":"import \"@pnp/sp/navigation\"; await nav.getById(4).update({ Title: \"A new title\", });","title":"Update"},{"location":"sp/navigation/#children","text":"The children property of a Navigation Node represents a collection with all the same properties and methods available on topNavigationBar or quicklaunch. import \"@pnp/sp/navigation\"; const childrenData = await nav.getById(1).children(); // add a child await nav.getById(1).children.add(\"Title\", \"Url\", true);","title":"Children"},{"location":"sp/permissions/","text":"@pnp/sp - permissions \u00b6 A common task is to determine if a user or the current user has a certain permission level. It is a great idea to check before performing a task such as creating a list to ensure a user can without getting back an error. This allows you to provide a better experience to the user. Permissions in SharePoint are assigned to the set of securable objects which include Site, Web, List, and List Item. These are the four level to which unique permissions can be assigned. As such @pnp/sp provides a set of methods defined in the QueryableSecurable class to handle these permissions. These examples all use the Web to get the values, however the methods work identically on all securables. Get Role Assignments \u00b6 This gets a collection of all the role assignments on a given securable. The property returns a RoleAssignments collection which supports the OData collection operators. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/web\"; import \"@pnp/sp/security\"; const sp = spfi(...); const roles = await sp.web.roleAssignments(); First Unique Ancestor Securable Object \u00b6 This method can be used to find the securable parent up the hierarchy that has unique permissions. If everything inherits permissions this will be the Site. If a sub web has unique permissions it will be the web, and so on. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/web\"; import \"@pnp/sp/security\"; const sp = spfi(...); const obj = await sp.web.firstUniqueAncestorSecurableObject(); User Effective Permissions \u00b6 This method returns the BasePermissions for a given user or the current user. This value contains the High and Low values for a user on the securable you have queried. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/web\"; import \"@pnp/sp/security\"; const sp = spfi(...); const perms = await sp.web.getUserEffectivePermissions(\"i:0#.f|membership|user@site.com\"); const perms2 = await sp.web.getCurrentUserEffectivePermissions(); User Has Permissions \u00b6 Because the High and Low values in the BasePermission don't obviously mean anything you can use these methods along with the PermissionKind enumeration to check actual rights on the securable. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/web\"; import { PermissionKind } from \"@pnp/sp/security\"; const sp = spfi(...); const perms = await sp.web.userHasPermissions(\"i:0#.f|membership|user@site.com\", PermissionKind.ApproveItems); const perms2 = await sp.web.currentUserHasPermissions(PermissionKind.ApproveItems); Has Permissions \u00b6 If you need to check multiple permissions it can be more efficient to get the BasePermissions once and then use the hasPermissions method to check them as shown below. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/web\"; import { PermissionKind } from \"@pnp/sp/security\"; const sp = spfi(...); const perms = await sp.web.getCurrentUserEffectivePermissions(); if (sp.web.hasPermissions(perms, PermissionKind.AddListItems) && sp.web.hasPermissions(perms, PermissionKind.DeleteVersions)) { // ... }","title":"Permissions"},{"location":"sp/permissions/#pnpsp-permissions","text":"A common task is to determine if a user or the current user has a certain permission level. It is a great idea to check before performing a task such as creating a list to ensure a user can without getting back an error. This allows you to provide a better experience to the user. Permissions in SharePoint are assigned to the set of securable objects which include Site, Web, List, and List Item. These are the four level to which unique permissions can be assigned. As such @pnp/sp provides a set of methods defined in the QueryableSecurable class to handle these permissions. These examples all use the Web to get the values, however the methods work identically on all securables.","title":"@pnp/sp - permissions"},{"location":"sp/permissions/#get-role-assignments","text":"This gets a collection of all the role assignments on a given securable. The property returns a RoleAssignments collection which supports the OData collection operators. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/web\"; import \"@pnp/sp/security\"; const sp = spfi(...); const roles = await sp.web.roleAssignments();","title":"Get Role Assignments"},{"location":"sp/permissions/#first-unique-ancestor-securable-object","text":"This method can be used to find the securable parent up the hierarchy that has unique permissions. If everything inherits permissions this will be the Site. If a sub web has unique permissions it will be the web, and so on. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/web\"; import \"@pnp/sp/security\"; const sp = spfi(...); const obj = await sp.web.firstUniqueAncestorSecurableObject();","title":"First Unique Ancestor Securable Object"},{"location":"sp/permissions/#user-effective-permissions","text":"This method returns the BasePermissions for a given user or the current user. This value contains the High and Low values for a user on the securable you have queried. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/web\"; import \"@pnp/sp/security\"; const sp = spfi(...); const perms = await sp.web.getUserEffectivePermissions(\"i:0#.f|membership|user@site.com\"); const perms2 = await sp.web.getCurrentUserEffectivePermissions();","title":"User Effective Permissions"},{"location":"sp/permissions/#user-has-permissions","text":"Because the High and Low values in the BasePermission don't obviously mean anything you can use these methods along with the PermissionKind enumeration to check actual rights on the securable. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/web\"; import { PermissionKind } from \"@pnp/sp/security\"; const sp = spfi(...); const perms = await sp.web.userHasPermissions(\"i:0#.f|membership|user@site.com\", PermissionKind.ApproveItems); const perms2 = await sp.web.currentUserHasPermissions(PermissionKind.ApproveItems);","title":"User Has Permissions"},{"location":"sp/permissions/#has-permissions","text":"If you need to check multiple permissions it can be more efficient to get the BasePermissions once and then use the hasPermissions method to check them as shown below. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/web\"; import { PermissionKind } from \"@pnp/sp/security\"; const sp = spfi(...); const perms = await sp.web.getCurrentUserEffectivePermissions(); if (sp.web.hasPermissions(perms, PermissionKind.AddListItems) && sp.web.hasPermissions(perms, PermissionKind.DeleteVersions)) { // ... }","title":"Has Permissions"},{"location":"sp/profiles/","text":"@pnp/sp/profiles \u00b6 The profile services allows you to work with the SharePoint User Profile Store. Profiles \u00b6 Profiles is accessed directly from the root sp object. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/profiles\"; Get edit profile link for the current user \u00b6 getEditProfileLink(): Promise<string> const sp = spfi(...); const editProfileLink = await sp.profiles.getEditProfileLink(); Is My People List Public \u00b6 Provides a boolean that indicates if the current users \"People I'm Following\" list is public or not getIsMyPeopleListPublic(): Promise<boolean> const sp = spfi(...); const isPublic = await sp.profiles.getIsMyPeopleListPublic(); Find out if the current user is followed by another user \u00b6 Provides a boolean that indicates if the current users is followed by a specific user. amIFollowedBy(loginName: string): Promise<boolean> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const isFollowedBy = await sp.profiles.amIFollowedBy(loginName); Find out if I am following a specific user \u00b6 Provides a boolean that indicates if the current users is followed by a specific user. amIFollowing(loginName: string): Promise<boolean> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const following = await sp.profiles.amIFollowing(loginName); Get the tags I follow \u00b6 Gets the tags the current user is following. Accepts max count, default is 20. getFollowedTags(maxCount = 20): Promise<string[]> const sp = spfi(...); const tags = await sp.profiles.getFollowedTags(); Get followers for a specific user \u00b6 Gets the people who are following the specified user. getFollowersFor(loginName: string): Promise<any[]> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const followers = await sp.profiles.getFollowersFor(loginName); followers.forEach((value) => { ... }); Get followers for the current \u00b6 Gets the people who are following the current user. myFollowers(): ISPCollection const sp = spfi(...); const folowers = await sp.profiles.myFollowers(); Get the properties for the current user \u00b6 Gets user properties for the current user. myProperties(): ISPInstance const sp = spfi(...); const profile = await sp.profiles.myProperties(); console.log(profile.DisplayName); console.log(profile.Email); console.log(profile.Title); console.log(profile.UserProfileProperties.length); // Properties are stored in Key/Value pairs, // so parse into an object called userProperties var props = {}; profile.UserProfileProperties.forEach((prop) => { props[prop.Key] = prop.Value; }); profile.userProperties = props; console.log(\"Account Name: \" + profile.userProperties.AccountName); // you can also select properties to return before const sp = spfi(...); const profile = await sp.profiles.myProperties.select(\"Title\", \"Email\")(); console.log(profile.Email); console.log(profile.Title); Gets people specified user is following \u00b6 getPeopleFollowedBy(loginName: string): Promise<any[]> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const folowers = await sp.profiles.getFollowersFor(loginName); followers.forEach((value) => { ... }); Gets properties for a specified user \u00b6 getPropertiesFor(loginName: string): Promise<any> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const profile = await sp.profiles.getPropertiesFor(loginName); console.log(profile.DisplayName); console.log(profile.Email); console.log(profile.Title); console.log(profile.UserProfileProperties.length); // Properties are stored in inconvenient Key/Value pairs, // so parse into an object called userProperties var props = {}; profile.UserProfileProperties.forEach((prop) => { props[prop.Key] = prop.Value; }); profile.userProperties = props; console.log(\"Account Name: \" + profile.userProperties.AccountName); Gets most popular tags \u00b6 Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first trendingTags(): Promise<IHashTagCollection> const sp = spfi(...); const tags = await sp.profiles.trendingTags(); tags.Items.forEach((tag) => { ... }); Gets specified user profile property for the specified user \u00b6 getUserProfilePropertyFor(loginName: string, propertyName: string): Promise<string> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const propertyName = \"AccountName\"; const property = await sp.profiles.getUserProfilePropertyFor(loginName, propertyName); Hide specific user from list of suggested people \u00b6 Removes the specified user from the user's list of suggested people to follow. hideSuggestion(loginName: string): Promise<void> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; await sp.profiles.hideSuggestion(loginName); Is one user following another \u00b6 Indicates whether the first user is following the second user. First parameter is the account name of the user who might be following the followee. Second parameter is the account name of the user who might be followed by the follower. isFollowing(follower: string, followee: string): Promise<boolean> const sp = spfi(...); const follower = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const followee = \"i:0#.f|membership|testuser2@mytenant.onmicrosoft.com\"; const isFollowing = await sp.profiles.isFollowing(follower, followee); Set User Profile Picture \u00b6 Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching. Accepts the profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB. setMyProfilePic(profilePicSource: Blob): Promise<void> import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/profiles\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/files\"; const sp = spfi(...); // get the blob object through a request or from a file input const blob = await sp.web.lists.getByTitle(\"Documents\").rootFolder.files.getByName(\"profile.jpg\").getBlob(); await sp.profiles.setMyProfilePic(blob); Sets single value User Profile property \u00b6 accountName The account name of the user propertyName Property name propertyValue Property value setSingleValueProfileProperty(accountName: string, propertyName: string, propertyValue: string): Promise<void> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; await sp.profiles.setSingleValueProfileProperty(loginName, \"CellPhone\", \"(123) 555-1212\"); Sets a mult-value User Profile property \u00b6 accountName The account name of the user propertyName Property name propertyValues Property values setMultiValuedProfileProperty(accountName: string, propertyName: string, propertyValues: string[]): Promise<void> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const propertyName = \"SPS-Skills\"; const propertyValues = [\"SharePoint\", \"Office 365\", \"Architecture\", \"Azure\"]; await sp.profiles.setMultiValuedProfileProperty(loginName, propertyName, propertyValues); const profile = await sp.profiles.getPropertiesFor(loginName); var props = {}; profile.UserProfileProperties.forEach((prop) => { props[prop.Key] = prop.Value; }); profile.userProperties = props; console.log(profile.userProperties[propertyName]); Create Personal Site for specified users \u00b6 Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Emails The email addresses of the users to provision sites for createPersonalSiteEnqueueBulk(...emails: string[]): Promise<void> const sp = spfi(...); let userEmails: string[] = [\"testuser1@mytenant.onmicrosoft.com\", \"testuser2@mytenant.onmicrosoft.com\"]; await sp.profiles.createPersonalSiteEnqueueBulk(userEmails); Get the user profile of the owner for the current site \u00b6 ownerUserProfile(): Promise<IUserProfile> const sp = spfi(...); const profile = await sp.profiles.ownerUserProfile(); Get the user profile of the current user \u00b6 userProfile(): Promise<any> const sp = spfi(...); const profile = await sp.profiles.userProfile(); Create personal site for current user \u00b6 createPersonalSite(interactiveRequest = false): Promise<void> const sp = spfi(...); await sp.profiles.createPersonalSite(); Make all profile data public or private \u00b6 Set the privacy settings for all social data. shareAllSocialData(share: boolean): Promise<void> const sp = spfi(...); await sp.profiles.shareAllSocialData(true); Resolve a user or group \u00b6 Resolves user or group using specified query parameters clientPeoplePickerResolveUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity> const sp = spfi(...); const result = await sp.profiles.clientPeoplePickerSearchUser({ AllowEmailAddresses: true, AllowMultipleEntities: false, MaximumEntitySuggestions: 25, QueryString: 'John' }); Search a user or group \u00b6 Searches for users or groups using specified query parameters clientPeoplePickerSearchUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity[]> const sp = spfi(...); const result = await sp.profiles.clientPeoplePickerSearchUser({ AllowEmailAddresses: true, AllowMultipleEntities: false, MaximumEntitySuggestions: 25, QueryString: 'John' });","title":"Profiles"},{"location":"sp/profiles/#pnpspprofiles","text":"The profile services allows you to work with the SharePoint User Profile Store.","title":"@pnp/sp/profiles"},{"location":"sp/profiles/#profiles","text":"Profiles is accessed directly from the root sp object. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/profiles\";","title":"Profiles"},{"location":"sp/profiles/#get-edit-profile-link-for-the-current-user","text":"getEditProfileLink(): Promise<string> const sp = spfi(...); const editProfileLink = await sp.profiles.getEditProfileLink();","title":"Get edit profile link for the current user"},{"location":"sp/profiles/#is-my-people-list-public","text":"Provides a boolean that indicates if the current users \"People I'm Following\" list is public or not getIsMyPeopleListPublic(): Promise<boolean> const sp = spfi(...); const isPublic = await sp.profiles.getIsMyPeopleListPublic();","title":"Is My People List Public"},{"location":"sp/profiles/#find-out-if-the-current-user-is-followed-by-another-user","text":"Provides a boolean that indicates if the current users is followed by a specific user. amIFollowedBy(loginName: string): Promise<boolean> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const isFollowedBy = await sp.profiles.amIFollowedBy(loginName);","title":"Find out if the current user is followed by another user"},{"location":"sp/profiles/#find-out-if-i-am-following-a-specific-user","text":"Provides a boolean that indicates if the current users is followed by a specific user. amIFollowing(loginName: string): Promise<boolean> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const following = await sp.profiles.amIFollowing(loginName);","title":"Find out if I am following a specific user"},{"location":"sp/profiles/#get-the-tags-i-follow","text":"Gets the tags the current user is following. Accepts max count, default is 20. getFollowedTags(maxCount = 20): Promise<string[]> const sp = spfi(...); const tags = await sp.profiles.getFollowedTags();","title":"Get the tags I follow"},{"location":"sp/profiles/#get-followers-for-a-specific-user","text":"Gets the people who are following the specified user. getFollowersFor(loginName: string): Promise<any[]> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const followers = await sp.profiles.getFollowersFor(loginName); followers.forEach((value) => { ... });","title":"Get followers for a specific user"},{"location":"sp/profiles/#get-followers-for-the-current","text":"Gets the people who are following the current user. myFollowers(): ISPCollection const sp = spfi(...); const folowers = await sp.profiles.myFollowers();","title":"Get followers for the current"},{"location":"sp/profiles/#get-the-properties-for-the-current-user","text":"Gets user properties for the current user. myProperties(): ISPInstance const sp = spfi(...); const profile = await sp.profiles.myProperties(); console.log(profile.DisplayName); console.log(profile.Email); console.log(profile.Title); console.log(profile.UserProfileProperties.length); // Properties are stored in Key/Value pairs, // so parse into an object called userProperties var props = {}; profile.UserProfileProperties.forEach((prop) => { props[prop.Key] = prop.Value; }); profile.userProperties = props; console.log(\"Account Name: \" + profile.userProperties.AccountName); // you can also select properties to return before const sp = spfi(...); const profile = await sp.profiles.myProperties.select(\"Title\", \"Email\")(); console.log(profile.Email); console.log(profile.Title);","title":"Get the properties for the current user"},{"location":"sp/profiles/#gets-people-specified-user-is-following","text":"getPeopleFollowedBy(loginName: string): Promise<any[]> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const folowers = await sp.profiles.getFollowersFor(loginName); followers.forEach((value) => { ... });","title":"Gets people specified user is following"},{"location":"sp/profiles/#gets-properties-for-a-specified-user","text":"getPropertiesFor(loginName: string): Promise<any> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const profile = await sp.profiles.getPropertiesFor(loginName); console.log(profile.DisplayName); console.log(profile.Email); console.log(profile.Title); console.log(profile.UserProfileProperties.length); // Properties are stored in inconvenient Key/Value pairs, // so parse into an object called userProperties var props = {}; profile.UserProfileProperties.forEach((prop) => { props[prop.Key] = prop.Value; }); profile.userProperties = props; console.log(\"Account Name: \" + profile.userProperties.AccountName);","title":"Gets properties for a specified user"},{"location":"sp/profiles/#gets-most-popular-tags","text":"Gets the 20 most popular hash tags over the past week, sorted so that the most popular tag appears first trendingTags(): Promise<IHashTagCollection> const sp = spfi(...); const tags = await sp.profiles.trendingTags(); tags.Items.forEach((tag) => { ... });","title":"Gets most popular tags"},{"location":"sp/profiles/#gets-specified-user-profile-property-for-the-specified-user","text":"getUserProfilePropertyFor(loginName: string, propertyName: string): Promise<string> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const propertyName = \"AccountName\"; const property = await sp.profiles.getUserProfilePropertyFor(loginName, propertyName);","title":"Gets specified user profile property for the specified user"},{"location":"sp/profiles/#hide-specific-user-from-list-of-suggested-people","text":"Removes the specified user from the user's list of suggested people to follow. hideSuggestion(loginName: string): Promise<void> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; await sp.profiles.hideSuggestion(loginName);","title":"Hide specific user from list of suggested people"},{"location":"sp/profiles/#is-one-user-following-another","text":"Indicates whether the first user is following the second user. First parameter is the account name of the user who might be following the followee. Second parameter is the account name of the user who might be followed by the follower. isFollowing(follower: string, followee: string): Promise<boolean> const sp = spfi(...); const follower = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const followee = \"i:0#.f|membership|testuser2@mytenant.onmicrosoft.com\"; const isFollowing = await sp.profiles.isFollowing(follower, followee);","title":"Is one user following another"},{"location":"sp/profiles/#set-user-profile-picture","text":"Uploads and sets the user profile picture (Users can upload a picture to their own profile only). Not supported for batching. Accepts the profilePicSource Blob data representing the user's picture in BMP, JPEG, or PNG format of up to 4.76MB. setMyProfilePic(profilePicSource: Blob): Promise<void> import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/profiles\"; import \"@pnp/sp/folders\"; import \"@pnp/sp/files\"; const sp = spfi(...); // get the blob object through a request or from a file input const blob = await sp.web.lists.getByTitle(\"Documents\").rootFolder.files.getByName(\"profile.jpg\").getBlob(); await sp.profiles.setMyProfilePic(blob);","title":"Set User Profile Picture"},{"location":"sp/profiles/#sets-single-value-user-profile-property","text":"accountName The account name of the user propertyName Property name propertyValue Property value setSingleValueProfileProperty(accountName: string, propertyName: string, propertyValue: string): Promise<void> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; await sp.profiles.setSingleValueProfileProperty(loginName, \"CellPhone\", \"(123) 555-1212\");","title":"Sets single value User Profile property"},{"location":"sp/profiles/#sets-a-mult-value-user-profile-property","text":"accountName The account name of the user propertyName Property name propertyValues Property values setMultiValuedProfileProperty(accountName: string, propertyName: string, propertyValues: string[]): Promise<void> const sp = spfi(...); const loginName = \"i:0#.f|membership|testuser@mytenant.onmicrosoft.com\"; const propertyName = \"SPS-Skills\"; const propertyValues = [\"SharePoint\", \"Office 365\", \"Architecture\", \"Azure\"]; await sp.profiles.setMultiValuedProfileProperty(loginName, propertyName, propertyValues); const profile = await sp.profiles.getPropertiesFor(loginName); var props = {}; profile.UserProfileProperties.forEach((prop) => { props[prop.Key] = prop.Value; }); profile.userProperties = props; console.log(profile.userProperties[propertyName]);","title":"Sets a mult-value User Profile property"},{"location":"sp/profiles/#create-personal-site-for-specified-users","text":"Provisions one or more users' personal sites. (My Site administrator on SharePoint Online only) Emails The email addresses of the users to provision sites for createPersonalSiteEnqueueBulk(...emails: string[]): Promise<void> const sp = spfi(...); let userEmails: string[] = [\"testuser1@mytenant.onmicrosoft.com\", \"testuser2@mytenant.onmicrosoft.com\"]; await sp.profiles.createPersonalSiteEnqueueBulk(userEmails);","title":"Create Personal Site for specified users"},{"location":"sp/profiles/#get-the-user-profile-of-the-owner-for-the-current-site","text":"ownerUserProfile(): Promise<IUserProfile> const sp = spfi(...); const profile = await sp.profiles.ownerUserProfile();","title":"Get the user profile of the owner for the current site"},{"location":"sp/profiles/#get-the-user-profile-of-the-current-user","text":"userProfile(): Promise<any> const sp = spfi(...); const profile = await sp.profiles.userProfile();","title":"Get the user profile of the current user"},{"location":"sp/profiles/#create-personal-site-for-current-user","text":"createPersonalSite(interactiveRequest = false): Promise<void> const sp = spfi(...); await sp.profiles.createPersonalSite();","title":"Create personal site for current user"},{"location":"sp/profiles/#make-all-profile-data-public-or-private","text":"Set the privacy settings for all social data. shareAllSocialData(share: boolean): Promise<void> const sp = spfi(...); await sp.profiles.shareAllSocialData(true);","title":"Make all profile data public or private"},{"location":"sp/profiles/#resolve-a-user-or-group","text":"Resolves user or group using specified query parameters clientPeoplePickerResolveUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity> const sp = spfi(...); const result = await sp.profiles.clientPeoplePickerSearchUser({ AllowEmailAddresses: true, AllowMultipleEntities: false, MaximumEntitySuggestions: 25, QueryString: 'John' });","title":"Resolve a user or group"},{"location":"sp/profiles/#search-a-user-or-group","text":"Searches for users or groups using specified query parameters clientPeoplePickerSearchUser(queryParams: IClientPeoplePickerQueryParameters): Promise<IPeoplePickerEntity[]> const sp = spfi(...); const result = await sp.profiles.clientPeoplePickerSearchUser({ AllowEmailAddresses: true, AllowMultipleEntities: false, MaximumEntitySuggestions: 25, QueryString: 'John' });","title":"Search a user or group"},{"location":"sp/regional-settings/","text":"@pnp/sp/regional-settings \u00b6 The regional settings module helps with managing dates and times across various timezones. IRegionalSettings \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/regional-settings/web\"; const sp = spfi(...); // get all the web's regional settings const s = await sp.web.regionalSettings(); // select only some settings to return const s2 = await sp.web.regionalSettings.select(\"DecimalSeparator\", \"ListSeparator\", \"IsUIRightToLeft\")(); Installed Languages \u00b6 You can get a list of the installed languages in the web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/regional-settings/web\"; const sp = spfi(...); const s = await sp.web.regionalSettings.getInstalledLanguages(); The installedLanguages property accessor is deprecated after 2.0.4 in favor of getInstalledLanguages and will be removed in future versions. TimeZones \u00b6 You can also get information about the selected timezone in the web and all of the defined timezones. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/regional-settings/web\"; const sp = spfi(...); // get the web's configured timezone const s = await sp.web.regionalSettings.timeZone(); // select just the Description and Id const s2 = await sp.web.regionalSettings.timeZone.select(\"Description\", \"Id\")(); // get all the timezones const s3 = await sp.web.regionalSettings.timeZones(); // get a specific timezone by id // list of ids: https://msdn.microsoft.com/en-us/library/office/jj247008.aspx const s4 = await sp.web.regionalSettings.timeZones.getById(23); const s5 = await s.localTimeToUTC(new Date()); // convert a given date from web's local time to UTC time const s6 = await sp.web.regionalSettings.timeZone.localTimeToUTC(new Date()); // convert a given date from UTC time to web's local time const s6 = await sp.web.regionalSettings.timeZone.utcToLocalTime(new Date()) const s7 = await sp.web.regionalSettings.timeZone.utcToLocalTime(new Date(2019, 6, 10, 10, 0, 0, 0)) Title and Description Resources \u00b6 Some objects allow you to read language specific title information as shown in the following sample. This applies to Web, List, Field, Content Type, and User Custom Actions. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/regional-settings\"; const sp = spfi(...); // // The below methods appears on // - Web // - List // - Field // - ContentType // - User Custom Action // // after you import @pnp/sp/regional-settings // // you can also import just parts of the regional settings: // import \"@pnp/sp/regional-settings/web\"; // import \"@pnp/sp/regional-settings/list\"; // import \"@pnp/sp/regional-settings/content-type\"; // import \"@pnp/sp/regional-settings/field\"; // import \"@pnp/sp/regional-settings/user-custom-actions\"; const title = await sp.web.titleResource(\"en-us\"); const title2 = await sp.web.titleResource(\"de-de\"); const description = await sp.web.descriptionResource(\"en-us\"); const description2 = await sp.web.descriptionResource(\"de-de\"); You can only read the values through the REST API, not set the value.","title":"Regional Settings"},{"location":"sp/regional-settings/#pnpspregional-settings","text":"The regional settings module helps with managing dates and times across various timezones.","title":"@pnp/sp/regional-settings"},{"location":"sp/regional-settings/#iregionalsettings","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/regional-settings/web\"; const sp = spfi(...); // get all the web's regional settings const s = await sp.web.regionalSettings(); // select only some settings to return const s2 = await sp.web.regionalSettings.select(\"DecimalSeparator\", \"ListSeparator\", \"IsUIRightToLeft\")();","title":"IRegionalSettings"},{"location":"sp/regional-settings/#installed-languages","text":"You can get a list of the installed languages in the web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/regional-settings/web\"; const sp = spfi(...); const s = await sp.web.regionalSettings.getInstalledLanguages(); The installedLanguages property accessor is deprecated after 2.0.4 in favor of getInstalledLanguages and will be removed in future versions.","title":"Installed Languages"},{"location":"sp/regional-settings/#timezones","text":"You can also get information about the selected timezone in the web and all of the defined timezones. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/regional-settings/web\"; const sp = spfi(...); // get the web's configured timezone const s = await sp.web.regionalSettings.timeZone(); // select just the Description and Id const s2 = await sp.web.regionalSettings.timeZone.select(\"Description\", \"Id\")(); // get all the timezones const s3 = await sp.web.regionalSettings.timeZones(); // get a specific timezone by id // list of ids: https://msdn.microsoft.com/en-us/library/office/jj247008.aspx const s4 = await sp.web.regionalSettings.timeZones.getById(23); const s5 = await s.localTimeToUTC(new Date()); // convert a given date from web's local time to UTC time const s6 = await sp.web.regionalSettings.timeZone.localTimeToUTC(new Date()); // convert a given date from UTC time to web's local time const s6 = await sp.web.regionalSettings.timeZone.utcToLocalTime(new Date()) const s7 = await sp.web.regionalSettings.timeZone.utcToLocalTime(new Date(2019, 6, 10, 10, 0, 0, 0))","title":"TimeZones"},{"location":"sp/regional-settings/#title-and-description-resources","text":"Some objects allow you to read language specific title information as shown in the following sample. This applies to Web, List, Field, Content Type, and User Custom Actions. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/regional-settings\"; const sp = spfi(...); // // The below methods appears on // - Web // - List // - Field // - ContentType // - User Custom Action // // after you import @pnp/sp/regional-settings // // you can also import just parts of the regional settings: // import \"@pnp/sp/regional-settings/web\"; // import \"@pnp/sp/regional-settings/list\"; // import \"@pnp/sp/regional-settings/content-type\"; // import \"@pnp/sp/regional-settings/field\"; // import \"@pnp/sp/regional-settings/user-custom-actions\"; const title = await sp.web.titleResource(\"en-us\"); const title2 = await sp.web.titleResource(\"de-de\"); const description = await sp.web.descriptionResource(\"en-us\"); const description2 = await sp.web.descriptionResource(\"de-de\"); You can only read the values through the REST API, not set the value.","title":"Title and Description Resources"},{"location":"sp/related-items/","text":"@pnp/sp/related-items \u00b6 The related items API allows you to add related items to items within a task or workflow list. Related items need to be in the same site collection. Setup \u00b6 Instead of copying this block of code into each sample, understand that each sample is meant to run with this supporting code to work. import { spfi, SPFx, extractWebUrl } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/related-items/web\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items/list\"; import \"@pnp/sp/files/list\"; import { IList } from \"@pnp/sp/lists\"; import { getRandomString } from \"@pnp/core\"; const sp = spfi(...); // setup some lists (or just use existing ones this is just to show the complete process) // we need two lists to use for creating related items, they need to use template 107 (task list) const ler1 = await sp.web.lists.ensure(\"RelatedItemsSourceList\", \"\", 107); const ler2 = await sp.web.lists.ensure(\"RelatedItemsTargetList\", \"\", 107); const sourceList = ler1.list; const targetList = ler2.list; const sourceListName = await sourceList.select(\"Id\")().then(r => r.Id); const targetListName = await targetList.select(\"Id\")().then(r => r.Id); // or whatever you need to get the web url, both our example lists are in the same web. const webUrl = sp.web.toUrl(); // ...individual samples start here addSingleLink \u00b6 const sourceItem = await sourceList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); const targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); await sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl); addSingleLinkToUrl \u00b6 This method adds a link to task item based on a url. The list name and item id are to the task item, the url is to the related item/document. // get a file's server relative url in some manner, here we add one const file = await sp.web.defaultDocumentLibrary.rootFolder.files.add(`file_${getRandomString(4)}.txt`, \"Content\", true).then(r => r.data); // add an item or get an item from the task list const targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); await sp.web.relatedItems.addSingleLinkToUrl(targetListName, targetItem.Id, file.ServerRelativeUrl); addSingleLinkFromUrl \u00b6 This method adds a link to task item based on a url. The list name and item id are to related item, the url is to task item to which the related reference is being added. I haven't found a use case for this method. deleteSingleLink \u00b6 This method allows you to delete a link previously created. const sourceItem = await sourceList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); const targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); // add the link await sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl); // delete the link await sp.web.relatedItems.deleteSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl); getRelatedItems \u00b6 Gets the related items for an item import { IRelatedItem } from \"@pnp/sp/related-items\"; const sourceItem = await sourceList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); const targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); // add a link await sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl); const targetItem2 = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); // add a link await sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem2.Id, webUrl); const items: IRelatedItem[] = await sp.web.relatedItems.getRelatedItems(sourceListName, sourceItem.Id); // items.length === 2 Related items are defined by the IRelatedItem interface export interface IRelatedItem { ListId: string; ItemId: number; Url: string; Title: string; WebId: string; IconUrl: string; } getPageOneRelatedItems \u00b6 Gets an abbreviated set of related items import { IRelatedItem } from \"@pnp/sp/related-items\"; const sourceItem = await sourceList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); const targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); // add a link await sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl); const targetItem2 = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); // add a link await sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem2.Id, webUrl); const items: IRelatedItem[] = await sp.web.relatedItems.getPageOneRelatedItems(sourceListName, sourceItem.Id); // items.length === 2","title":"Related Items"},{"location":"sp/related-items/#pnpsprelated-items","text":"The related items API allows you to add related items to items within a task or workflow list. Related items need to be in the same site collection.","title":"@pnp/sp/related-items"},{"location":"sp/related-items/#setup","text":"Instead of copying this block of code into each sample, understand that each sample is meant to run with this supporting code to work. import { spfi, SPFx, extractWebUrl } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/related-items/web\"; import \"@pnp/sp/lists/web\"; import \"@pnp/sp/items/list\"; import \"@pnp/sp/files/list\"; import { IList } from \"@pnp/sp/lists\"; import { getRandomString } from \"@pnp/core\"; const sp = spfi(...); // setup some lists (or just use existing ones this is just to show the complete process) // we need two lists to use for creating related items, they need to use template 107 (task list) const ler1 = await sp.web.lists.ensure(\"RelatedItemsSourceList\", \"\", 107); const ler2 = await sp.web.lists.ensure(\"RelatedItemsTargetList\", \"\", 107); const sourceList = ler1.list; const targetList = ler2.list; const sourceListName = await sourceList.select(\"Id\")().then(r => r.Id); const targetListName = await targetList.select(\"Id\")().then(r => r.Id); // or whatever you need to get the web url, both our example lists are in the same web. const webUrl = sp.web.toUrl(); // ...individual samples start here","title":"Setup"},{"location":"sp/related-items/#addsinglelink","text":"const sourceItem = await sourceList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); const targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); await sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl);","title":"addSingleLink"},{"location":"sp/related-items/#addsinglelinktourl","text":"This method adds a link to task item based on a url. The list name and item id are to the task item, the url is to the related item/document. // get a file's server relative url in some manner, here we add one const file = await sp.web.defaultDocumentLibrary.rootFolder.files.add(`file_${getRandomString(4)}.txt`, \"Content\", true).then(r => r.data); // add an item or get an item from the task list const targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); await sp.web.relatedItems.addSingleLinkToUrl(targetListName, targetItem.Id, file.ServerRelativeUrl);","title":"addSingleLinkToUrl"},{"location":"sp/related-items/#addsinglelinkfromurl","text":"This method adds a link to task item based on a url. The list name and item id are to related item, the url is to task item to which the related reference is being added. I haven't found a use case for this method.","title":"addSingleLinkFromUrl"},{"location":"sp/related-items/#deletesinglelink","text":"This method allows you to delete a link previously created. const sourceItem = await sourceList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); const targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); // add the link await sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl); // delete the link await sp.web.relatedItems.deleteSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl);","title":"deleteSingleLink"},{"location":"sp/related-items/#getrelateditems","text":"Gets the related items for an item import { IRelatedItem } from \"@pnp/sp/related-items\"; const sourceItem = await sourceList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); const targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); // add a link await sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl); const targetItem2 = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); // add a link await sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem2.Id, webUrl); const items: IRelatedItem[] = await sp.web.relatedItems.getRelatedItems(sourceListName, sourceItem.Id); // items.length === 2 Related items are defined by the IRelatedItem interface export interface IRelatedItem { ListId: string; ItemId: number; Url: string; Title: string; WebId: string; IconUrl: string; }","title":"getRelatedItems"},{"location":"sp/related-items/#getpageonerelateditems","text":"Gets an abbreviated set of related items import { IRelatedItem } from \"@pnp/sp/related-items\"; const sourceItem = await sourceList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); const targetItem = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); // add a link await sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem.Id, webUrl); const targetItem2 = await targetList.items.add({ Title: `Item ${getRandomString(4)}` }).then(r => r.data); // add a link await sp.web.relatedItems.addSingleLink(sourceListName, sourceItem.Id, webUrl, targetListName, targetItem2.Id, webUrl); const items: IRelatedItem[] = await sp.web.relatedItems.getPageOneRelatedItems(sourceListName, sourceItem.Id); // items.length === 2","title":"getPageOneRelatedItems"},{"location":"sp/search/","text":"@pnp/sp/search \u00b6 Using search you can access content throughout your organization in a secure and consistent manner. The library provides support for searching and suggest - as well as some interfaces and helper classes to make building your queries and processing responses easier. Search \u00b6 Search is accessed directly from the root sp object and can take either a string representing the query text, a plain object matching the ISearchQuery interface, or a SearchQueryBuilder instance. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/search\"; import { ISearchQuery, SearchResults, SearchQueryBuilder } from \"@pnp/sp/search\"; const sp = spfi(...); // text search using SharePoint default values for other parameters const results: SearchResults = await sp.search(\"test\"); console.log(results.ElapsedTime); console.log(results.RowCount); console.log(results.PrimarySearchResults); // define a search query object matching the ISearchQuery interface const results2: SearchResults = await sp.search(<ISearchQuery>{ Querytext: \"test\", RowLimit: 10, EnableInterleaving: true, }); console.log(results2.ElapsedTime); console.log(results2.RowCount); console.log(results2.PrimarySearchResults); // define a query using a builder const builder = SearchQueryBuilder(\"test\").rowLimit(10).enableInterleaving.enableQueryRules.processPersonalFavorites; const results3 = await sp.search(builder); console.log(results3.ElapsedTime); console.log(results3.RowCount); console.log(results3.PrimarySearchResults); Search Result Caching \u00b6 You can use the searchWithCaching method to enable cache support for your search results this option works with any of the options for providing a query, just replace \"search\" with \"searchWithCaching\" in your method chain and gain all the benefits of caching. The second parameter is optional and allows you to specify the cache options import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/search\"; import { ISearchQuery, SearchResults, SearchQueryBuilder } from \"@pnp/sp/search\"; const sp = spfi(...); sp.searchWithCaching({ Querytext: \"test\", RowLimit: 10, EnableInterleaving: true, } as ISearchQuery).then((r: SearchResults) => { console.log(r.ElapsedTime); console.log(r.RowCount); console.log(r.PrimarySearchResults); }); // use a query builder const builder = SearchQueryBuilder(\"test\").rowLimit(3); // supply a search query builder and caching options const results2 = await sp.searchWithCaching(builder, { key: \"mykey\", expiration: dateAdd(new Date(), \"month\", 1) }); console.log(results2.TotalRows); Paging with SearchResults.getPage \u00b6 Paging is controlled by a start row and page size parameter. You can specify both arguments in your initial query however you can use the getPage method to jump to any page. The second parameter page size is optional and will use the previous RowLimit or default to 10. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/search\"; import { SearchResults, SearchQueryBuilder } from \"@pnp/sp/search\"; const sp = spfi(...); // this will hold our current results let currentResults: SearchResults = null; let page = 1; // triggered on page load or through some other means function onStart() { // construct our query that will be used throughout the paging process, likely from user input const q = SearchQueryBuilder(\"test\").rowLimit(5); const results = await sp.search(q); currentResults = results; // set the current results page = 1; // reset page counter // update UI... } // triggered by an event async function next() { currentResults = await currentResults.getPage(++page); // update UI... } // triggered by an event async function prev() { currentResults = await currentResults.getPage(--page); // update UI... } SearchQueryBuilder \u00b6 The SearchQueryBuilder allows you to build your queries in a fluent manner. It also accepts constructor arguments for query text and a base query plain object, should you have a shared configuration for queries in an application you can define them once. The methods and properties match those on the SearchQuery interface. Boolean properties add the flag to the query while methods require that you supply one or more arguments. Also arguments supplied later in the chain will overwrite previous values. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/search\"; import { SearchQueryBuilder, SearchResults, ISearchQuery } from \"@pnp/sp/search\"; const sp = spfi(...); // basic usage let q = SearchQueryBuilder().text(\"test\").rowLimit(4).enablePhonetic; sp.search(q).then(h => { /* ... */ }); // provide a default query text at creation let q2 = SearchQueryBuilder(\"text\").rowLimit(4).enablePhonetic; const results: SearchResults = await sp.search(q2); // provide query text and a template for // shared settings across queries that can // be overwritten by individual builders const appSearchSettings: ISearchQuery = { EnablePhonetic: true, HiddenConstraints: \"reports\" }; let q3 = SearchQueryBuilder(\"test\", appSearchSettings).enableQueryRules; let q4 = SearchQueryBuilder(\"financial data\", appSearchSettings).enableSorting.enableStemming; const results2 = await sp.search(q3); const results3 = sp.search(q4); Search Suggest \u00b6 Search suggest works in much the same way as search, except against the suggest end point. It takes a string or a plain object that matches ISuggestQuery. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/search\"; import { ISuggestQuery, ISuggestResult } from \"@pnp/sp/search\"; const sp = spfi(...); const results = await sp.searchSuggest(\"test\"); const results2 = await sp.searchSuggest({ querytext: \"test\", count: 5, } as ISuggestQuery); Search Factory \u00b6 You can also configure a search or suggest query against any valid SP url using the factory methods. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/search\"; import { Search, Suggest } from \"@pnp/sp/search\"; const sp = spfi(...); // set the url for search const searcher = Search(\"https://mytenant.sharepoint.com/sites/dev\"); // this can accept any of the query types (text, ISearchQuery, or SearchQueryBuilder) const results = await searcher(\"test\"); // you can reuse the ISearch instance const results2 = await searcher(\"another query\"); // same process works for Suggest const suggester = Suggest(\"https://mytenant.sharepoint.com/sites/dev\"); const suggestions = await suggester({ querytext: \"test\" });","title":"Search"},{"location":"sp/search/#pnpspsearch","text":"Using search you can access content throughout your organization in a secure and consistent manner. The library provides support for searching and suggest - as well as some interfaces and helper classes to make building your queries and processing responses easier.","title":"@pnp/sp/search"},{"location":"sp/search/#search","text":"Search is accessed directly from the root sp object and can take either a string representing the query text, a plain object matching the ISearchQuery interface, or a SearchQueryBuilder instance. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/search\"; import { ISearchQuery, SearchResults, SearchQueryBuilder } from \"@pnp/sp/search\"; const sp = spfi(...); // text search using SharePoint default values for other parameters const results: SearchResults = await sp.search(\"test\"); console.log(results.ElapsedTime); console.log(results.RowCount); console.log(results.PrimarySearchResults); // define a search query object matching the ISearchQuery interface const results2: SearchResults = await sp.search(<ISearchQuery>{ Querytext: \"test\", RowLimit: 10, EnableInterleaving: true, }); console.log(results2.ElapsedTime); console.log(results2.RowCount); console.log(results2.PrimarySearchResults); // define a query using a builder const builder = SearchQueryBuilder(\"test\").rowLimit(10).enableInterleaving.enableQueryRules.processPersonalFavorites; const results3 = await sp.search(builder); console.log(results3.ElapsedTime); console.log(results3.RowCount); console.log(results3.PrimarySearchResults);","title":"Search"},{"location":"sp/search/#search-result-caching","text":"You can use the searchWithCaching method to enable cache support for your search results this option works with any of the options for providing a query, just replace \"search\" with \"searchWithCaching\" in your method chain and gain all the benefits of caching. The second parameter is optional and allows you to specify the cache options import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/search\"; import { ISearchQuery, SearchResults, SearchQueryBuilder } from \"@pnp/sp/search\"; const sp = spfi(...); sp.searchWithCaching({ Querytext: \"test\", RowLimit: 10, EnableInterleaving: true, } as ISearchQuery).then((r: SearchResults) => { console.log(r.ElapsedTime); console.log(r.RowCount); console.log(r.PrimarySearchResults); }); // use a query builder const builder = SearchQueryBuilder(\"test\").rowLimit(3); // supply a search query builder and caching options const results2 = await sp.searchWithCaching(builder, { key: \"mykey\", expiration: dateAdd(new Date(), \"month\", 1) }); console.log(results2.TotalRows);","title":"Search Result Caching"},{"location":"sp/search/#paging-with-searchresultsgetpage","text":"Paging is controlled by a start row and page size parameter. You can specify both arguments in your initial query however you can use the getPage method to jump to any page. The second parameter page size is optional and will use the previous RowLimit or default to 10. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/search\"; import { SearchResults, SearchQueryBuilder } from \"@pnp/sp/search\"; const sp = spfi(...); // this will hold our current results let currentResults: SearchResults = null; let page = 1; // triggered on page load or through some other means function onStart() { // construct our query that will be used throughout the paging process, likely from user input const q = SearchQueryBuilder(\"test\").rowLimit(5); const results = await sp.search(q); currentResults = results; // set the current results page = 1; // reset page counter // update UI... } // triggered by an event async function next() { currentResults = await currentResults.getPage(++page); // update UI... } // triggered by an event async function prev() { currentResults = await currentResults.getPage(--page); // update UI... }","title":"Paging with SearchResults.getPage"},{"location":"sp/search/#searchquerybuilder","text":"The SearchQueryBuilder allows you to build your queries in a fluent manner. It also accepts constructor arguments for query text and a base query plain object, should you have a shared configuration for queries in an application you can define them once. The methods and properties match those on the SearchQuery interface. Boolean properties add the flag to the query while methods require that you supply one or more arguments. Also arguments supplied later in the chain will overwrite previous values. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/search\"; import { SearchQueryBuilder, SearchResults, ISearchQuery } from \"@pnp/sp/search\"; const sp = spfi(...); // basic usage let q = SearchQueryBuilder().text(\"test\").rowLimit(4).enablePhonetic; sp.search(q).then(h => { /* ... */ }); // provide a default query text at creation let q2 = SearchQueryBuilder(\"text\").rowLimit(4).enablePhonetic; const results: SearchResults = await sp.search(q2); // provide query text and a template for // shared settings across queries that can // be overwritten by individual builders const appSearchSettings: ISearchQuery = { EnablePhonetic: true, HiddenConstraints: \"reports\" }; let q3 = SearchQueryBuilder(\"test\", appSearchSettings).enableQueryRules; let q4 = SearchQueryBuilder(\"financial data\", appSearchSettings).enableSorting.enableStemming; const results2 = await sp.search(q3); const results3 = sp.search(q4);","title":"SearchQueryBuilder"},{"location":"sp/search/#search-suggest","text":"Search suggest works in much the same way as search, except against the suggest end point. It takes a string or a plain object that matches ISuggestQuery. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/search\"; import { ISuggestQuery, ISuggestResult } from \"@pnp/sp/search\"; const sp = spfi(...); const results = await sp.searchSuggest(\"test\"); const results2 = await sp.searchSuggest({ querytext: \"test\", count: 5, } as ISuggestQuery);","title":"Search Suggest"},{"location":"sp/search/#search-factory","text":"You can also configure a search or suggest query against any valid SP url using the factory methods. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/search\"; import { Search, Suggest } from \"@pnp/sp/search\"; const sp = spfi(...); // set the url for search const searcher = Search(\"https://mytenant.sharepoint.com/sites/dev\"); // this can accept any of the query types (text, ISearchQuery, or SearchQueryBuilder) const results = await searcher(\"test\"); // you can reuse the ISearch instance const results2 = await searcher(\"another query\"); // same process works for Suggest const suggester = Suggest(\"https://mytenant.sharepoint.com/sites/dev\"); const suggestions = await suggester({ querytext: \"test\" });","title":"Search Factory"},{"location":"sp/security/","text":"@pnp/sp/security \u00b6 There are four levels where you can break inheritance and assign security: Site, Web, List, Item. All four of these objects share a common set of methods. Because of this we are showing in the examples below usage of these methods for an IList instance, but they apply across all four securable objects. In addition to the shared methods, some types have unique methods which are listed below. Site permissions are managed on the root web of the site collection. A Note on Selective Imports for Security \u00b6 Because the method are shared you can opt to import only the methods for one of the instances. import \"@pnp/sp/security/web\"; import \"@pnp/sp/security/list\"; import \"@pnp/sp/security/item\"; Possibly useful if you are trying to hyper-optimize for bundle size but it is just as easy to import the whole module: import \"@pnp/sp/security\"; Securable Methods \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/security/list\"; import \"@pnp/sp/site-users/web\"; import { IList } from \"@pnp/sp/lists\"; import { PermissionKind } from \"@pnp/sp/security\"; const sp = spfi(...); // ensure we have a list const ler = await sp.web.lists.ensure(\"SecurityTestingList\"); const list: IList = ler.list; // role assignments (see section below) await list.roleAssignments(); // data will represent one of the possible parents Site, Web, or List const data = await list.firstUniqueAncestorSecurableObject(); // getUserEffectivePermissions const users = await sp.web.siteUsers.top(1).select(\"LoginName\")(); const perms = await list.getUserEffectivePermissions(users[0].LoginName); // getCurrentUserEffectivePermissions const perms2 = list.getCurrentUserEffectivePermissions(); // userHasPermissions const v: boolean = list.userHasPermissions(users[0].LoginName, PermissionKind.AddListItems) // currentUserHasPermissions const v2: boolean = list.currentUserHasPermissions(PermissionKind.AddListItems) // breakRoleInheritance await list.breakRoleInheritance(); // copy existing permissions await list.breakRoleInheritance(true); // copy existing permissions and reset all child securables to the new permissions await list.breakRoleInheritance(true, true); // resetRoleInheritance await list.resetRoleInheritance(); Web Specific methods \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/security/web\"; const sp = spfi(...); // role definitions (see section below) const defs = await sp.web.roleDefinitions(); Role Assignments \u00b6 Allows you to list and manipulate the set of role assignments for the given securable. Again we show usage using list, but the examples apply to web and item as well. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/security/web\"; import \"@pnp/sp/site-users/web\"; import { IList } from \"@pnp/sp/lists\"; import { PermissionKind } from \"@pnp/sp/security\"; const sp = spfi(...); // ensure we have a list const ler = await sp.web.lists.ensure(\"SecurityTestingList\"); const list: IList = ler.list; // list role assignments const assignments = await list.roleAssignments(); // add a role assignment const defs = await sp.web.roleDefinitions(); const user = await sp.web.currentUser(); const r = await list.roleAssignments.add(user.Id, defs[0].Id); // remove a role assignment const { Id: fullRoleDefId } = await list.roleDefinitions.getByName('Full Control')(); const ras = await list.roleAssignments(); // filter/find the role assignment you want to remove // here we just grab the first const ra = ras.find(v => true); const r = await list.roleAssignments.remove(ra.PrincipalId, fullRoleDefId); // read role assignment info const info = await list.roleAssignments.getById(ra.Id)(); // get the groups const info2 = await list.roleAssignments.getById(ra.Id).groups(); // get the bindings const info3 = await list.roleAssignments.getById(ra.Id).bindings(); // delete a role assignment (same as remove) const ras = await list.roleAssignments(); // filter/find the role assignment you want to remove // here we just grab the first const ra = ras.find(v => true); // delete it await list.roleAssignments.getById(ra.Id).delete(); Role Definitions \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/security/web\"; const sp = spfi(...); // read role definitions const defs = await sp.web.roleDefinitions(); // get by id const def = await sp.web.roleDefinitions.getById(5)(); const def = await sp.web.roleDefinitions.getById(5).select(\"Name\", \"Order\")(); // get by name const def = await sp.web.roleDefinitions.getByName(\"Full Control\")(); const def = await sp.web.roleDefinitions.getByName(\"Full Control\").select(\"Name\", \"Order\")(); // get by type const def = await sp.web.roleDefinitions.getByType(5)(); const def = await sp.web.roleDefinitions.getByType(5).select(\"Name\", \"Order\")(); // add // name The new role definition's name // description The new role definition's description // order The order in which the role definition appears // basePermissions The permissions mask for this role definition const rdar = await sp.web.roleDefinitions.add(\"title\", \"description\", 99, { High: 1, Low: 2 }); // the following methods work on a single role def, you can use any of the three getBy methods, here we use getById as an example // delete await sp.web.roleDefinitions.getById(5).delete(); // update const res = sp.web.roleDefinitions.getById(5).update({ Name: \"New Name\" });","title":"Security"},{"location":"sp/security/#pnpspsecurity","text":"There are four levels where you can break inheritance and assign security: Site, Web, List, Item. All four of these objects share a common set of methods. Because of this we are showing in the examples below usage of these methods for an IList instance, but they apply across all four securable objects. In addition to the shared methods, some types have unique methods which are listed below. Site permissions are managed on the root web of the site collection.","title":"@pnp/sp/security"},{"location":"sp/security/#a-note-on-selective-imports-for-security","text":"Because the method are shared you can opt to import only the methods for one of the instances. import \"@pnp/sp/security/web\"; import \"@pnp/sp/security/list\"; import \"@pnp/sp/security/item\"; Possibly useful if you are trying to hyper-optimize for bundle size but it is just as easy to import the whole module: import \"@pnp/sp/security\";","title":"A Note on Selective Imports for Security"},{"location":"sp/security/#securable-methods","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/security/list\"; import \"@pnp/sp/site-users/web\"; import { IList } from \"@pnp/sp/lists\"; import { PermissionKind } from \"@pnp/sp/security\"; const sp = spfi(...); // ensure we have a list const ler = await sp.web.lists.ensure(\"SecurityTestingList\"); const list: IList = ler.list; // role assignments (see section below) await list.roleAssignments(); // data will represent one of the possible parents Site, Web, or List const data = await list.firstUniqueAncestorSecurableObject(); // getUserEffectivePermissions const users = await sp.web.siteUsers.top(1).select(\"LoginName\")(); const perms = await list.getUserEffectivePermissions(users[0].LoginName); // getCurrentUserEffectivePermissions const perms2 = list.getCurrentUserEffectivePermissions(); // userHasPermissions const v: boolean = list.userHasPermissions(users[0].LoginName, PermissionKind.AddListItems) // currentUserHasPermissions const v2: boolean = list.currentUserHasPermissions(PermissionKind.AddListItems) // breakRoleInheritance await list.breakRoleInheritance(); // copy existing permissions await list.breakRoleInheritance(true); // copy existing permissions and reset all child securables to the new permissions await list.breakRoleInheritance(true, true); // resetRoleInheritance await list.resetRoleInheritance();","title":"Securable Methods"},{"location":"sp/security/#web-specific-methods","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/security/web\"; const sp = spfi(...); // role definitions (see section below) const defs = await sp.web.roleDefinitions();","title":"Web Specific methods"},{"location":"sp/security/#role-assignments","text":"Allows you to list and manipulate the set of role assignments for the given securable. Again we show usage using list, but the examples apply to web and item as well. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/security/web\"; import \"@pnp/sp/site-users/web\"; import { IList } from \"@pnp/sp/lists\"; import { PermissionKind } from \"@pnp/sp/security\"; const sp = spfi(...); // ensure we have a list const ler = await sp.web.lists.ensure(\"SecurityTestingList\"); const list: IList = ler.list; // list role assignments const assignments = await list.roleAssignments(); // add a role assignment const defs = await sp.web.roleDefinitions(); const user = await sp.web.currentUser(); const r = await list.roleAssignments.add(user.Id, defs[0].Id); // remove a role assignment const { Id: fullRoleDefId } = await list.roleDefinitions.getByName('Full Control')(); const ras = await list.roleAssignments(); // filter/find the role assignment you want to remove // here we just grab the first const ra = ras.find(v => true); const r = await list.roleAssignments.remove(ra.PrincipalId, fullRoleDefId); // read role assignment info const info = await list.roleAssignments.getById(ra.Id)(); // get the groups const info2 = await list.roleAssignments.getById(ra.Id).groups(); // get the bindings const info3 = await list.roleAssignments.getById(ra.Id).bindings(); // delete a role assignment (same as remove) const ras = await list.roleAssignments(); // filter/find the role assignment you want to remove // here we just grab the first const ra = ras.find(v => true); // delete it await list.roleAssignments.getById(ra.Id).delete();","title":"Role Assignments"},{"location":"sp/security/#role-definitions","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/security/web\"; const sp = spfi(...); // read role definitions const defs = await sp.web.roleDefinitions(); // get by id const def = await sp.web.roleDefinitions.getById(5)(); const def = await sp.web.roleDefinitions.getById(5).select(\"Name\", \"Order\")(); // get by name const def = await sp.web.roleDefinitions.getByName(\"Full Control\")(); const def = await sp.web.roleDefinitions.getByName(\"Full Control\").select(\"Name\", \"Order\")(); // get by type const def = await sp.web.roleDefinitions.getByType(5)(); const def = await sp.web.roleDefinitions.getByType(5).select(\"Name\", \"Order\")(); // add // name The new role definition's name // description The new role definition's description // order The order in which the role definition appears // basePermissions The permissions mask for this role definition const rdar = await sp.web.roleDefinitions.add(\"title\", \"description\", 99, { High: 1, Low: 2 }); // the following methods work on a single role def, you can use any of the three getBy methods, here we use getById as an example // delete await sp.web.roleDefinitions.getById(5).delete(); // update const res = sp.web.roleDefinitions.getById(5).update({ Name: \"New Name\" });","title":"Role Definitions"},{"location":"sp/sharing/","text":"@pnp/sp/sharing \u00b6 Note: This API is still considered \"beta\" meaning it may change and some behaviors may differ across tenants by version. It is also supported only in SharePoint Online. One of the newer abilities in SharePoint is the ability to share webs, files, or folders with both internal and external folks. It is important to remember that these settings are managed at the tenant level and ? override anything you may supply as an argument to these methods. If you receive an InvalidOperationException when using these methods please check your tenant sharing settings to ensure sharing is not blocked before ?submitting an issue. Imports \u00b6 In previous versions of this library the sharing methods were part of the inheritance stack for SharePointQueryable objects. Starting with v2 this is no longer the case and they are now selectively importable. There are four objects within the SharePoint hierarchy that support sharing: Item, File, Folder, and Web. You can import the sharing methods for all of them, or for individual objects. Import All \u00b6 To import and attach the sharing methods to all four of the sharable types include all of the sharing sub module: import \"@pnp/sp/sharing\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; import { spfi } from \"@pnp/sp\"; const sp = spfi(...); const user = await sp.web.siteUsers.getByEmail(\"user@site.com\")(); const r = await sp.web.shareWith(user.LoginName); Selective Import \u00b6 Import only the web's sharing methods into the library import \"@pnp/sp/sharing/web\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; import { spfi } from \"@pnp/sp\"; const sp = spfi(...); const user = await sp.web.siteUsers.getByEmail(\"user@site.com\")(); const r = await sp.web.shareWith(user.LoginName); getShareLink \u00b6 Applies to: Item, Folder, File Creates a sharing link for the given resource with an optional expiration. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import { SharingLinkKind, IShareLinkResponse } from \"@pnp/sp/sharing\"; import { dateAdd } from \"@pnp/core\"; const sp = spfi(...); const result = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/folder1\").getShareLink(SharingLinkKind.AnonymousView); console.log(JSON.stringify(result, null, 2)); const result2 = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/folder1\").getShareLink(SharingLinkKind.AnonymousView, dateAdd(new Date(), \"day\", 5)); console.log(JSON.stringify(result2, null, 2)); shareWith \u00b6 Applies to: Item, Folder, File, Web Shares the given resource with the specified permissions (View or Edit) and optionally sends an email to the users. You can supply a single string for the loginnames parameter or an array of loginnames . The folder method takes an optional parameter \"shareEverything\" which determines if the shared permissions are pushed down to all items in the folder, even those with unique permissions. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import \"@pnp/sp/folders/web\"; import \"@pnp/sp/files/web\"; import { ISharingResult, SharingRole } from \"@pnp/sp/sharing\"; const sp = spfi(...); const result = await sp.web.shareWith(\"i:0#.f|membership|user@site.com\"); console.log(JSON.stringify(result, null, 2)); // Share and allow editing const result2 = await sp.web.shareWith(\"i:0#.f|membership|user@site.com\", SharingRole.Edit); console.log(JSON.stringify(result2, null, 2)); // share folder const result3 = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/folder1\").shareWith(\"i:0#.f|membership|user@site.com\"); // Share folder with edit permissions, and provide params for requireSignin and propagateAcl (apply to all children) await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").shareWith(\"i:0#.f|membership|user@site.com\", SharingRole.Edit, true, true); // Share a file await sp.web.getFileByServerRelativeUrl(\"/sites/dev/Shared Documents/test.txt\").shareWith(\"i:0#.f|membership|user@site.com\"); // Share a file with edit permissions await sp.web.getFileByServerRelativeUrl(\"/sites/dev/Shared Documents/test.txt\").shareWith(\"i:0#.f|membership|user@site.com\", SharingRole.Edit); shareObject & shareObjectRaw \u00b6 Applies to: Web Allows you to share any shareable object in a web by providing the appropriate parameters. These two methods differ in that shareObject will try and fix up your query based on the supplied parameters where shareObjectRaw will send your supplied json object directly to the server. The later method is provided for the greatest amount of flexibility. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import { ISharingResult, SharingRole } from \"@pnp/sp/sharing\"; const sp = spfi(...); // Share an object in this web const result = await sp.web.shareObject(\"https://mysite.sharepoint.com/sites/dev/Docs/test.txt\", \"i:0#.f|membership|user@site.com\", SharingRole.View); // Share an object with all settings available await sp.web.shareObjectRaw({ url: \"https://mysite.sharepoint.com/sites/dev/Docs/test.txt\", peoplePickerInput: [{ Key: \"i:0#.f|membership|user@site.com\" }], roleValue: \"role: 1973741327\", groupId: 0, propagateAcl: false, sendEmail: true, includeAnonymousLinkInEmail: false, emailSubject: \"subject\", emailBody: \"body\", useSimplifiedRoles: true, }); unshareObject \u00b6 Applies to: Web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import { ISharingResult } from \"@pnp/sp/sharing\"; const sp = spfi(...); const result = await sp.web.unshareObject(\"https://mysite.sharepoint.com/sites/dev/Docs/test.txt\"); checkSharingPermissions \u00b6 Applies to: Item, Folder, File Checks Permissions on the list of Users and returns back role the users have on the Item. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing/folders\"; import \"@pnp/sp/folders/web\"; import { SharingEntityPermission } from \"@pnp/sp/sharing\"; const sp = spfi(...); // check the sharing permissions for a folder const perms = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").checkSharingPermissions([{ alias: \"i:0#.f|membership|user@site.com\" }]); getSharingInformation \u00b6 Applies to: Item, Folder, File Get Sharing Information. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import \"@pnp/sp/folders\"; import { ISharingInformation } from \"@pnp/sp/sharing\"; const sp = spfi(...); // Get the sharing information for a folder const info = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").getSharingInformation(); getObjectSharingSettings \u00b6 Applies to: Item, Folder, File Gets the sharing settings import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import \"@pnp/sp/folders\"; import { IObjectSharingSettings } from \"@pnp/sp/sharing\"; const sp = spfi(...); // Gets the sharing object settings const settings: IObjectSharingSettings = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").getObjectSharingSettings(); unshare \u00b6 Applies to: Item, Folder, File Unshares a given resource import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import \"@pnp/sp/folders\"; import { ISharingResult } from \"@pnp/sp/sharing\"; const sp = spfi(...); const result: ISharingResult = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").unshare(); deleteSharingLinkByKind \u00b6 Applies to: Item, Folder, File import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import \"@pnp/sp/folders\"; import { ISharingResult, SharingLinkKind } from \"@pnp/sp/sharing\"; const sp = spfi(...); const result: ISharingResult = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").deleteSharingLinkByKind(SharingLinkKind.AnonymousEdit); unshareLink \u00b6 Applies to: Item, Folder, File import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import \"@pnp/sp/folders\"; import { SharingLinkKind } from \"@pnp/sp/sharing\"; const sp = spfi(...); await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").unshareLink(SharingLinkKind.AnonymousEdit); // specify the sharing link id if available await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").unshareLink(SharingLinkKind.AnonymousEdit, \"12345\");","title":"Sharing"},{"location":"sp/sharing/#pnpspsharing","text":"Note: This API is still considered \"beta\" meaning it may change and some behaviors may differ across tenants by version. It is also supported only in SharePoint Online. One of the newer abilities in SharePoint is the ability to share webs, files, or folders with both internal and external folks. It is important to remember that these settings are managed at the tenant level and ? override anything you may supply as an argument to these methods. If you receive an InvalidOperationException when using these methods please check your tenant sharing settings to ensure sharing is not blocked before ?submitting an issue.","title":"@pnp/sp/sharing"},{"location":"sp/sharing/#imports","text":"In previous versions of this library the sharing methods were part of the inheritance stack for SharePointQueryable objects. Starting with v2 this is no longer the case and they are now selectively importable. There are four objects within the SharePoint hierarchy that support sharing: Item, File, Folder, and Web. You can import the sharing methods for all of them, or for individual objects.","title":"Imports"},{"location":"sp/sharing/#import-all","text":"To import and attach the sharing methods to all four of the sharable types include all of the sharing sub module: import \"@pnp/sp/sharing\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; import { spfi } from \"@pnp/sp\"; const sp = spfi(...); const user = await sp.web.siteUsers.getByEmail(\"user@site.com\")(); const r = await sp.web.shareWith(user.LoginName);","title":"Import All"},{"location":"sp/sharing/#selective-import","text":"Import only the web's sharing methods into the library import \"@pnp/sp/sharing/web\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; import { spfi } from \"@pnp/sp\"; const sp = spfi(...); const user = await sp.web.siteUsers.getByEmail(\"user@site.com\")(); const r = await sp.web.shareWith(user.LoginName);","title":"Selective Import"},{"location":"sp/sharing/#getsharelink","text":"Applies to: Item, Folder, File Creates a sharing link for the given resource with an optional expiration. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import { SharingLinkKind, IShareLinkResponse } from \"@pnp/sp/sharing\"; import { dateAdd } from \"@pnp/core\"; const sp = spfi(...); const result = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/folder1\").getShareLink(SharingLinkKind.AnonymousView); console.log(JSON.stringify(result, null, 2)); const result2 = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/folder1\").getShareLink(SharingLinkKind.AnonymousView, dateAdd(new Date(), \"day\", 5)); console.log(JSON.stringify(result2, null, 2));","title":"getShareLink"},{"location":"sp/sharing/#sharewith","text":"Applies to: Item, Folder, File, Web Shares the given resource with the specified permissions (View or Edit) and optionally sends an email to the users. You can supply a single string for the loginnames parameter or an array of loginnames . The folder method takes an optional parameter \"shareEverything\" which determines if the shared permissions are pushed down to all items in the folder, even those with unique permissions. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import \"@pnp/sp/folders/web\"; import \"@pnp/sp/files/web\"; import { ISharingResult, SharingRole } from \"@pnp/sp/sharing\"; const sp = spfi(...); const result = await sp.web.shareWith(\"i:0#.f|membership|user@site.com\"); console.log(JSON.stringify(result, null, 2)); // Share and allow editing const result2 = await sp.web.shareWith(\"i:0#.f|membership|user@site.com\", SharingRole.Edit); console.log(JSON.stringify(result2, null, 2)); // share folder const result3 = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/folder1\").shareWith(\"i:0#.f|membership|user@site.com\"); // Share folder with edit permissions, and provide params for requireSignin and propagateAcl (apply to all children) await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").shareWith(\"i:0#.f|membership|user@site.com\", SharingRole.Edit, true, true); // Share a file await sp.web.getFileByServerRelativeUrl(\"/sites/dev/Shared Documents/test.txt\").shareWith(\"i:0#.f|membership|user@site.com\"); // Share a file with edit permissions await sp.web.getFileByServerRelativeUrl(\"/sites/dev/Shared Documents/test.txt\").shareWith(\"i:0#.f|membership|user@site.com\", SharingRole.Edit);","title":"shareWith"},{"location":"sp/sharing/#shareobject-shareobjectraw","text":"Applies to: Web Allows you to share any shareable object in a web by providing the appropriate parameters. These two methods differ in that shareObject will try and fix up your query based on the supplied parameters where shareObjectRaw will send your supplied json object directly to the server. The later method is provided for the greatest amount of flexibility. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import { ISharingResult, SharingRole } from \"@pnp/sp/sharing\"; const sp = spfi(...); // Share an object in this web const result = await sp.web.shareObject(\"https://mysite.sharepoint.com/sites/dev/Docs/test.txt\", \"i:0#.f|membership|user@site.com\", SharingRole.View); // Share an object with all settings available await sp.web.shareObjectRaw({ url: \"https://mysite.sharepoint.com/sites/dev/Docs/test.txt\", peoplePickerInput: [{ Key: \"i:0#.f|membership|user@site.com\" }], roleValue: \"role: 1973741327\", groupId: 0, propagateAcl: false, sendEmail: true, includeAnonymousLinkInEmail: false, emailSubject: \"subject\", emailBody: \"body\", useSimplifiedRoles: true, });","title":"shareObject &amp; shareObjectRaw"},{"location":"sp/sharing/#unshareobject","text":"Applies to: Web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import { ISharingResult } from \"@pnp/sp/sharing\"; const sp = spfi(...); const result = await sp.web.unshareObject(\"https://mysite.sharepoint.com/sites/dev/Docs/test.txt\");","title":"unshareObject"},{"location":"sp/sharing/#checksharingpermissions","text":"Applies to: Item, Folder, File Checks Permissions on the list of Users and returns back role the users have on the Item. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing/folders\"; import \"@pnp/sp/folders/web\"; import { SharingEntityPermission } from \"@pnp/sp/sharing\"; const sp = spfi(...); // check the sharing permissions for a folder const perms = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").checkSharingPermissions([{ alias: \"i:0#.f|membership|user@site.com\" }]);","title":"checkSharingPermissions"},{"location":"sp/sharing/#getsharinginformation","text":"Applies to: Item, Folder, File Get Sharing Information. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import \"@pnp/sp/folders\"; import { ISharingInformation } from \"@pnp/sp/sharing\"; const sp = spfi(...); // Get the sharing information for a folder const info = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").getSharingInformation();","title":"getSharingInformation"},{"location":"sp/sharing/#getobjectsharingsettings","text":"Applies to: Item, Folder, File Gets the sharing settings import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import \"@pnp/sp/folders\"; import { IObjectSharingSettings } from \"@pnp/sp/sharing\"; const sp = spfi(...); // Gets the sharing object settings const settings: IObjectSharingSettings = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").getObjectSharingSettings();","title":"getObjectSharingSettings"},{"location":"sp/sharing/#unshare","text":"Applies to: Item, Folder, File Unshares a given resource import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import \"@pnp/sp/folders\"; import { ISharingResult } from \"@pnp/sp/sharing\"; const sp = spfi(...); const result: ISharingResult = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").unshare();","title":"unshare"},{"location":"sp/sharing/#deletesharinglinkbykind","text":"Applies to: Item, Folder, File import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import \"@pnp/sp/folders\"; import { ISharingResult, SharingLinkKind } from \"@pnp/sp/sharing\"; const sp = spfi(...); const result: ISharingResult = await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").deleteSharingLinkByKind(SharingLinkKind.AnonymousEdit);","title":"deleteSharingLinkByKind"},{"location":"sp/sharing/#unsharelink","text":"Applies to: Item, Folder, File import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sharing\"; import \"@pnp/sp/folders\"; import { SharingLinkKind } from \"@pnp/sp/sharing\"; const sp = spfi(...); await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").unshareLink(SharingLinkKind.AnonymousEdit); // specify the sharing link id if available await sp.web.getFolderByServerRelativeUrl(\"/sites/dev/Shared Documents/test\").unshareLink(SharingLinkKind.AnonymousEdit, \"12345\");","title":"unshareLink"},{"location":"sp/site-designs/","text":"@pnp/sp/site-designs \u00b6 You can create site designs to provide reusable lists, themes, layouts, pages, or custom actions so that your users can quickly build new SharePoint sites with the features they need. Check out SharePoint site design and site script overview for more information. Site Designs \u00b6 Create a new site design \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-designs\"; const sp = spfi(...); // WebTemplate: 64 Team site template, 68 Communication site template const siteDesign = await sp.siteDesigns.createSiteDesign({ SiteScriptIds: [\"884ed56b-1aab-4653-95cf-4be0bfa5ef0a\"], Title: \"SiteDesign001\", WebTemplate: \"64\", }); console.log(siteDesign.Title); Applying a site design to a site \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-designs\"; const sp = spfi(...); // Limited to 30 actions in a site script, but runs synchronously await sp.siteDesigns.applySiteDesign(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\",\"https://contoso.sharepoint.com/sites/teamsite-pnpjs001\"); // Better use the following method for 300 actions in a site script const task = await sp.web.addSiteDesignTask(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\"); Retrieval \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-designs\"; const sp = spfi(...); // Retrieving all site designs const allSiteDesigns = await sp.siteDesigns.getSiteDesigns(); console.log(`Total site designs: ${allSiteDesigns.length}`); // Retrieving a single site design by Id const siteDesign = await sp.siteDesigns.getSiteDesignMetadata(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\"); console.log(siteDesign.Title); Update and delete \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-designs\"; const sp = spfi(...); // Update const updatedSiteDesign = await sp.siteDesigns.updateSiteDesign({ Id: \"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\", Title: \"SiteDesignUpdatedTitle001\" }); // Delete await sp.siteDesigns.deleteSiteDesign(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\"); Setting Rights/Permissions \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-designs\"; const sp = spfi(...); // Get const rights = await sp.siteDesigns.getSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\"); console.log(rights.length > 0 ? rights[0].PrincipalName : \"\"); // Grant await sp.siteDesigns.grantSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\", [\"user@contoso.onmicrosoft.com\"]); // Revoke await sp.siteDesigns.revokeSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\", [\"user@contoso.onmicrosoft.com\"]); // Reset all view rights const rights = await sp.siteDesigns.getSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\"); await sp.siteDesigns.revokeSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\", rights.map(u => u.PrincipalName)); Get a history of site designs that have run on a web \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-designs\"; const sp = spfi(...); const runs = await sp.web.getSiteDesignRuns(); const runs2 = await sp.siteDesigns.getSiteDesignRun(\"https://TENANT.sharepoint.com/sites/mysite\"); // Get runs specific to a site design const runs3 = await sp.web.getSiteDesignRuns(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\"); const runs4 = await sp.siteDesigns.getSiteDesignRun(\"https://TENANT.sharepoint.com/sites/mysite\", \"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\"); // For more information about the site script actions const runStatus = await sp.web.getSiteDesignRunStatus(runs[0].ID); const runStatus2 = await sp.siteDesigns.getSiteDesignRunStatus(\"https://TENANT.sharepoint.com/sites/mysite\", runs[0].ID);","title":"Site Designs"},{"location":"sp/site-designs/#pnpspsite-designs","text":"You can create site designs to provide reusable lists, themes, layouts, pages, or custom actions so that your users can quickly build new SharePoint sites with the features they need. Check out SharePoint site design and site script overview for more information.","title":"@pnp/sp/site-designs"},{"location":"sp/site-designs/#site-designs","text":"","title":"Site Designs"},{"location":"sp/site-designs/#create-a-new-site-design","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-designs\"; const sp = spfi(...); // WebTemplate: 64 Team site template, 68 Communication site template const siteDesign = await sp.siteDesigns.createSiteDesign({ SiteScriptIds: [\"884ed56b-1aab-4653-95cf-4be0bfa5ef0a\"], Title: \"SiteDesign001\", WebTemplate: \"64\", }); console.log(siteDesign.Title);","title":"Create a new site design"},{"location":"sp/site-designs/#applying-a-site-design-to-a-site","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-designs\"; const sp = spfi(...); // Limited to 30 actions in a site script, but runs synchronously await sp.siteDesigns.applySiteDesign(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\",\"https://contoso.sharepoint.com/sites/teamsite-pnpjs001\"); // Better use the following method for 300 actions in a site script const task = await sp.web.addSiteDesignTask(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\");","title":"Applying a site design to a site"},{"location":"sp/site-designs/#retrieval","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-designs\"; const sp = spfi(...); // Retrieving all site designs const allSiteDesigns = await sp.siteDesigns.getSiteDesigns(); console.log(`Total site designs: ${allSiteDesigns.length}`); // Retrieving a single site design by Id const siteDesign = await sp.siteDesigns.getSiteDesignMetadata(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\"); console.log(siteDesign.Title);","title":"Retrieval"},{"location":"sp/site-designs/#update-and-delete","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-designs\"; const sp = spfi(...); // Update const updatedSiteDesign = await sp.siteDesigns.updateSiteDesign({ Id: \"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\", Title: \"SiteDesignUpdatedTitle001\" }); // Delete await sp.siteDesigns.deleteSiteDesign(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\");","title":"Update and delete"},{"location":"sp/site-designs/#setting-rightspermissions","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-designs\"; const sp = spfi(...); // Get const rights = await sp.siteDesigns.getSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\"); console.log(rights.length > 0 ? rights[0].PrincipalName : \"\"); // Grant await sp.siteDesigns.grantSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\", [\"user@contoso.onmicrosoft.com\"]); // Revoke await sp.siteDesigns.revokeSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\", [\"user@contoso.onmicrosoft.com\"]); // Reset all view rights const rights = await sp.siteDesigns.getSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\"); await sp.siteDesigns.revokeSiteDesignRights(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\", rights.map(u => u.PrincipalName));","title":"Setting Rights/Permissions"},{"location":"sp/site-designs/#get-a-history-of-site-designs-that-have-run-on-a-web","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-designs\"; const sp = spfi(...); const runs = await sp.web.getSiteDesignRuns(); const runs2 = await sp.siteDesigns.getSiteDesignRun(\"https://TENANT.sharepoint.com/sites/mysite\"); // Get runs specific to a site design const runs3 = await sp.web.getSiteDesignRuns(\"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\"); const runs4 = await sp.siteDesigns.getSiteDesignRun(\"https://TENANT.sharepoint.com/sites/mysite\", \"75b9d8fe-4381-45d9-88c6-b03f483ae6a8\"); // For more information about the site script actions const runStatus = await sp.web.getSiteDesignRunStatus(runs[0].ID); const runStatus2 = await sp.siteDesigns.getSiteDesignRunStatus(\"https://TENANT.sharepoint.com/sites/mysite\", runs[0].ID);","title":"Get a history of site designs that have run on a web"},{"location":"sp/site-groups/","text":"@pnp/sp/site-groups \u00b6 The site groups module provides methods to manage groups for a sharepoint site. ISiteGroups \u00b6 Get all site groups \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); // gets all site groups of the web const groups = await sp.web.siteGroups(); Get the associated groups of a web \u00b6 You can get the associated Owner, Member and Visitor groups of a web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); // Gets the associated visitors group of a web const visitorGroup = await sp.web.associatedVisitorGroup(); // Gets the associated members group of a web const memberGroup = await sp.web.associatedMemberGroup(); // Gets the associated owners group of a web const ownerGroup = await sp.web.associatedOwnerGroup(); Create the default associated groups for a web \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); // Breaks permission inheritance and creates the default associated groups for the web // Login name of the owner const owner1 = \"owner@example.onmicrosoft.com\"; // Specify true, the permissions should be copied from the current parent scope, else false const copyRoleAssignments = false; // Specify true to make all child securable objects inherit role assignments from the current object const clearSubScopes = true; await sp.web.createDefaultAssociatedGroups(\"PnP Site\", owner1, copyRoleAssignments, clearSubScopes); Create a new site group \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); // Creates a new site group with the specified title await sp.web.siteGroups.add({\"Title\":\"new group name\"}); ISiteGroup \u00b6 <<<<<<< HEAD |Scenario|Import Statement| |--|--| |Selective 2|import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups\";| |Selective 3|import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\";| |Preset: All|import {sp, SiteGroups, SiteGroup } from \"@pnp/sp/presets/all\";| ======= 52a91d788431066d44d536df1352b6ce855675e3 Getting and updating the groups of a sharepoint web \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups\"; const sp = spfi(...); // get the group using a group id const groupID = 33; let grp = await sp.web.siteGroups.getById(groupID)(); // get the group using the group's name const groupName = \"ClassicTeam Visitors\"; grp = await sp.web.siteGroups.getByName(groupName)(); // update a group await sp.web.siteGroups.getById(groupID).update({\"Title\": \"New Group Title\"}); // delete a group from the site using group id await sp.web.siteGroups.removeById(groupID); // delete a group from the site using group name await sp.web.siteGroups.removeByLoginName(groupName); Getting all users of a group \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups\"; const sp = spfi(...); // get all users of group const groupID = 7; const users = await sp.web.siteGroups.getById(groupID).users(); Updating the owner of a site group \u00b6 Unfortunately for now setting the owner of a group as another or same SharePoint group is currently unsupported in REST. Setting the owner as a user is supported. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups\"; const sp = spfi(...); // Update the owner with a user id await sp.web.siteGroups.getById(7).setUserAsOwner(4);","title":"Site Groups"},{"location":"sp/site-groups/#pnpspsite-groups","text":"The site groups module provides methods to manage groups for a sharepoint site.","title":"@pnp/sp/site-groups"},{"location":"sp/site-groups/#isitegroups","text":"","title":"ISiteGroups"},{"location":"sp/site-groups/#get-all-site-groups","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); // gets all site groups of the web const groups = await sp.web.siteGroups();","title":"Get all site groups"},{"location":"sp/site-groups/#get-the-associated-groups-of-a-web","text":"You can get the associated Owner, Member and Visitor groups of a web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); // Gets the associated visitors group of a web const visitorGroup = await sp.web.associatedVisitorGroup(); // Gets the associated members group of a web const memberGroup = await sp.web.associatedMemberGroup(); // Gets the associated owners group of a web const ownerGroup = await sp.web.associatedOwnerGroup();","title":"Get the associated groups of a web"},{"location":"sp/site-groups/#create-the-default-associated-groups-for-a-web","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); // Breaks permission inheritance and creates the default associated groups for the web // Login name of the owner const owner1 = \"owner@example.onmicrosoft.com\"; // Specify true, the permissions should be copied from the current parent scope, else false const copyRoleAssignments = false; // Specify true to make all child securable objects inherit role assignments from the current object const clearSubScopes = true; await sp.web.createDefaultAssociatedGroups(\"PnP Site\", owner1, copyRoleAssignments, clearSubScopes);","title":"Create the default associated groups for a web"},{"location":"sp/site-groups/#create-a-new-site-group","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); // Creates a new site group with the specified title await sp.web.siteGroups.add({\"Title\":\"new group name\"});","title":"Create a new site group"},{"location":"sp/site-groups/#isitegroup","text":"<<<<<<< HEAD |Scenario|Import Statement| |--|--| |Selective 2|import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups\";| |Selective 3|import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\";| |Preset: All|import {sp, SiteGroups, SiteGroup } from \"@pnp/sp/presets/all\";| ======= 52a91d788431066d44d536df1352b6ce855675e3","title":"ISiteGroup"},{"location":"sp/site-groups/#getting-and-updating-the-groups-of-a-sharepoint-web","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups\"; const sp = spfi(...); // get the group using a group id const groupID = 33; let grp = await sp.web.siteGroups.getById(groupID)(); // get the group using the group's name const groupName = \"ClassicTeam Visitors\"; grp = await sp.web.siteGroups.getByName(groupName)(); // update a group await sp.web.siteGroups.getById(groupID).update({\"Title\": \"New Group Title\"}); // delete a group from the site using group id await sp.web.siteGroups.removeById(groupID); // delete a group from the site using group name await sp.web.siteGroups.removeByLoginName(groupName);","title":"Getting and updating the groups of a sharepoint web"},{"location":"sp/site-groups/#getting-all-users-of-a-group","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups\"; const sp = spfi(...); // get all users of group const groupID = 7; const users = await sp.web.siteGroups.getById(groupID).users();","title":"Getting all users of a group"},{"location":"sp/site-groups/#updating-the-owner-of-a-site-group","text":"Unfortunately for now setting the owner of a group as another or same SharePoint group is currently unsupported in REST. Setting the owner as a user is supported. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups\"; const sp = spfi(...); // Update the owner with a user id await sp.web.siteGroups.getById(7).setUserAsOwner(4);","title":"Updating the owner of a site group"},{"location":"sp/site-scripts/","text":"@pnp/sp/site-scripts \u00b6 Create a new site script \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-scripts\"; const sp = spfi(...); const sitescriptContent = { \"$schema\": \"schema.json\", \"actions\": [ { \"themeName\": \"Theme Name 123\", \"verb\": \"applyTheme\", }, ], \"bindata\": {}, \"version\": 1, }; const siteScript = await sp.siteScripts.createSiteScript(\"Title\", \"description\", sitescriptContent); console.log(siteScript.Title); Retrieval \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-scripts\"; const sp = spfi(...); // Retrieving all site scripts const allSiteScripts = await sp.siteScripts.getSiteScripts(); console.log(allSiteScripts.length > 0 ? allSiteScripts[0].Title : \"\"); // Retrieving a single site script by Id const siteScript = await sp.siteScripts.getSiteScriptMetadata(\"884ed56b-1aab-4653-95cf-4be0bfa5ef0a\"); console.log(siteScript.Title); Update and delete \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-scripts\"; const sp = spfi(...); // Update const updatedSiteScript = await sp.siteScripts.updateSiteScript({ Id: \"884ed56b-1aab-4653-95cf-4be0bfa5ef0a\", Title: \"New Title\" }); console.log(updatedSiteScript.Title); // Delete await sp.siteScripts.deleteSiteScript(\"884ed56b-1aab-4653-95cf-4be0bfa5ef0a\"); Get site script from a list \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-scripts\"; const sp = spfi(...); // Using the absolute URL of the list const ss = await sp.siteScripts.getSiteScriptFromList(\"https://TENANT.sharepoint.com/Lists/mylist\"); // Using the PnPjs web object to fetch the site script from a specific list const ss2 = await sp.web.lists.getByTitle(\"mylist\").getSiteScript(); Get site script from a web \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-scripts\"; const extractInfo = { IncludeBranding: true, IncludeLinksToExportedItems: true, IncludeRegionalSettings: true, IncludeSiteExternalSharingCapability: true, IncludeTheme: true, IncludedLists: [\"Lists/MyList\"] }; const ss = await sp.siteScripts.getSiteScriptFromWeb(\"https://TENANT.sharepoint.com/sites/mysite\", extractInfo); // Using the PnPjs web object to fetch the site script from a specific web const ss2 = await sp.web.getSiteScript(extractInfo); Execute Site Script Action \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-scripts\"; const sp = spfi(...); const siteScript = \"your site script action...\"; const ss = await sp.siteScripts.executeSiteScriptAction(siteScript); Execute site script for a specific web \u00b6 import { spfi } from \"@pnp/sp\"; import { SiteScripts } \"@pnp/sp/site-scripts\"; const siteScript = \"your site script action...\"; const scriptService = SiteScripts(\"https://absolute/url/to/web\"); const ss = await scriptService.executeSiteScriptAction(siteScript);","title":"Site Scripts"},{"location":"sp/site-scripts/#pnpspsite-scripts","text":"","title":"@pnp/sp/site-scripts"},{"location":"sp/site-scripts/#create-a-new-site-script","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-scripts\"; const sp = spfi(...); const sitescriptContent = { \"$schema\": \"schema.json\", \"actions\": [ { \"themeName\": \"Theme Name 123\", \"verb\": \"applyTheme\", }, ], \"bindata\": {}, \"version\": 1, }; const siteScript = await sp.siteScripts.createSiteScript(\"Title\", \"description\", sitescriptContent); console.log(siteScript.Title);","title":"Create a new site script"},{"location":"sp/site-scripts/#retrieval","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-scripts\"; const sp = spfi(...); // Retrieving all site scripts const allSiteScripts = await sp.siteScripts.getSiteScripts(); console.log(allSiteScripts.length > 0 ? allSiteScripts[0].Title : \"\"); // Retrieving a single site script by Id const siteScript = await sp.siteScripts.getSiteScriptMetadata(\"884ed56b-1aab-4653-95cf-4be0bfa5ef0a\"); console.log(siteScript.Title);","title":"Retrieval"},{"location":"sp/site-scripts/#update-and-delete","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-scripts\"; const sp = spfi(...); // Update const updatedSiteScript = await sp.siteScripts.updateSiteScript({ Id: \"884ed56b-1aab-4653-95cf-4be0bfa5ef0a\", Title: \"New Title\" }); console.log(updatedSiteScript.Title); // Delete await sp.siteScripts.deleteSiteScript(\"884ed56b-1aab-4653-95cf-4be0bfa5ef0a\");","title":"Update and delete"},{"location":"sp/site-scripts/#get-site-script-from-a-list","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-scripts\"; const sp = spfi(...); // Using the absolute URL of the list const ss = await sp.siteScripts.getSiteScriptFromList(\"https://TENANT.sharepoint.com/Lists/mylist\"); // Using the PnPjs web object to fetch the site script from a specific list const ss2 = await sp.web.lists.getByTitle(\"mylist\").getSiteScript();","title":"Get site script from a list"},{"location":"sp/site-scripts/#get-site-script-from-a-web","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-scripts\"; const extractInfo = { IncludeBranding: true, IncludeLinksToExportedItems: true, IncludeRegionalSettings: true, IncludeSiteExternalSharingCapability: true, IncludeTheme: true, IncludedLists: [\"Lists/MyList\"] }; const ss = await sp.siteScripts.getSiteScriptFromWeb(\"https://TENANT.sharepoint.com/sites/mysite\", extractInfo); // Using the PnPjs web object to fetch the site script from a specific web const ss2 = await sp.web.getSiteScript(extractInfo);","title":"Get site script from a web"},{"location":"sp/site-scripts/#execute-site-script-action","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/site-scripts\"; const sp = spfi(...); const siteScript = \"your site script action...\"; const ss = await sp.siteScripts.executeSiteScriptAction(siteScript);","title":"Execute Site Script Action"},{"location":"sp/site-scripts/#execute-site-script-for-a-specific-web","text":"import { spfi } from \"@pnp/sp\"; import { SiteScripts } \"@pnp/sp/site-scripts\"; const siteScript = \"your site script action...\"; const scriptService = SiteScripts(\"https://absolute/url/to/web\"); const ss = await scriptService.executeSiteScriptAction(siteScript);","title":"Execute site script for a specific web"},{"location":"sp/site-users/","text":"@pnp/sp/site-users \u00b6 The site users module provides methods to manage users for a sharepoint site. ISiteUsers \u00b6 Get all site user \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); const users = await sp.web.siteUsers(); Get Current user \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); let user = await sp.web.currentUser(); Get user by id \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); const id = 6; user = await sp.web.getUserById(id); Ensure user \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); const username = \"usernames@microsoft.com\"; result = await sp.web.ensureUser(username); ISiteUser \u00b6 <<<<<<< HEAD |Scenario|Import Statement| |--|--| |Selective 2|import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users\";| |Selective 3|import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\";| |Preset: All|import {sp, SiteUsers, SiteUser } from \"@pnp/sp/presets/all\";| ======= 52a91d788431066d44d536df1352b6ce855675e3 Get user Groups \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); let groups = await sp.web.currentUser.groups(); Add user to Site collection \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); const user = await sp.web.ensureUser(\"userLoginname\") const users = await sp.web.siteUsers; await users.add(user.data.LoginName); Get user \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); // get user object by id const user = await sp.web.siteUsers.getById(6); //get user object by Email const user = await sp.web.siteUsers.getByEmail(\"user@mail.com\"); //get user object by LoginName const user = await sp.web.siteUsers.getByLoginName(\"userLoginName\"); Update user \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); let userProps = await sp.web.currentUser(); userProps.Title = \"New title\"; await sp.web.currentUser.update(userProps); Remove user \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); // remove user by id await sp.web.siteUsers.removeById(6); // remove user by LoginName await sp.web.siteUsers.removeByLoginName(6); ISiteUserProps \u00b6 User properties: Property Name Type Description Email string Contains Site user email Id Number Contains Site user Id IsHiddenInUI Boolean Site user IsHiddenInUI IsShareByEmailGuestUser boolean Site user is external user IsSiteAdmin Boolean Describes if Site user Is Site Admin LoginName string Site user LoginName PrincipalType number Site user Principal type Title string Site user Title interface ISiteUserProps { /** * Contains Site user email * */ Email: string; /** * Contains Site user Id * */ Id: number; /** * Site user IsHiddenInUI * */ IsHiddenInUI: boolean; /** * Site user IsShareByEmailGuestUser * */ IsShareByEmailGuestUser: boolean; /** * Describes if Site user Is Site Admin * */ IsSiteAdmin: boolean; /** * Site user LoginName * */ LoginName: string; /** * Site user Principal type * */ PrincipalType: number | PrincipalType; /** * Site user Title * */ Title: string; }","title":"Site Users"},{"location":"sp/site-users/#pnpspsite-users","text":"The site users module provides methods to manage users for a sharepoint site.","title":"@pnp/sp/site-users"},{"location":"sp/site-users/#isiteusers","text":"","title":"ISiteUsers"},{"location":"sp/site-users/#get-all-site-user","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); const users = await sp.web.siteUsers();","title":"Get all site user"},{"location":"sp/site-users/#get-current-user","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); let user = await sp.web.currentUser();","title":"Get Current user"},{"location":"sp/site-users/#get-user-by-id","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); const id = 6; user = await sp.web.getUserById(id);","title":"Get user by id"},{"location":"sp/site-users/#ensure-user","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); const username = \"usernames@microsoft.com\"; result = await sp.web.ensureUser(username);","title":"Ensure user"},{"location":"sp/site-users/#isiteuser","text":"<<<<<<< HEAD |Scenario|Import Statement| |--|--| |Selective 2|import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users\";| |Selective 3|import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\";| |Preset: All|import {sp, SiteUsers, SiteUser } from \"@pnp/sp/presets/all\";| ======= 52a91d788431066d44d536df1352b6ce855675e3","title":"ISiteUser"},{"location":"sp/site-users/#get-user-groups","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); let groups = await sp.web.currentUser.groups();","title":"Get user Groups"},{"location":"sp/site-users/#add-user-to-site-collection","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); const user = await sp.web.ensureUser(\"userLoginname\") const users = await sp.web.siteUsers; await users.add(user.data.LoginName);","title":"Add user to Site collection"},{"location":"sp/site-users/#get-user","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); // get user object by id const user = await sp.web.siteUsers.getById(6); //get user object by Email const user = await sp.web.siteUsers.getByEmail(\"user@mail.com\"); //get user object by LoginName const user = await sp.web.siteUsers.getByLoginName(\"userLoginName\");","title":"Get user"},{"location":"sp/site-users/#update-user","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); let userProps = await sp.web.currentUser(); userProps.Title = \"New title\"; await sp.web.currentUser.update(userProps);","title":"Update user"},{"location":"sp/site-users/#remove-user","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); // remove user by id await sp.web.siteUsers.removeById(6); // remove user by LoginName await sp.web.siteUsers.removeByLoginName(6);","title":"Remove user"},{"location":"sp/site-users/#isiteuserprops","text":"User properties: Property Name Type Description Email string Contains Site user email Id Number Contains Site user Id IsHiddenInUI Boolean Site user IsHiddenInUI IsShareByEmailGuestUser boolean Site user is external user IsSiteAdmin Boolean Describes if Site user Is Site Admin LoginName string Site user LoginName PrincipalType number Site user Principal type Title string Site user Title interface ISiteUserProps { /** * Contains Site user email * */ Email: string; /** * Contains Site user Id * */ Id: number; /** * Site user IsHiddenInUI * */ IsHiddenInUI: boolean; /** * Site user IsShareByEmailGuestUser * */ IsShareByEmailGuestUser: boolean; /** * Describes if Site user Is Site Admin * */ IsSiteAdmin: boolean; /** * Site user LoginName * */ LoginName: string; /** * Site user Principal type * */ PrincipalType: number | PrincipalType; /** * Site user Title * */ Title: string; }","title":"ISiteUserProps"},{"location":"sp/sites/","text":"@pnp/sp/site - Site properties \u00b6 Site collection are one of the fundamental entry points while working with SharePoint. Sites serve as container for webs, lists, features and other entity types. Get context information for the current site collection \u00b6 Using the library, you can get the context information of the current site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; import { IContextInfo } from \"@pnp/sp/sites\"; const sp = spfi(...); const oContext: IContextInfo = await sp.site.getContextInfo(); console.log(oContext.FormDigestValue); Get document libraries of a web \u00b6 Using the library, you can get a list of the document libraries present in the a given web. Note: Works only in SharePoint online import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; import { IDocumentLibraryInformation } from \"@pnp/sp/sites\"; const sp = spfi(...); const docLibs: IDocumentLibraryInformation[] = await sp.site.getDocumentLibraries(\"https://tenant.sharepoint.com/sites/test/subsite\"); //we got the array of document library information docLibs.forEach((docLib: IDocumentLibraryInformation) => { // do something with each library }); Open Web By Id \u00b6 Because this method is a POST request you can chain off it directly. You will get back the full web properties in the data property of the return object. You can also chain directly off the returned Web instance on the web property. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; const sp = spfi(...); const w = await sp.site.openWebById(\"111ca453-90f5-482e-a381-cee1ff383c9e\"); //we got all the data from the web as well console.log(w.data); // we can chain const w2 = await w.web.select(\"Title\")(); Get absolute web url from page url \u00b6 Using the library, you can get the absolute web url by providing a page url import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; const sp = spfi(...); const d: string = await sp.site.getWebUrlFromPageUrl(\"https://tenant.sharepoint.com/sites/test/Pages/test.aspx\"); console.log(d); //https://tenant.sharepoint.com/sites/test Access the root web \u00b6 There are two methods to access the root web. The first, using the rootWeb property, is best for directly accessing information about that web. If you want to chain multiple operations off of the web, better to use the getRootWeb method that will ensure the web instance is created using its own Url vs. \"_api/sites/rootweb\" which does not work for all operations. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; const sp = spfi(...); // use for rootweb information access const rootwebData = await sp.site.rootWeb(); // use for chaining const rootweb = await sp.site.getRootWeb(); const listData = await rootWeb.lists.getByTitle(\"MyList\")(); Create a modern communication site \u00b6 Note: Works only in SharePoint online Creates a modern communication site. Property Type Required Description Title string yes The title of the site to create. lcid number yes The default language to use for the site. shareByEmailEnabled boolean yes If set to true, it will enable sharing files via Email. By default it is set to false url string yes The fully qualified URL (e.g. https://yourtenant.sharepoint.com/sites/mysitecollection ) of the site. description string no The description of the communication site. classification string no The Site classification to use. For instance \"Contoso Classified\". See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information siteDesignId string no The Guid of the site design to be used. You can use the below default OOTB GUIDs: Topic: null Showcase: 6142d2a0-63a5-4ba0-aede-d9fefca2c767 Blank: f6cc5403-0d63-442e-96c0-285923709ffc hubSiteId string no The Guid of the already existing Hub site Owner string no Required when using app-only context. Owner principal name e.g. user@tenant.onmicrosoft.com import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; const sp = spfi(...); const result = await sp.site.createCommunicationSite( \"Title\", 1033, true, \"https://tenant.sharepoint.com/sites/commSite\", \"Description\", \"HBI\", \"f6cc5403-0d63-442e-96c0-285923709ffc\", \"a00ec589-ea9f-4dba-a34e-67e78d41e509\", \"user@TENANT.onmicrosoft.com\"); Create from Props \u00b6 You may need to supply additional parameters such as WebTemplate, to do so please use the createCommunicationSiteFromProps method. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sites\"; const sp = spfi(...); // in this case you supply a single struct deinfing the creation props const result = await sp.site.createCommunicationSiteFromProps({ Owner: \"patrick@three18studios.com\", Title: \"A Test Site\", Url: \"https://{tenant}.sharepoint.com/sites/commsite2\", WebTemplate: \"STS#3\", }); Create a modern team site \u00b6 Note: Works only in SharePoint online. It wont work with App only tokens Creates a modern team site backed by O365 group. Property Type Required Description displayName string yes The title/displayName of the site to be created. alias string yes Alias of the underlying Office 365 Group. isPublic boolean yes Defines whether the Office 365 Group will be public (default), or private. lcid number yes The language to use for the site. If not specified will default to English (1033). description string no The description of the modern team site. classification string no The Site classification to use. For instance \"Contoso Classified\". See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information owners string array (string[]) no The Owners of the site to be created hubSiteId string no The Guid of the already existing Hub site siteDesignId string no The Guid of the site design to be used. You can use the below default OOTB GUIDs: Topic: null Showcase: 6142d2a0-63a5-4ba0-aede-d9fefca2c767 Blank: f6cc5403-0d63-442e-96c0-285923709ffc import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; const sp = spfi(...); const result = await sp.site.createModernTeamSite( \"displayName\", \"alias\", true, 1033, \"description\", \"HBI\", [\"user1@tenant.onmicrosoft.com\",\"user2@tenant.onmicrosoft.com\",\"user3@tenant.onmicrosoft.com\"], \"a00ec589-ea9f-4dba-a34e-67e78d41e509\", \"f6cc5403-0d63-442e-96c0-285923709ffc\" ); console.log(d); Create from Props \u00b6 You may need to supply additional parameters, to do so please use the createModernTeamSiteFromProps method. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sites\"; const sp = spfi(...); // in this case you supply a single struct deinfing the creation props const result = await sp.site.createModernTeamSiteFromProps({ alias: \"JenniferGarner\", displayName: \"A Test Site\", owners: [\"patrick@three18studios.com\"], }); Delete a site collection \u00b6 Using the library, you can delete a specific site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; import { Site } from \"@pnp/sp/sites\"; const sp = spfi(...); // Delete the current site await sp.site.delete(); // Specify which site to delete const siteUrl = \"https://tenant.sharepoint.com/sites/subsite\"; const site2 = Site(siteUrl); await site2.delete(); Check if a Site Collection Exists \u00b6 Using the library, you can check if a specific site collection exist or not on your tenant import { spfi } from \"@pnp/sp\"; const sp = spfi(...); // Specify which site to verify const siteUrl = \"https://tenant.sharepoint.com/sites/subsite\"; const exists = await sp.site.exists(siteUrl); console.log(exists);","title":"Sites"},{"location":"sp/sites/#pnpspsite-site-properties","text":"Site collection are one of the fundamental entry points while working with SharePoint. Sites serve as container for webs, lists, features and other entity types.","title":"@pnp/sp/site - Site properties"},{"location":"sp/sites/#get-context-information-for-the-current-site-collection","text":"Using the library, you can get the context information of the current site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; import { IContextInfo } from \"@pnp/sp/sites\"; const sp = spfi(...); const oContext: IContextInfo = await sp.site.getContextInfo(); console.log(oContext.FormDigestValue);","title":"Get context information for the current site collection"},{"location":"sp/sites/#get-document-libraries-of-a-web","text":"Using the library, you can get a list of the document libraries present in the a given web. Note: Works only in SharePoint online import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; import { IDocumentLibraryInformation } from \"@pnp/sp/sites\"; const sp = spfi(...); const docLibs: IDocumentLibraryInformation[] = await sp.site.getDocumentLibraries(\"https://tenant.sharepoint.com/sites/test/subsite\"); //we got the array of document library information docLibs.forEach((docLib: IDocumentLibraryInformation) => { // do something with each library });","title":"Get document libraries of a web"},{"location":"sp/sites/#open-web-by-id","text":"Because this method is a POST request you can chain off it directly. You will get back the full web properties in the data property of the return object. You can also chain directly off the returned Web instance on the web property. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; const sp = spfi(...); const w = await sp.site.openWebById(\"111ca453-90f5-482e-a381-cee1ff383c9e\"); //we got all the data from the web as well console.log(w.data); // we can chain const w2 = await w.web.select(\"Title\")();","title":"Open Web By Id"},{"location":"sp/sites/#get-absolute-web-url-from-page-url","text":"Using the library, you can get the absolute web url by providing a page url import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; const sp = spfi(...); const d: string = await sp.site.getWebUrlFromPageUrl(\"https://tenant.sharepoint.com/sites/test/Pages/test.aspx\"); console.log(d); //https://tenant.sharepoint.com/sites/test","title":"Get absolute web url from page url"},{"location":"sp/sites/#access-the-root-web","text":"There are two methods to access the root web. The first, using the rootWeb property, is best for directly accessing information about that web. If you want to chain multiple operations off of the web, better to use the getRootWeb method that will ensure the web instance is created using its own Url vs. \"_api/sites/rootweb\" which does not work for all operations. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; const sp = spfi(...); // use for rootweb information access const rootwebData = await sp.site.rootWeb(); // use for chaining const rootweb = await sp.site.getRootWeb(); const listData = await rootWeb.lists.getByTitle(\"MyList\")();","title":"Access the root web"},{"location":"sp/sites/#create-a-modern-communication-site","text":"Note: Works only in SharePoint online Creates a modern communication site. Property Type Required Description Title string yes The title of the site to create. lcid number yes The default language to use for the site. shareByEmailEnabled boolean yes If set to true, it will enable sharing files via Email. By default it is set to false url string yes The fully qualified URL (e.g. https://yourtenant.sharepoint.com/sites/mysitecollection ) of the site. description string no The description of the communication site. classification string no The Site classification to use. For instance \"Contoso Classified\". See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information siteDesignId string no The Guid of the site design to be used. You can use the below default OOTB GUIDs: Topic: null Showcase: 6142d2a0-63a5-4ba0-aede-d9fefca2c767 Blank: f6cc5403-0d63-442e-96c0-285923709ffc hubSiteId string no The Guid of the already existing Hub site Owner string no Required when using app-only context. Owner principal name e.g. user@tenant.onmicrosoft.com import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; const sp = spfi(...); const result = await sp.site.createCommunicationSite( \"Title\", 1033, true, \"https://tenant.sharepoint.com/sites/commSite\", \"Description\", \"HBI\", \"f6cc5403-0d63-442e-96c0-285923709ffc\", \"a00ec589-ea9f-4dba-a34e-67e78d41e509\", \"user@TENANT.onmicrosoft.com\");","title":"Create a modern communication site"},{"location":"sp/sites/#create-from-props","text":"You may need to supply additional parameters such as WebTemplate, to do so please use the createCommunicationSiteFromProps method. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sites\"; const sp = spfi(...); // in this case you supply a single struct deinfing the creation props const result = await sp.site.createCommunicationSiteFromProps({ Owner: \"patrick@three18studios.com\", Title: \"A Test Site\", Url: \"https://{tenant}.sharepoint.com/sites/commsite2\", WebTemplate: \"STS#3\", });","title":"Create from Props"},{"location":"sp/sites/#create-a-modern-team-site","text":"Note: Works only in SharePoint online. It wont work with App only tokens Creates a modern team site backed by O365 group. Property Type Required Description displayName string yes The title/displayName of the site to be created. alias string yes Alias of the underlying Office 365 Group. isPublic boolean yes Defines whether the Office 365 Group will be public (default), or private. lcid number yes The language to use for the site. If not specified will default to English (1033). description string no The description of the modern team site. classification string no The Site classification to use. For instance \"Contoso Classified\". See https://www.youtube.com/watch?v=E-8Z2ggHcS0 for more information owners string array (string[]) no The Owners of the site to be created hubSiteId string no The Guid of the already existing Hub site siteDesignId string no The Guid of the site design to be used. You can use the below default OOTB GUIDs: Topic: null Showcase: 6142d2a0-63a5-4ba0-aede-d9fefca2c767 Blank: f6cc5403-0d63-442e-96c0-285923709ffc import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; const sp = spfi(...); const result = await sp.site.createModernTeamSite( \"displayName\", \"alias\", true, 1033, \"description\", \"HBI\", [\"user1@tenant.onmicrosoft.com\",\"user2@tenant.onmicrosoft.com\",\"user3@tenant.onmicrosoft.com\"], \"a00ec589-ea9f-4dba-a34e-67e78d41e509\", \"f6cc5403-0d63-442e-96c0-285923709ffc\" ); console.log(d);","title":"Create a modern team site"},{"location":"sp/sites/#create-from-props_1","text":"You may need to supply additional parameters, to do so please use the createModernTeamSiteFromProps method. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/sites\"; const sp = spfi(...); // in this case you supply a single struct deinfing the creation props const result = await sp.site.createModernTeamSiteFromProps({ alias: \"JenniferGarner\", displayName: \"A Test Site\", owners: [\"patrick@three18studios.com\"], });","title":"Create from Props"},{"location":"sp/sites/#delete-a-site-collection","text":"Using the library, you can delete a specific site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sites\"; import { Site } from \"@pnp/sp/sites\"; const sp = spfi(...); // Delete the current site await sp.site.delete(); // Specify which site to delete const siteUrl = \"https://tenant.sharepoint.com/sites/subsite\"; const site2 = Site(siteUrl); await site2.delete();","title":"Delete a site collection"},{"location":"sp/sites/#check-if-a-site-collection-exists","text":"Using the library, you can check if a specific site collection exist or not on your tenant import { spfi } from \"@pnp/sp\"; const sp = spfi(...); // Specify which site to verify const siteUrl = \"https://tenant.sharepoint.com/sites/subsite\"; const exists = await sp.site.exists(siteUrl); console.log(exists);","title":"Check if a Site Collection Exists"},{"location":"sp/social/","text":"@pnp/sp/ - social \u00b6 The social API allows you to track followed sites, people, and docs. Note, many of these methods only work with the context of a logged in user, and not with app-only permissions. getFollowedSitesUri \u00b6 Gets a URI to a site that lists the current user's followed sites. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/social\"; const sp = spfi(...); const uri = await sp.social.getFollowedSitesUri(); getFollowedDocumentsUri \u00b6 Gets a URI to a site that lists the current user's followed documents. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/social\"; const sp = spfi(...); const uri = await sp.social.getFollowedDocumentsUri(); follow \u00b6 Makes the current user start following a user, document, site, or tag import { spfi } from \"@pnp/sp\"; import { SocialActorType } from \"@pnp/sp/social\"; const sp = spfi(...); // follow a site const r1 = await sp.social.follow({ ActorType: SocialActorType.Site, ContentUri: \"htts://tenant.sharepoint.com/sites/site\", }); // follow a person const r2 = await sp.social.follow({ AccountName: \"i:0#.f|membership|person@tenant.com\", ActorType: SocialActorType.User, }); // follow a doc const r3 = await sp.social.follow({ ActorType: SocialActorType.Document, ContentUri: \"https://tenant.sharepoint.com/sites/dev/SitePages/Test.aspx\", }); // follow a tag // You need the tag GUID to start following a tag. // You can't get the GUID by using the REST service, but you can use the .NET client object model or the JavaScript object model. // See How to get a tag's GUID based on the tag's name by using the JavaScript object model. // https://docs.microsoft.com/en-us/sharepoint/dev/general-development/follow-content-in-sharepoint#bk_getTagGuid const r4 = await sp.social.follow({ ActorType: SocialActorType.Tag, TagGuid: \"19a4a484-c1dc-4bc5-8c93-bb96245ce928\", }); isFollowed \u00b6 Indicates whether the current user is following a specified user, document, site, or tag import { spfi } from \"@pnp/sp\"; import { SocialActorType } from \"@pnp/sp/social\"; const sp = spfi(...); // pass the same social actor struct as shown in follow example for each type const r = await sp.social.isFollowed({ AccountName: \"i:0#.f|membership|person@tenant.com\", ActorType: SocialActorType.User, }); stopFollowing \u00b6 Makes the current user stop following a user, document, site, or tag import { spfi } from \"@pnp/sp\"; import { SocialActorType } from \"@pnp/sp/social\"; const sp = spfi(...); // pass the same social actor struct as shown in follow example for each type const r = await sp.social.stopFollowing({ AccountName: \"i:0#.f|membership|person@tenant.com\", ActorType: SocialActorType.User, }); my \u00b6 get \u00b6 Gets this user's social information import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/social\"; const sp = spfi(...); const r = await sp.social.my(); followed \u00b6 Gets users, documents, sites, and tags that the current user is following based on the supplied flags. import { spfi } from \"@pnp/sp\"; import { SocialActorType } from \"@pnp/sp/social\"; const sp = spfi(...); // get all the followed documents const r1 = await sp.social.my.followed(SocialActorTypes.Document); // get all the followed documents and sites const r2 = await sp.social.my.followed(SocialActorTypes.Document | SocialActorTypes.Site); // get all the followed sites updated in the last 24 hours const r3 = await sp.social.my.followed(SocialActorTypes.Site | SocialActorTypes.WithinLast24Hours); followedCount \u00b6 Works as followed but returns on the count of actors specified by the query import { spfi } from \"@pnp/sp\"; import { SocialActorType } from \"@pnp/sp/social\"; const sp = spfi(...); // get the followed documents count const r = await sp.social.my.followedCount(SocialActorTypes.Document); followers \u00b6 Gets the users who are following the current user. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/social\"; const sp = spfi(...); // get the followed documents count const r = await sp.social.my.followers(); suggestions \u00b6 Gets users who the current user might want to follow. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/social\"; const sp = spfi(...); // get the followed documents count const r = await sp.social.my.suggestions();","title":"Social"},{"location":"sp/social/#pnpsp-social","text":"The social API allows you to track followed sites, people, and docs. Note, many of these methods only work with the context of a logged in user, and not with app-only permissions.","title":"@pnp/sp/ - social"},{"location":"sp/social/#getfollowedsitesuri","text":"Gets a URI to a site that lists the current user's followed sites. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/social\"; const sp = spfi(...); const uri = await sp.social.getFollowedSitesUri();","title":"getFollowedSitesUri"},{"location":"sp/social/#getfolloweddocumentsuri","text":"Gets a URI to a site that lists the current user's followed documents. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/social\"; const sp = spfi(...); const uri = await sp.social.getFollowedDocumentsUri();","title":"getFollowedDocumentsUri"},{"location":"sp/social/#follow","text":"Makes the current user start following a user, document, site, or tag import { spfi } from \"@pnp/sp\"; import { SocialActorType } from \"@pnp/sp/social\"; const sp = spfi(...); // follow a site const r1 = await sp.social.follow({ ActorType: SocialActorType.Site, ContentUri: \"htts://tenant.sharepoint.com/sites/site\", }); // follow a person const r2 = await sp.social.follow({ AccountName: \"i:0#.f|membership|person@tenant.com\", ActorType: SocialActorType.User, }); // follow a doc const r3 = await sp.social.follow({ ActorType: SocialActorType.Document, ContentUri: \"https://tenant.sharepoint.com/sites/dev/SitePages/Test.aspx\", }); // follow a tag // You need the tag GUID to start following a tag. // You can't get the GUID by using the REST service, but you can use the .NET client object model or the JavaScript object model. // See How to get a tag's GUID based on the tag's name by using the JavaScript object model. // https://docs.microsoft.com/en-us/sharepoint/dev/general-development/follow-content-in-sharepoint#bk_getTagGuid const r4 = await sp.social.follow({ ActorType: SocialActorType.Tag, TagGuid: \"19a4a484-c1dc-4bc5-8c93-bb96245ce928\", });","title":"follow"},{"location":"sp/social/#isfollowed","text":"Indicates whether the current user is following a specified user, document, site, or tag import { spfi } from \"@pnp/sp\"; import { SocialActorType } from \"@pnp/sp/social\"; const sp = spfi(...); // pass the same social actor struct as shown in follow example for each type const r = await sp.social.isFollowed({ AccountName: \"i:0#.f|membership|person@tenant.com\", ActorType: SocialActorType.User, });","title":"isFollowed"},{"location":"sp/social/#stopfollowing","text":"Makes the current user stop following a user, document, site, or tag import { spfi } from \"@pnp/sp\"; import { SocialActorType } from \"@pnp/sp/social\"; const sp = spfi(...); // pass the same social actor struct as shown in follow example for each type const r = await sp.social.stopFollowing({ AccountName: \"i:0#.f|membership|person@tenant.com\", ActorType: SocialActorType.User, });","title":"stopFollowing"},{"location":"sp/social/#my","text":"","title":"my"},{"location":"sp/social/#get","text":"Gets this user's social information import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/social\"; const sp = spfi(...); const r = await sp.social.my();","title":"get"},{"location":"sp/social/#followed","text":"Gets users, documents, sites, and tags that the current user is following based on the supplied flags. import { spfi } from \"@pnp/sp\"; import { SocialActorType } from \"@pnp/sp/social\"; const sp = spfi(...); // get all the followed documents const r1 = await sp.social.my.followed(SocialActorTypes.Document); // get all the followed documents and sites const r2 = await sp.social.my.followed(SocialActorTypes.Document | SocialActorTypes.Site); // get all the followed sites updated in the last 24 hours const r3 = await sp.social.my.followed(SocialActorTypes.Site | SocialActorTypes.WithinLast24Hours);","title":"followed"},{"location":"sp/social/#followedcount","text":"Works as followed but returns on the count of actors specified by the query import { spfi } from \"@pnp/sp\"; import { SocialActorType } from \"@pnp/sp/social\"; const sp = spfi(...); // get the followed documents count const r = await sp.social.my.followedCount(SocialActorTypes.Document);","title":"followedCount"},{"location":"sp/social/#followers","text":"Gets the users who are following the current user. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/social\"; const sp = spfi(...); // get the followed documents count const r = await sp.social.my.followers();","title":"followers"},{"location":"sp/social/#suggestions","text":"Gets users who the current user might want to follow. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/social\"; const sp = spfi(...); // get the followed documents count const r = await sp.social.my.suggestions();","title":"suggestions"},{"location":"sp/sp-utilities-utility/","text":"@pnp/sp/utilities \u00b6 Through the REST api you are able to call a subset of the SP.Utilities.Utility methods. We have explicitly defined some of these methods and provided a method to call any others in a generic manner. These methods are exposed on pnp.sp.utility and support batching and caching. sendEmail \u00b6 This methods allows you to send an email based on the supplied arguments. The method takes a single argument, a plain object defined by the EmailProperties interface (shown below). EmailProperties \u00b6 export interface TypedHash<T> { [key: string]: T; } export interface EmailProperties { To: string[]; CC?: string[]; BCC?: string[]; Subject: string; Body: string; AdditionalHeaders?: TypedHash<string>; From?: string; } Usage \u00b6 You must define the To, Subject, and Body values - the remaining are optional. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; import { IEmailProperties } from \"@pnp/sp/sputilities\"; const sp = spfi(...); const emailProps: IEmailProperties = { To: [\"user@site.com\"], CC: [\"user2@site.com\", \"user3@site.com\"], BCC: [\"user4@site.com\", \"user5@site.com\"], Subject: \"This email is about...\", Body: \"Here is the body. <b>It supports html</b>\", AdditionalHeaders: { \"content-type\": \"text/html\" } }; await sp.utility.sendEmail(emailProps); console.log(\"Email Sent!\"); getCurrentUserEmailAddresses \u00b6 This method returns the current user's email addresses known to SharePoint. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; const sp = spfi(...); let addressString: string = await sp.utility.getCurrentUserEmailAddresses(); // and use it with sendEmail await sp.utility.sendEmail({ To: [addressString], Subject: \"This email is about...\", Body: \"Here is the body. <b>It supports html</b>\", AdditionalHeaders: { \"content-type\": \"text/html\" }, }); resolvePrincipal \u00b6 Gets information about a principal that matches the specified Search criteria import { spfi, SPFx, IPrincipalInfo, PrincipalType, PrincipalSource } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; const sp = spfi(...); let principal : IPrincipalInfo = await sp.utility.resolvePrincipal(\"user@site.com\", PrincipalType.User, PrincipalSource.All, true, false, true); console.log(principal); searchPrincipals \u00b6 Gets information about the principals that match the specified Search criteria. import { spfi, SPFx, IPrincipalInfo, PrincipalType, PrincipalSource } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; const sp = spfi(...); let principals : IPrincipalInfo[] = await sp.utility.searchPrincipals(\"john\", PrincipalType.User, PrincipalSource.All,\"\", 10); console.log(principals); createEmailBodyForInvitation \u00b6 Gets the external (outside the firewall) URL to a document or resource in a site. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; const sp = spfi(...); let url : string = await sp.utility.createEmailBodyForInvitation(\"https://contoso.sharepoint.com/sites/dev/SitePages/DevHome.aspx\"); console.log(url); expandGroupsToPrincipals \u00b6 Resolves the principals contained within the supplied groups import { spfi, SPFx, IPrincipalInfo } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; const sp = spfi(...); let principals : IPrincipalInfo[] = await sp.utility.expandGroupsToPrincipals([\"Dev Owners\", \"Dev Members\"]); console.log(principals); // optionally supply a max results count. Default is 30. let principals : IPrincipalInfo[] = await sp.utility.expandGroupsToPrincipals([\"Dev Owners\", \"Dev Members\"], 10); console.log(principals); createWikiPage \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; import { ICreateWikiPageResult } from \"@pnp/sp/sputilities\"; const sp = spfi(...); let newPage : ICreateWikiPageResult = await sp.utility.createWikiPage({ ServerRelativeUrl: \"/sites/dev/SitePages/mynewpage.aspx\", WikiHtmlContent: \"This is my <b>page</b> content. It supports rich html.\", }); // newPage contains the raw data returned by the service console.log(newPage.data); // newPage contains a File instance you can use to further update the new page let file = await newPage.file(); console.log(file);","title":"SP.Utilities.Utility"},{"location":"sp/sp-utilities-utility/#pnpsputilities","text":"Through the REST api you are able to call a subset of the SP.Utilities.Utility methods. We have explicitly defined some of these methods and provided a method to call any others in a generic manner. These methods are exposed on pnp.sp.utility and support batching and caching.","title":"@pnp/sp/utilities"},{"location":"sp/sp-utilities-utility/#sendemail","text":"This methods allows you to send an email based on the supplied arguments. The method takes a single argument, a plain object defined by the EmailProperties interface (shown below).","title":"sendEmail"},{"location":"sp/sp-utilities-utility/#emailproperties","text":"export interface TypedHash<T> { [key: string]: T; } export interface EmailProperties { To: string[]; CC?: string[]; BCC?: string[]; Subject: string; Body: string; AdditionalHeaders?: TypedHash<string>; From?: string; }","title":"EmailProperties"},{"location":"sp/sp-utilities-utility/#usage","text":"You must define the To, Subject, and Body values - the remaining are optional. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; import { IEmailProperties } from \"@pnp/sp/sputilities\"; const sp = spfi(...); const emailProps: IEmailProperties = { To: [\"user@site.com\"], CC: [\"user2@site.com\", \"user3@site.com\"], BCC: [\"user4@site.com\", \"user5@site.com\"], Subject: \"This email is about...\", Body: \"Here is the body. <b>It supports html</b>\", AdditionalHeaders: { \"content-type\": \"text/html\" } }; await sp.utility.sendEmail(emailProps); console.log(\"Email Sent!\");","title":"Usage"},{"location":"sp/sp-utilities-utility/#getcurrentuseremailaddresses","text":"This method returns the current user's email addresses known to SharePoint. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; const sp = spfi(...); let addressString: string = await sp.utility.getCurrentUserEmailAddresses(); // and use it with sendEmail await sp.utility.sendEmail({ To: [addressString], Subject: \"This email is about...\", Body: \"Here is the body. <b>It supports html</b>\", AdditionalHeaders: { \"content-type\": \"text/html\" }, });","title":"getCurrentUserEmailAddresses"},{"location":"sp/sp-utilities-utility/#resolveprincipal","text":"Gets information about a principal that matches the specified Search criteria import { spfi, SPFx, IPrincipalInfo, PrincipalType, PrincipalSource } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; const sp = spfi(...); let principal : IPrincipalInfo = await sp.utility.resolvePrincipal(\"user@site.com\", PrincipalType.User, PrincipalSource.All, true, false, true); console.log(principal);","title":"resolvePrincipal"},{"location":"sp/sp-utilities-utility/#searchprincipals","text":"Gets information about the principals that match the specified Search criteria. import { spfi, SPFx, IPrincipalInfo, PrincipalType, PrincipalSource } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; const sp = spfi(...); let principals : IPrincipalInfo[] = await sp.utility.searchPrincipals(\"john\", PrincipalType.User, PrincipalSource.All,\"\", 10); console.log(principals);","title":"searchPrincipals"},{"location":"sp/sp-utilities-utility/#createemailbodyforinvitation","text":"Gets the external (outside the firewall) URL to a document or resource in a site. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; const sp = spfi(...); let url : string = await sp.utility.createEmailBodyForInvitation(\"https://contoso.sharepoint.com/sites/dev/SitePages/DevHome.aspx\"); console.log(url);","title":"createEmailBodyForInvitation"},{"location":"sp/sp-utilities-utility/#expandgroupstoprincipals","text":"Resolves the principals contained within the supplied groups import { spfi, SPFx, IPrincipalInfo } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; const sp = spfi(...); let principals : IPrincipalInfo[] = await sp.utility.expandGroupsToPrincipals([\"Dev Owners\", \"Dev Members\"]); console.log(principals); // optionally supply a max results count. Default is 30. let principals : IPrincipalInfo[] = await sp.utility.expandGroupsToPrincipals([\"Dev Owners\", \"Dev Members\"], 10); console.log(principals);","title":"expandGroupsToPrincipals"},{"location":"sp/sp-utilities-utility/#createwikipage","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/sputilities\"; import { ICreateWikiPageResult } from \"@pnp/sp/sputilities\"; const sp = spfi(...); let newPage : ICreateWikiPageResult = await sp.utility.createWikiPage({ ServerRelativeUrl: \"/sites/dev/SitePages/mynewpage.aspx\", WikiHtmlContent: \"This is my <b>page</b> content. It supports rich html.\", }); // newPage contains the raw data returned by the service console.log(newPage.data); // newPage contains a File instance you can use to further update the new page let file = await newPage.file(); console.log(file);","title":"createWikiPage"},{"location":"sp/subscriptions/","text":"@pnp/sp/subscriptions \u00b6 Webhooks on a SharePoint list are used to notify any change in the list, to other applications using a push model. This module provides methods to add, update or delete webhooks on a particular SharePoint list or library. ISubscriptions \u00b6 Add a webhook \u00b6 Using this library, you can add a webhook to a specified list within the SharePoint site. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import { Subscriptions, ISubscriptions} from \"@pnp/sp/subscriptions\"; import \"@pnp/sp/subscriptions/list\"; const sp = spfi(...); // This is the URL which will be called by SharePoint when there is a change in the list const notificationUrl = \"<notification-url>\"; // Set the expiry date to 180 days from now, which is the maximum allowed for the webhook expiry date. const expiryDate = dateAdd(new Date(), \"day\" , 180).toISOString(); // Adds a webhook to the Documents library var res = await sp.web.lists.getByTitle(\"Documents\").subscriptions.add(notificationUrl,expiryDate); Get all webhooks added to a list \u00b6 Read all the webhooks' details which are associated to the list import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/subscriptions\"; const sp = spfi(...); const res = await sp.web.lists.getByTitle(\"Documents\").subscriptions(); ISubscription \u00b6 This interface provides the methods for managing a particular webhook. <<<<<<< HEAD | Scenario | Import Statement | | ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Selective | import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import { Subscriptions, ISubscriptions, Subscription, ISubscription} from \"@pnp/sp/subscriptions\"; import \"@pnp/sp/subscriptions/list\" | | Preset: All | import { sp, Webs, IWebs, Lists, ILists, Subscriptions, ISubscriptions, Subscription, ISubscription } from \"@pnp/sp/presets/all\"; | ======= 52a91d788431066d44d536df1352b6ce855675e3 Managing a webhook \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/subscriptions\"; const sp = spfi(...); // Get details of a webhook based on its ID const webhookId = \"1f029e5c-16e4-4941-b46f-67895118763f\"; const webhook = await sp.web.lists.getByTitle(\"Documents\").subscriptions.getById(webhookId)(); // Update a webhook const newDate = dateAdd(new Date(), \"day\" , 150).toISOString(); const updatedWebhook = await sp.web.lists.getByTitle(\"Documents\").subscriptions.getById(webhookId).update(newDate); // Delete a webhook await sp.web.lists.getByTitle(\"Documents\").subscriptions.getById(webhookId).delete();","title":"Subscriptions"},{"location":"sp/subscriptions/#pnpspsubscriptions","text":"Webhooks on a SharePoint list are used to notify any change in the list, to other applications using a push model. This module provides methods to add, update or delete webhooks on a particular SharePoint list or library.","title":"@pnp/sp/subscriptions"},{"location":"sp/subscriptions/#isubscriptions","text":"","title":"ISubscriptions"},{"location":"sp/subscriptions/#add-a-webhook","text":"Using this library, you can add a webhook to a specified list within the SharePoint site. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import { Subscriptions, ISubscriptions} from \"@pnp/sp/subscriptions\"; import \"@pnp/sp/subscriptions/list\"; const sp = spfi(...); // This is the URL which will be called by SharePoint when there is a change in the list const notificationUrl = \"<notification-url>\"; // Set the expiry date to 180 days from now, which is the maximum allowed for the webhook expiry date. const expiryDate = dateAdd(new Date(), \"day\" , 180).toISOString(); // Adds a webhook to the Documents library var res = await sp.web.lists.getByTitle(\"Documents\").subscriptions.add(notificationUrl,expiryDate);","title":"Add a webhook"},{"location":"sp/subscriptions/#get-all-webhooks-added-to-a-list","text":"Read all the webhooks' details which are associated to the list import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/subscriptions\"; const sp = spfi(...); const res = await sp.web.lists.getByTitle(\"Documents\").subscriptions();","title":"Get all webhooks added to a list"},{"location":"sp/subscriptions/#isubscription","text":"This interface provides the methods for managing a particular webhook. <<<<<<< HEAD | Scenario | Import Statement | | ----------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | Selective | import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import { Subscriptions, ISubscriptions, Subscription, ISubscription} from \"@pnp/sp/subscriptions\"; import \"@pnp/sp/subscriptions/list\" | | Preset: All | import { sp, Webs, IWebs, Lists, ILists, Subscriptions, ISubscriptions, Subscription, ISubscription } from \"@pnp/sp/presets/all\"; | ======= 52a91d788431066d44d536df1352b6ce855675e3","title":"ISubscription"},{"location":"sp/subscriptions/#managing-a-webhook","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/subscriptions\"; const sp = spfi(...); // Get details of a webhook based on its ID const webhookId = \"1f029e5c-16e4-4941-b46f-67895118763f\"; const webhook = await sp.web.lists.getByTitle(\"Documents\").subscriptions.getById(webhookId)(); // Update a webhook const newDate = dateAdd(new Date(), \"day\" , 150).toISOString(); const updatedWebhook = await sp.web.lists.getByTitle(\"Documents\").subscriptions.getById(webhookId).update(newDate); // Delete a webhook await sp.web.lists.getByTitle(\"Documents\").subscriptions.getById(webhookId).delete();","title":"Managing a webhook"},{"location":"sp/taxonomy/","text":"@pnp/sp/taxonomy \u00b6 Provides access to the v2.1 api term store Docs updated with v2.0.9 release as the underlying API changed \u00b6 NOTE: This API may change so please be aware updates to the taxonomy module will not trigger a major version bump in PnPjs even if they are breaking. Once things stabilize this note will be removed. Term Store \u00b6 Access term store data from the root sp object as shown below. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermStoreInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get term store data const info: ITermStoreInfo = await sp.termStore(); Term Groups \u00b6 Access term group information List \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermGroupInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get term groups const info: ITermGroupInfo[] = await sp.termStore.groups(); Get By Id \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermGroupInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get term groups data const info: ITermGroupInfo = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\")(); Term Sets \u00b6 Access term set information List \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermSetInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get set info const info: ITermSetInfo[] = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets(); Get By Id \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermSetInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get term set data by group id then by term set id const info: ITermSetInfo = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\")(); // get term set data by term set id const infoByTermSetId: ITermSetInfo = await sp.termStore.sets.getById(\"338666a8-1111-2222-3333-f72471314e72\")(); getAllChildrenAsOrderedTree \u00b6 This method will get all of a set's child terms in an ordered array. It is a costly method in terms of requests so we suggest you cache the results as taxonomy trees seldom change. Starting with version 2.6.0 you can now include an optional param to retrieve all of the term's properties and localProperties in the tree. Default is false. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermInfo } from \"@pnp/sp/taxonomy\"; import { dateAdd, PnPClientStorage } from \"@pnp/core\"; const sp = spfi(...); // here we get all the children of a given set const childTree = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getAllChildrenAsOrderedTree(); // here we show caching the results using the PnPClientStorage class, there are many caching libraries and options available const store = new PnPClientStorage(); // our tree likely doesn't change much in 30 minutes for most applications // adjust to be longer or shorter as needed const cachedTree = await store.local.getOrPut(\"myKey\", () => { return sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getAllChildrenAsOrderedTree(); }, dateAdd(new Date(), \"minute\", 30)); // you can also get all the properties and localProperties const set = sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\"); const childTree = await set.getAllChildrenAsOrderedTree({ retrieveProperties: true }); Terms \u00b6 Access term set information List \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // list all the terms that are direct children of this set const infos: ITermInfo[] = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").children(); List (terms) \u00b6 You can use the terms property to get a flat list of all terms in the set. These terms do not contain parent/child relationship information. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // list all the terms available in this term set by group id then by term set id const infos: ITermInfo[] = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").terms(); // list all the terms available in this term set by term set id const infosByTermSetId: ITermInfo[] = await sp.termStore.sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").terms(); Get By Id \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get term set data const info: ITermInfo = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getTermById(\"338666a8-1111-2222-3333-f72471314e72\")(); Get Term Parent \u00b6 Behavior Change in 2.1.0 The server API changed again, resulting in the removal of the \"parent\" property from ITerm as it is not longer supported as a path property. You now must use \"expand\" to load a term's parent information. The side affect of this is that the parent is no longer chainable, meaning you need to load a new term instance to work with the parent term. An approach for this is shown below. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get a ref to the set const set = sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\"); // get a term's information and expand parent to get the parent info as well const w = await set.getTermById(\"338666a8-1111-2222-3333-f72471314e72\").expand(\"parent\")(); // get a ref to the parent term const parent = set.getTermById(w.parent.id); // make a request for the parent term's info - this data currently match the results in the expand call above, but this // is to demonstrate how to gain a ref to the parent and select its data const parentInfo = await parent.select(\"Id\", \"Descriptions\")();","title":"Taxonomy"},{"location":"sp/taxonomy/#pnpsptaxonomy","text":"Provides access to the v2.1 api term store","title":"@pnp/sp/taxonomy"},{"location":"sp/taxonomy/#docs-updated-with-v209-release-as-the-underlying-api-changed","text":"NOTE: This API may change so please be aware updates to the taxonomy module will not trigger a major version bump in PnPjs even if they are breaking. Once things stabilize this note will be removed.","title":"Docs updated with v2.0.9 release as the underlying API changed"},{"location":"sp/taxonomy/#term-store","text":"Access term store data from the root sp object as shown below. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermStoreInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get term store data const info: ITermStoreInfo = await sp.termStore();","title":"Term Store"},{"location":"sp/taxonomy/#term-groups","text":"Access term group information","title":"Term Groups"},{"location":"sp/taxonomy/#list","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermGroupInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get term groups const info: ITermGroupInfo[] = await sp.termStore.groups();","title":"List"},{"location":"sp/taxonomy/#get-by-id","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermGroupInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get term groups data const info: ITermGroupInfo = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\")();","title":"Get By Id"},{"location":"sp/taxonomy/#term-sets","text":"Access term set information","title":"Term Sets"},{"location":"sp/taxonomy/#list_1","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermSetInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get set info const info: ITermSetInfo[] = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets();","title":"List"},{"location":"sp/taxonomy/#get-by-id_1","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermSetInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get term set data by group id then by term set id const info: ITermSetInfo = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\")(); // get term set data by term set id const infoByTermSetId: ITermSetInfo = await sp.termStore.sets.getById(\"338666a8-1111-2222-3333-f72471314e72\")();","title":"Get By Id"},{"location":"sp/taxonomy/#getallchildrenasorderedtree","text":"This method will get all of a set's child terms in an ordered array. It is a costly method in terms of requests so we suggest you cache the results as taxonomy trees seldom change. Starting with version 2.6.0 you can now include an optional param to retrieve all of the term's properties and localProperties in the tree. Default is false. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermInfo } from \"@pnp/sp/taxonomy\"; import { dateAdd, PnPClientStorage } from \"@pnp/core\"; const sp = spfi(...); // here we get all the children of a given set const childTree = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getAllChildrenAsOrderedTree(); // here we show caching the results using the PnPClientStorage class, there are many caching libraries and options available const store = new PnPClientStorage(); // our tree likely doesn't change much in 30 minutes for most applications // adjust to be longer or shorter as needed const cachedTree = await store.local.getOrPut(\"myKey\", () => { return sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getAllChildrenAsOrderedTree(); }, dateAdd(new Date(), \"minute\", 30)); // you can also get all the properties and localProperties const set = sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\"); const childTree = await set.getAllChildrenAsOrderedTree({ retrieveProperties: true });","title":"getAllChildrenAsOrderedTree"},{"location":"sp/taxonomy/#terms","text":"Access term set information","title":"Terms"},{"location":"sp/taxonomy/#list_2","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // list all the terms that are direct children of this set const infos: ITermInfo[] = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").children();","title":"List"},{"location":"sp/taxonomy/#list-terms","text":"You can use the terms property to get a flat list of all terms in the set. These terms do not contain parent/child relationship information. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // list all the terms available in this term set by group id then by term set id const infos: ITermInfo[] = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").terms(); // list all the terms available in this term set by term set id const infosByTermSetId: ITermInfo[] = await sp.termStore.sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").terms();","title":"List (terms)"},{"location":"sp/taxonomy/#get-by-id_2","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; import { ITermInfo } from \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get term set data const info: ITermInfo = await sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\").getTermById(\"338666a8-1111-2222-3333-f72471314e72\")();","title":"Get By Id"},{"location":"sp/taxonomy/#get-term-parent","text":"Behavior Change in 2.1.0 The server API changed again, resulting in the removal of the \"parent\" property from ITerm as it is not longer supported as a path property. You now must use \"expand\" to load a term's parent information. The side affect of this is that the parent is no longer chainable, meaning you need to load a new term instance to work with the parent term. An approach for this is shown below. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/taxonomy\"; const sp = spfi(...); // get a ref to the set const set = sp.termStore.groups.getById(\"338666a8-1111-2222-3333-f72471314e72\").sets.getById(\"338666a8-1111-2222-3333-f72471314e72\"); // get a term's information and expand parent to get the parent info as well const w = await set.getTermById(\"338666a8-1111-2222-3333-f72471314e72\").expand(\"parent\")(); // get a ref to the parent term const parent = set.getTermById(w.parent.id); // make a request for the parent term's info - this data currently match the results in the expand call above, but this // is to demonstrate how to gain a ref to the parent and select its data const parentInfo = await parent.select(\"Id\", \"Descriptions\")();","title":"Get Term Parent"},{"location":"sp/tenant-properties/","text":"@pnp/sp/web - tenant properties \u00b6 You can set, read, and remove tenant properties using the methods shown below: setStorageEntity \u00b6 This method MUST be called in the context of the app catalog web or you will get an access denied message. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/appcatalog\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const w = await sp.getTenantAppCatalogWeb(); // specify required key and value await w.setStorageEntity(\"Test1\", \"Value 1\"); // specify optional description and comments await w.setStorageEntity(\"Test2\", \"Value 2\", \"description\", \"comments\"); getStorageEntity \u00b6 This method can be used from any web to retrieve values previously set. import { spfi, SPFx, IStorageEntity } from \"@pnp/sp\"; import \"@pnp/sp/appcatalog\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const prop: IStorageEntity = await sp.web.getStorageEntity(\"Test1\"); console.log(prop.Value); removeStorageEntity \u00b6 This method MUST be called in the context of the app catalog web or you will get an access denied message. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/appcatalog\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const w = await sp.getTenantAppCatalogWeb(); await w.removeStorageEntity(\"Test1\");","title":"Tenant Properties"},{"location":"sp/tenant-properties/#pnpspweb-tenant-properties","text":"You can set, read, and remove tenant properties using the methods shown below:","title":"@pnp/sp/web - tenant properties"},{"location":"sp/tenant-properties/#setstorageentity","text":"This method MUST be called in the context of the app catalog web or you will get an access denied message. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/appcatalog\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const w = await sp.getTenantAppCatalogWeb(); // specify required key and value await w.setStorageEntity(\"Test1\", \"Value 1\"); // specify optional description and comments await w.setStorageEntity(\"Test2\", \"Value 2\", \"description\", \"comments\");","title":"setStorageEntity"},{"location":"sp/tenant-properties/#getstorageentity","text":"This method can be used from any web to retrieve values previously set. import { spfi, SPFx, IStorageEntity } from \"@pnp/sp\"; import \"@pnp/sp/appcatalog\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const prop: IStorageEntity = await sp.web.getStorageEntity(\"Test1\"); console.log(prop.Value);","title":"getStorageEntity"},{"location":"sp/tenant-properties/#removestorageentity","text":"This method MUST be called in the context of the app catalog web or you will get an access denied message. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/appcatalog\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const w = await sp.getTenantAppCatalogWeb(); await w.removeStorageEntity(\"Test1\");","title":"removeStorageEntity"},{"location":"sp/user-custom-actions/","text":"@pnp/sp/user-custom-actions \u00b6 Represents a custom action associated with a SharePoint list, web or site collection. IUserCustomActions \u00b6 Get a collection of User Custom Actions from a web \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/user-custom-actions\"; const sp = spfi(...); const userCustomActions = sp.web.userCustomActions(); Add a new User Custom Action \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/user-custom-actions\"; import { IUserCustomActionAddResult } from '@pnp/sp/user-custom-actions'; const sp = spfi(...); const newValues: TypedHash<string> = { \"Title\": \"New Title\", \"Description\": \"New Description\", \"Location\": \"ScriptLink\", \"ScriptSrc\": \"https://...\" }; const response : IUserCustomActionAddResult = await sp.web.userCustomActions.add(newValues); Get a User Custom Action by ID \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/user-custom-actions\"; const sp = spfi(...); const uca: IUserCustomAction = sp.web.userCustomActions.getById(\"00000000-0000-0000-0000-000000000000\"); const ucaData = await uca(); Clear the User Custom Action collection \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/user-custom-actions\"; const sp = spfi(...); // Site collection level await sp.site.userCustomActions.clear(); // Site (web) level await sp.web.userCustomActions.clear(); // List level await sp.web.lists.getByTitle(\"Documents\").userCustomActions.clear(); IUserCustomAction \u00b6 Update an existing User Custom Action \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/user-custom-actions\"; import { IUserCustomActionUpdateResult } from '@pnp/sp/user-custom-actions'; const sp = spfi(...); const uca = sp.web.userCustomActions.getById(\"00000000-0000-0000-0000-000000000000\"); const newValues: TypedHash<string> = { \"Title\": \"New Title\", \"Description\": \"New Description\", \"ScriptSrc\": \"https://...\" }; const response: IUserCustomActionUpdateResult = uca.update(newValues);","title":"User custom actions"},{"location":"sp/user-custom-actions/#pnpspuser-custom-actions","text":"Represents a custom action associated with a SharePoint list, web or site collection.","title":"@pnp/sp/user-custom-actions"},{"location":"sp/user-custom-actions/#iusercustomactions","text":"","title":"IUserCustomActions"},{"location":"sp/user-custom-actions/#get-a-collection-of-user-custom-actions-from-a-web","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/user-custom-actions\"; const sp = spfi(...); const userCustomActions = sp.web.userCustomActions();","title":"Get a collection of User Custom Actions from a web"},{"location":"sp/user-custom-actions/#add-a-new-user-custom-action","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/user-custom-actions\"; import { IUserCustomActionAddResult } from '@pnp/sp/user-custom-actions'; const sp = spfi(...); const newValues: TypedHash<string> = { \"Title\": \"New Title\", \"Description\": \"New Description\", \"Location\": \"ScriptLink\", \"ScriptSrc\": \"https://...\" }; const response : IUserCustomActionAddResult = await sp.web.userCustomActions.add(newValues);","title":"Add a new User Custom Action"},{"location":"sp/user-custom-actions/#get-a-user-custom-action-by-id","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/user-custom-actions\"; const sp = spfi(...); const uca: IUserCustomAction = sp.web.userCustomActions.getById(\"00000000-0000-0000-0000-000000000000\"); const ucaData = await uca();","title":"Get a User Custom Action by ID"},{"location":"sp/user-custom-actions/#clear-the-user-custom-action-collection","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/user-custom-actions\"; const sp = spfi(...); // Site collection level await sp.site.userCustomActions.clear(); // Site (web) level await sp.web.userCustomActions.clear(); // List level await sp.web.lists.getByTitle(\"Documents\").userCustomActions.clear();","title":"Clear the User Custom Action collection"},{"location":"sp/user-custom-actions/#iusercustomaction","text":"","title":"IUserCustomAction"},{"location":"sp/user-custom-actions/#update-an-existing-user-custom-action","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/user-custom-actions\"; import { IUserCustomActionUpdateResult } from '@pnp/sp/user-custom-actions'; const sp = spfi(...); const uca = sp.web.userCustomActions.getById(\"00000000-0000-0000-0000-000000000000\"); const newValues: TypedHash<string> = { \"Title\": \"New Title\", \"Description\": \"New Description\", \"ScriptSrc\": \"https://...\" }; const response: IUserCustomActionUpdateResult = uca.update(newValues);","title":"Update an existing User Custom Action"},{"location":"sp/views/","text":"@pnp/sp/views \u00b6 Views define the columns, ordering, and other details we see when we look at a list. You can have multiple views for a list, including private views - and one default view. IViews \u00b6 Get views in a list \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"My List\"); // get all the views and their properties const views1 = await list.views(); // you can use odata select operations to get just a set a fields const views2 = await list.views.select(\"Id\", \"Title\")(); // get the top three views const views3 = await list.views.top(3)(); Add a View \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"My List\"); // create a new view with default fields and properties const result = await list.views.add(\"My New View\"); // create a new view with specific properties const result2 = await list.views.add(\"My New View 2\", false, { RowLimit: 10, ViewQuery: \"<OrderBy><FieldRef Name='Modified' Ascending='False' /></OrderBy>\", }); // manipulate the view's fields await result2.view.fields.removeAll(); await Promise.all([ result2.view.fields.add(\"Title\"), result2.view.fields.add(\"Modified\"), ]); IView \u00b6 Get a View's Information \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"My List\"); const result = await list.views.getById(\"{GUID view id}\")(); const result2 = await list.views.getByTitle(\"My View\")(); const result3 = await list.views.getByTitle(\"My View\").select(\"Id\", \"Title\")(); const result4 = await list.defaultView(); const result5 = await list.getView(\"{GUID view id}\")(); fields \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"My List\"); const result = await list.views.getById(\"{GUID view id}\").fields(); update \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"My List\"); const result = await list.views.getById(\"{GUID view id}\").update({ RowLimit: 20, }); renderAsHtml \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const result = await sp.web.lists.getByTitle(\"My List\").views.getById(\"{GUID view id}\").renderAsHtml(); setViewXml \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const viewXml = \"...\"; await sp.web.lists.getByTitle(\"My List\").views.getById(\"{GUID view id}\").setViewXml(viewXml); delete \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const viewXml = \"...\"; await sp.web.lists.getByTitle(\"My List\").views.getById(\"{GUID view id}\").delete(); ViewFields \u00b6 getSchemaXml \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const xml = await sp.web.lists.getByTitle(\"My List\").defaultView.fields.getSchemaXml(); add \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"My List\").defaultView.fields.add(\"Created\"); move \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"My List\").defaultView.fields.move(\"Created\", 0); remove \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"My List\").defaultView.fields.remove(\"Created\"); removeAll \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"My List\").defaultView.fields.removeAll();","title":"Views"},{"location":"sp/views/#pnpspviews","text":"Views define the columns, ordering, and other details we see when we look at a list. You can have multiple views for a list, including private views - and one default view.","title":"@pnp/sp/views"},{"location":"sp/views/#iviews","text":"","title":"IViews"},{"location":"sp/views/#get-views-in-a-list","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"My List\"); // get all the views and their properties const views1 = await list.views(); // you can use odata select operations to get just a set a fields const views2 = await list.views.select(\"Id\", \"Title\")(); // get the top three views const views3 = await list.views.top(3)();","title":"Get views in a list"},{"location":"sp/views/#add-a-view","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"My List\"); // create a new view with default fields and properties const result = await list.views.add(\"My New View\"); // create a new view with specific properties const result2 = await list.views.add(\"My New View 2\", false, { RowLimit: 10, ViewQuery: \"<OrderBy><FieldRef Name='Modified' Ascending='False' /></OrderBy>\", }); // manipulate the view's fields await result2.view.fields.removeAll(); await Promise.all([ result2.view.fields.add(\"Title\"), result2.view.fields.add(\"Modified\"), ]);","title":"Add a View"},{"location":"sp/views/#iview","text":"","title":"IView"},{"location":"sp/views/#get-a-views-information","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"My List\"); const result = await list.views.getById(\"{GUID view id}\")(); const result2 = await list.views.getByTitle(\"My View\")(); const result3 = await list.views.getByTitle(\"My View\").select(\"Id\", \"Title\")(); const result4 = await list.defaultView(); const result5 = await list.getView(\"{GUID view id}\")();","title":"Get a View's Information"},{"location":"sp/views/#fields","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"My List\"); const result = await list.views.getById(\"{GUID view id}\").fields();","title":"fields"},{"location":"sp/views/#update","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const list = sp.web.lists.getByTitle(\"My List\"); const result = await list.views.getById(\"{GUID view id}\").update({ RowLimit: 20, });","title":"update"},{"location":"sp/views/#renderashtml","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const result = await sp.web.lists.getByTitle(\"My List\").views.getById(\"{GUID view id}\").renderAsHtml();","title":"renderAsHtml"},{"location":"sp/views/#setviewxml","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const viewXml = \"...\"; await sp.web.lists.getByTitle(\"My List\").views.getById(\"{GUID view id}\").setViewXml(viewXml);","title":"setViewXml"},{"location":"sp/views/#delete","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const viewXml = \"...\"; await sp.web.lists.getByTitle(\"My List\").views.getById(\"{GUID view id}\").delete();","title":"delete"},{"location":"sp/views/#viewfields","text":"","title":"ViewFields"},{"location":"sp/views/#getschemaxml","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); const xml = await sp.web.lists.getByTitle(\"My List\").defaultView.fields.getSchemaXml();","title":"getSchemaXml"},{"location":"sp/views/#add","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"My List\").defaultView.fields.add(\"Created\");","title":"add"},{"location":"sp/views/#move","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"My List\").defaultView.fields.move(\"Created\", 0);","title":"move"},{"location":"sp/views/#remove","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"My List\").defaultView.fields.remove(\"Created\");","title":"remove"},{"location":"sp/views/#removeall","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/views\"; const sp = spfi(...); await sp.web.lists.getByTitle(\"My List\").defaultView.fields.removeAll();","title":"removeAll"},{"location":"sp/webs/","text":"@pnp/sp/webs \u00b6 Webs are one of the fundamental entry points when working with SharePoint. Webs serve as a container for lists, features, sub-webs, and all of the entity types. IWebs \u00b6 Add Web \u00b6 Using the library you can add a web to another web's collection of subwebs. The simplest usage requires only a title and url. This will result in a team site with all of the default settings. You can also provide other settings such as description, template, language, and inherit permissions. import { spfi } from \"@pnp/sp\"; import { IWebAddResult } from \"@pnp/sp/webs\"; const sp = spfi(...); const result = await sp.web.webs.add(\"title\", \"subweb1\"); // show the response from the server when adding the web console.log(result.data); // we can immediately operate on the new web result.web.select(\"Title\")().then((w: IWebInfo) => { // show our title console.log(w.Title); }); import { spfi } from \"@pnp/sp\"; import { IWebAddResult } from \"@pnp/sp/webs\"; const sp = spfi(...); // create a German language wiki site with title, url, description, which does not inherit permissions sp.web.webs.add(\"wiki\", \"subweb2\", \"a wiki web\", \"WIKI#0\", 1031, false).then((w: IWebAddResult) => { // ... }); IWeb \u00b6 Access a Web \u00b6 There are several ways to access a web instance, each of these methods is equivalent in that you will have an IWeb instance to work with. All of the examples below use a variable named \"web\" which represents an IWeb instance - regardless of how it was initially accessed. Access the web from the imported \"spfi\" object using selective import: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const r = await sp.web(); Access the web from the imported \"spfi\" object using the 'all' preset import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const r = await sp.web(); Access the web using any SPQueryable as a base In this scenario you might be deep in your code without access to the original start of the fluid chain (i.e. the instance produced from spfi). You can pass any queryable to the Web or Site factory and get back a valid IWeb instance. In this case all of the observers registered to the supplied instance will be referenced by the IWeb, and the url will be rebased to ensure a valid path. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); // we have a ref to the IItems instance const items = await sp.web.lists.getByTitle(\"Generic\").items; // we create a new IWeb instance using the items as a base const web = Web(items); // gets the web info const webInfo = await web(); // get a reference to a different list const list = web.lists.getByTitle(\"DifferentList\"); Access a web using the Web factory method There are several ways to use the Web factory directly and have some special considerations unique to creating IWeb instances from Web . The easiest is to supply the absolute URL of the web you wish to target, as seen in the first example below. When supplying a path parameter to Web you need to include the _api/web part in the appropriate location as the library can't from strings determine how to append the path. Example 2 below shows a wrong usage of the Web factory as we cannot determine how the path part should be appended. Examples 3 and 4 show how to include the _api/web part for both subwebs or queries within the given web. When in doubt, supply the absolute url to the web as the first parameter as shown in example 1 below import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; // creates a web: // - whose root is \"https://tenant.sharepoint.com/sites/myweb\" // - whose request path is \"https://tenant.sharepoint.com/sites/myweb/_api/web\" // - has no registered observers const web1 = Web(\"https://tenant.sharepoint.com/sites/myweb\"); // creates a web that will not work due to missing the _api/web portion // this is because we don't know that the extra path should come before/after the _api/web portion // - whose root is \"https://tenant.sharepoint.com/sites/myweb/some sub path\" // - whose request path is \"https://tenant.sharepoint.com/sites/myweb/some sub path\" // - has no registered observers const web2-WRONG = Web(\"https://tenant.sharepoint.com/sites/myweb\", \"some sub path\"); // creates a web: // - whose root is \"https://tenant.sharepoint.com/sites/myweb/some sub path\" // - whose request path is \"https://tenant.sharepoint.com/sites/myweb/some sub web/_api/web\" // including the _api/web ensures the path you are providing is correct and can be parsed by the library // - has no registered observers const web3 = Web(\"https://tenant.sharepoint.com/sites/myweb\", \"some sub web/_api/web\"); // creates a web that actually points to the lists endpoint: // - whose root is \"https://tenant.sharepoint.com/sites/myweb/\" // - whose request path is \"https://tenant.sharepoint.com/sites/myweb/_api/web/lists\" // including the _api/web ensures the path you are providing is correct and can be parsed by the library // - has no registered observers const web4 = Web(\"https://tenant.sharepoint.com/sites/myweb\", \"_api/web/lists\"); webs \u00b6 Access the child webs collection of this web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; const webs = await web.webs(); Get A Web's properties \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // basic get of the webs properties const props = await sp.web(); // use odata operators to get specific fields const props2 = await sp.web.select(\"Title\")(); // type the result to match what you are requesting const props3 = await sp.web.select(\"Title\")<{ Title: string }>(); getParentWeb \u00b6 Get the data and IWeb instance for the parent web for the given web instance import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = web.getParentWeb(); getSubwebsFilteredForCurrentUser \u00b6 Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; const subWebs = web.getSubwebsFilteredForCurrentUser()(); // apply odata operations to the collection const subWebs2 = await sp.web.getSubwebsFilteredForCurrentUser().select(\"Title\", \"Language\").orderBy(\"Created\", true)(); Note: getSubwebsFilteredForCurrentUser returns IWebInfosData which is a subset of all the available fields on IWebInfo. allProperties \u00b6 Allows access to the web's all properties collection. This is readonly in REST. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; const props = await web.allProperties(); // select certain props const props2 = await web.allProperties.select(\"prop1\", \"prop2\")(); webinfos \u00b6 Gets a collection of WebInfos for this web's subwebs import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; const infos = await web.webinfos(); // or select certain fields const infos2 = await web.webinfos.select(\"Title\", \"Description\")(); // or filter const infos3 = await web.webinfos.filter(\"Title eq 'MyWebTitle'\")(); // or both const infos4 = await web.webinfos.select(\"Title\", \"Description\").filter(\"Title eq 'MyWebTitle'\")(); // get the top 4 ordered by Title const infos5 = await web.webinfos.top(4).orderBy(\"Title\")(); Note: webinfos returns IWebInfosData which is a subset of all the available fields on IWebInfo. update \u00b6 Updates this web instance with the supplied properties import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; // update the web's title and description const result = await web.update({ Title: \"New Title\", Description: \"My new description\", }); // a project implementation could wrap the update to provide type information for your expected fields: interface IWebUpdateProps { Title: string; Description: string; } function updateWeb(props: IWebUpdateProps): Promise<void> { web.update(props); } Delete a Web \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; await web.delete(); applyTheme \u00b6 Applies the theme specified by the contents of each of the files specified in the arguments to the site import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { combine } from \"@pnp/core\"; const sp = spfi(\"https://{tenant}.sharepoint.com/sites/dev/subweb\").using(SPFx(this.context)); const web = sp.web; // the urls to the color and font need to both be from the catalog at the root // these urls can be constants or calculated from existing urls const colorUrl = combine(\"/\", \"sites/dev\", \"_catalogs/theme/15/palette011.spcolor\"); // this gives us the same result const fontUrl = \"/sites/dev/_catalogs/theme/15/fontscheme007.spfont\"; // apply the font and color, no background image, and don't share this theme await web.applyTheme(colorUrl, fontUrl, \"\", false); applyWebTemplate & availableWebTemplates \u00b6 Applies the specified site definition or site template to the Web site that has no template applied to it. This is seldom used outside provisioning scenarios. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; const templates = (await web.availableWebTemplates().select(\"Name\")<{ Name: string }[]>()).filter(t => /ENTERWIKI#0/i.test(t.Name)); // apply the wiki template const template = templates.length > 0 ? templates[0].Name : \"STS#0\"; await web.applyWebTemplate(template); getChanges \u00b6 Returns the collection of changes from the change log that have occurred within the web, based on the specified query. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; // get the web changes including add, update, and delete const changes = await web.getChanges({ Add: true, ChangeTokenEnd: undefined, ChangeTokenStart: undefined, DeleteObject: true, Update: true, Web: true, }); mapToIcon \u00b6 Returns the name of the image file for the icon that is used to represent the specified file import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { combine } from \"@pnp/core\"; const iconFileName = await web.mapToIcon(\"test.docx\"); // iconPath === \"icdocx.png\" // which you can need to map to a real url const iconFullPath = `https://{tenant}.sharepoint.com/sites/dev/_layouts/images/${iconFileName}`; // OR dynamically const sp = spfi(...); const webData = await sp.web.select(\"Url\")(); const iconFullPath2 = combine(webData.Url, \"_layouts\", \"images\", iconFileName); // OR within SPFx using the context const iconFullPath3 = combine(this.context.pageContext.web.absoluteUrl, \"_layouts\", \"images\", iconFileName); // You can also set size // 16x16 pixels = 0, 32x32 pixels = 1 const icon32FileName = await web.mapToIcon(\"test.docx\", 1); storage entities \u00b6 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/appcatalog\"; import { IStorageEntity } from \"@pnp/sp/webs\"; // needs to be unique, GUIDs are great const key = \"my-storage-key\"; const sp = spfi(...); // read an existing entity const entity: IStorageEntity = await sp.web.getStorageEntity(key); // setStorageEntity and removeStorageEntity must be called in the context of the tenant app catalog site // you can get the tenant app catalog using the getTenantAppCatalogWeb const tenantAppCatalogWeb = await sp.getTenantAppCatalogWeb(); tenantAppCatalogWeb.setStorageEntity(key, \"new value\"); // set other properties tenantAppCatalogWeb.setStorageEntity(key, \"another value\", \"description\", \"comments\"); const entity2: IStorageEntity = await sp.web.getStorageEntity(key); /* entity2 === { Value: \"another value\", Comment: \"comments\"; Description: \"description\", }; */ // you can also remove a storage entity await tenantAppCatalogWeb.removeStorageEntity(key); getAppCatalog \u00b6 Returns this web as an IAppCatalog instance or creates a new IAppCatalog instance from the provided url. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { IApp } from \"@pnp/sp/appcatalog\"; const sp = spfi(...); const appWeb = sp.web.appcatalog; const app: IApp = appWeb.getAppById(\"{your app id}\"); // appWeb url === web url client-side-pages \u00b6 You can create and load clientside page instances directly from a web. More details on working with clientside pages are available in the dedicated article. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages/web\"; const sp = spfi(...); // simplest add a page example const page = await sp.web.addClientsidePage(\"mypage1\"); // simplest load a page example const page = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/mypage3.aspx\"); contentTypes \u00b6 Allows access to the collection of content types in this web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/content-types/web\"; const sp = spfi(...); const cts = await sp.web.contentTypes(); // you can also select fields and use other odata operators const cts2 = await sp.web.contentTypes.select(\"Name\")(); features \u00b6 Allows access to the collection of content types in this web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/features/web\"; const sp = spfi(...); const features = await sp.web.features(); fields \u00b6 Allows access to the collection of fields in this web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/fields/web\"; const sp = spfi(...); const fields = await sp.web.fields(); getFileByServerRelativePath \u00b6 Gets a file by server relative url if your file name contains # and % characters import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files/web\"; import { IFile } from \"@pnp/sp/files/types\"; const sp = spfi(...); const file: IFile = web.getFileByServerRelativePath(\"/sites/dev/library/my # file%.docx\"); folders \u00b6 Gets the collection of folders in this web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders/web\"; const sp = spfi(...); const folders = await sp.web.folders(); // you can also filter and select as with any collection const folders2 = await sp.web.folders.select(\"ServerRelativeUrl\", \"TimeLastModified\").filter(\"ItemCount gt 0\")(); // or get the most recently modified folder const folders2 = await sp.web.folders.orderBy(\"TimeLastModified\").top(1)(); rootFolder \u00b6 Gets the root folder of the web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders/web\"; const sp = spfi(...); const folder = await sp.web.rootFolder(); getFolderByServerRelativePath \u00b6 Gets a folder by server relative url if your folder name contains # and % characters import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders/web\"; import { IFolder } from \"@pnp/sp/folders\"; const sp = spfi(...); const folder: IFolder = web.getFolderByServerRelativePath(\"/sites/dev/library/my # folder%/\"); hubSiteData \u00b6 Gets hub site data for the current web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/hubsites/web\"; const sp = spfi(...); // get the data and force a refresh const data = await sp.web.hubSiteData(true); syncHubSiteTheme \u00b6 Applies theme updates from the parent hub site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/hubsites/web\"; const sp = spfi(...); await sp.web.syncHubSiteTheme(); lists \u00b6 Gets the collection of all lists that are contained in the Web site import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { ILists } from \"@pnp/sp/lists\"; const sp = spfi(...); const lists: ILists = sp.web.lists; // you can always order the lists and select properties const data = await lists.select(\"Title\").orderBy(\"Title\")(); // and use other odata operators as well const data2 = await sp.web.lists.top(3).orderBy(\"LastItemModifiedDate\")(); siteUserInfoList \u00b6 Gets the UserInfo list of the site collection that contains the Web site import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { IList } from \"@pnp/sp/lists\"; const sp = spfi(...); const list: IList = sp.web.siteUserInfoList; const data = await list(); // or chain off that list to get additional details const items = await list.items.top(2)(); defaultDocumentLibrary \u00b6 Get a reference the default documents library of a web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { IList } from \"@pnp/sp/lists/web\"; const sp = spfi(...); const list: IList = sp.web.defaultDocumentLibrary; customListTemplates \u00b6 Gets the collection of all list definitions and list templates that are available import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { IList } from \"@pnp/sp/lists\"; const sp = spfi(...); const templates = await sp.web.customListTemplates(); // odata operators chain off the collection as expected const templates2 = await sp.web.customListTemplates.select(\"Title\")(); getList \u00b6 Gets a list by server relative url (list's root folder) import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { IList } from \"@pnp/sp/lists/web\"; const sp = spfi(...); const list: IList = sp.web.getList(\"/sites/dev/lists/test\"); const listData = await list(); getCatalog \u00b6 Returns the list gallery on the site Name Value WebTemplateCatalog 111 WebPartCatalog 113 ListTemplateCatalog 114 MasterPageCatalog 116 SolutionCatalog 121 ThemeCatalog 123 DesignCatalog 124 AppDataCatalog 125 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { IList } from \"@pnp/sp/lists\"; const sp = spfi(...); const templateCatalog: IList = await sp.web.getCatalog(111); const themeCatalog: IList = await sp.web.getCatalog(123); navigation \u00b6 Gets a navigation object that represents navigation on the Web site, including the Quick Launch area and the top navigation bar import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/navigation/web\"; import { INavigation } from \"@pnp/sp/navigation\"; const sp = spfi(...); const nav: INavigation = sp.web.navigation; import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/navigation/web\"; import { IRegionalSettings } from \"@pnp/sp/navigation\"; const sp = spfi(...); const settings: IRegionalSettings = sp.web.regionalSettings; const settingsData = await settings(); import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/related-items/web\"; import { IRelatedItemManager, IRelatedItem } from \"@pnp/sp/related-items\"; const sp = spfi(...); const manager: IRelatedItemManager = sp.web.relatedItems; const data: IRelatedItem[] = await manager.getRelatedItems(\"{list name}\", 4); security imports \u00b6 Please see information around the available security methods in the security article . sharing imports \u00b6 Please see information around the available sharing methods in the sharing article . siteGroups \u00b6 The site groups import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); const groups = await sp.web.siteGroups(); const groups2 = await sp.web.siteGroups.top(2)(); associatedOwnerGroup \u00b6 The web's owner group import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); const group = await sp.web.associatedOwnerGroup(); const users = await sp.web.associatedOwnerGroup.users(); associatedMemberGroup \u00b6 The web's member group import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); const group = await sp.web.associatedMemberGroup(); const users = await sp.web.associatedMemberGroup.users(); associatedVisitorGroup \u00b6 The web's visitor group import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); const group = await sp.web.associatedVisitorGroup(); const users = await sp.web.associatedVisitorGroup.users(); createDefaultAssociatedGroups \u00b6 Creates the default associated groups (Members, Owners, Visitors) and gives them the default permissions on the site. The target site must have unique permissions and no associated members / owners / visitors groups import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); await sp.web.createDefaultAssociatedGroups(\"Contoso\", \"{first owner login}\"); // copy the role assignments await sp.web.createDefaultAssociatedGroups(\"Contoso\", \"{first owner login}\", true); // don't clear sub assignments await sp.web.createDefaultAssociatedGroups(\"Contoso\", \"{first owner login}\", false, false); // specify secondary owner, don't copy permissions, clear sub scopes await sp.web.createDefaultAssociatedGroups(\"Contoso\", \"{first owner login}\", false, true, \"{second owner login}\"); siteUsers \u00b6 The site users import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); const users = await sp.web.siteUsers(); const users2 = await sp.web.siteUsers.top(5)(); const users3 = await sp.web.siteUsers.filter(`startswith(LoginName, '${encodeURIComponent(\"i:0#.f|m\")}')`)(); currentUser \u00b6 Information on the current user import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); const user = await sp.web.currentUser(); // check the login name of the current user const user2 = await sp.web.currentUser.select(\"LoginName\")(); ensureUser \u00b6 Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; import { IWebEnsureUserResult } from \"@pnp/sp/site-users/\"; const sp = spfi(...); const result: IWebEnsureUserResult = await sp.web.ensureUser(\"i:0#.f|membership|user@domain.onmicrosoft.com\"); getUserById \u00b6 Returns the user corresponding to the specified member identifier for the current web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; import { ISiteUser } from \"@pnp/sp/site-users/\"; const sp = spfi(...); const user: ISiteUser = sp.web.getUserById(23); const userData = await user(); const userData2 = await user.select(\"LoginName\")(); userCustomActions \u00b6 Gets a newly refreshed collection of the SPWeb's SPUserCustomActionCollection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/user-custom-actions/web\"; import { IUserCustomActions } from \"@pnp/sp/user-custom-actions\"; const sp = spfi(...); const actions: IUserCustomActions = sp.web.userCustomActions; const actionsData = await actions(); IWebInfosData \u00b6 Some web operations return a subset of web information defined by the IWebInfosData interface, shown below. In those cases only these fields are available for select, orderby, and other odata operations. interface IWebInfosData { Configuration: number; Created: string; Description: string; Id: string; Language: number; LastItemModifiedDate: string; LastItemUserModifiedDate: string; ServerRelativeUrl: string; Title: string; WebTemplate: string; WebTemplateId: number; }","title":"Webs"},{"location":"sp/webs/#pnpspwebs","text":"Webs are one of the fundamental entry points when working with SharePoint. Webs serve as a container for lists, features, sub-webs, and all of the entity types.","title":"@pnp/sp/webs"},{"location":"sp/webs/#iwebs","text":"","title":"IWebs"},{"location":"sp/webs/#add-web","text":"Using the library you can add a web to another web's collection of subwebs. The simplest usage requires only a title and url. This will result in a team site with all of the default settings. You can also provide other settings such as description, template, language, and inherit permissions. import { spfi } from \"@pnp/sp\"; import { IWebAddResult } from \"@pnp/sp/webs\"; const sp = spfi(...); const result = await sp.web.webs.add(\"title\", \"subweb1\"); // show the response from the server when adding the web console.log(result.data); // we can immediately operate on the new web result.web.select(\"Title\")().then((w: IWebInfo) => { // show our title console.log(w.Title); }); import { spfi } from \"@pnp/sp\"; import { IWebAddResult } from \"@pnp/sp/webs\"; const sp = spfi(...); // create a German language wiki site with title, url, description, which does not inherit permissions sp.web.webs.add(\"wiki\", \"subweb2\", \"a wiki web\", \"WIKI#0\", 1031, false).then((w: IWebAddResult) => { // ... });","title":"Add Web"},{"location":"sp/webs/#iweb","text":"","title":"IWeb"},{"location":"sp/webs/#access-a-web","text":"There are several ways to access a web instance, each of these methods is equivalent in that you will have an IWeb instance to work with. All of the examples below use a variable named \"web\" which represents an IWeb instance - regardless of how it was initially accessed. Access the web from the imported \"spfi\" object using selective import: import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const r = await sp.web(); Access the web from the imported \"spfi\" object using the 'all' preset import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const r = await sp.web(); Access the web using any SPQueryable as a base In this scenario you might be deep in your code without access to the original start of the fluid chain (i.e. the instance produced from spfi). You can pass any queryable to the Web or Site factory and get back a valid IWeb instance. In this case all of the observers registered to the supplied instance will be referenced by the IWeb, and the url will be rebased to ensure a valid path. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists\"; import \"@pnp/sp/items\"; const sp = spfi(...); // we have a ref to the IItems instance const items = await sp.web.lists.getByTitle(\"Generic\").items; // we create a new IWeb instance using the items as a base const web = Web(items); // gets the web info const webInfo = await web(); // get a reference to a different list const list = web.lists.getByTitle(\"DifferentList\"); Access a web using the Web factory method There are several ways to use the Web factory directly and have some special considerations unique to creating IWeb instances from Web . The easiest is to supply the absolute URL of the web you wish to target, as seen in the first example below. When supplying a path parameter to Web you need to include the _api/web part in the appropriate location as the library can't from strings determine how to append the path. Example 2 below shows a wrong usage of the Web factory as we cannot determine how the path part should be appended. Examples 3 and 4 show how to include the _api/web part for both subwebs or queries within the given web. When in doubt, supply the absolute url to the web as the first parameter as shown in example 1 below import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; // creates a web: // - whose root is \"https://tenant.sharepoint.com/sites/myweb\" // - whose request path is \"https://tenant.sharepoint.com/sites/myweb/_api/web\" // - has no registered observers const web1 = Web(\"https://tenant.sharepoint.com/sites/myweb\"); // creates a web that will not work due to missing the _api/web portion // this is because we don't know that the extra path should come before/after the _api/web portion // - whose root is \"https://tenant.sharepoint.com/sites/myweb/some sub path\" // - whose request path is \"https://tenant.sharepoint.com/sites/myweb/some sub path\" // - has no registered observers const web2-WRONG = Web(\"https://tenant.sharepoint.com/sites/myweb\", \"some sub path\"); // creates a web: // - whose root is \"https://tenant.sharepoint.com/sites/myweb/some sub path\" // - whose request path is \"https://tenant.sharepoint.com/sites/myweb/some sub web/_api/web\" // including the _api/web ensures the path you are providing is correct and can be parsed by the library // - has no registered observers const web3 = Web(\"https://tenant.sharepoint.com/sites/myweb\", \"some sub web/_api/web\"); // creates a web that actually points to the lists endpoint: // - whose root is \"https://tenant.sharepoint.com/sites/myweb/\" // - whose request path is \"https://tenant.sharepoint.com/sites/myweb/_api/web/lists\" // including the _api/web ensures the path you are providing is correct and can be parsed by the library // - has no registered observers const web4 = Web(\"https://tenant.sharepoint.com/sites/myweb\", \"_api/web/lists\");","title":"Access a Web"},{"location":"sp/webs/#webs","text":"Access the child webs collection of this web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; const webs = await web.webs();","title":"webs"},{"location":"sp/webs/#get-a-webs-properties","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); // basic get of the webs properties const props = await sp.web(); // use odata operators to get specific fields const props2 = await sp.web.select(\"Title\")(); // type the result to match what you are requesting const props3 = await sp.web.select(\"Title\")<{ Title: string }>();","title":"Get A Web's properties"},{"location":"sp/webs/#getparentweb","text":"Get the data and IWeb instance for the parent web for the given web instance import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = web.getParentWeb();","title":"getParentWeb"},{"location":"sp/webs/#getsubwebsfilteredforcurrentuser","text":"Returns a collection of objects that contain metadata about subsites of the current site in which the current user is a member. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; const subWebs = web.getSubwebsFilteredForCurrentUser()(); // apply odata operations to the collection const subWebs2 = await sp.web.getSubwebsFilteredForCurrentUser().select(\"Title\", \"Language\").orderBy(\"Created\", true)(); Note: getSubwebsFilteredForCurrentUser returns IWebInfosData which is a subset of all the available fields on IWebInfo.","title":"getSubwebsFilteredForCurrentUser"},{"location":"sp/webs/#allproperties","text":"Allows access to the web's all properties collection. This is readonly in REST. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; const props = await web.allProperties(); // select certain props const props2 = await web.allProperties.select(\"prop1\", \"prop2\")();","title":"allProperties"},{"location":"sp/webs/#webinfos","text":"Gets a collection of WebInfos for this web's subwebs import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; const infos = await web.webinfos(); // or select certain fields const infos2 = await web.webinfos.select(\"Title\", \"Description\")(); // or filter const infos3 = await web.webinfos.filter(\"Title eq 'MyWebTitle'\")(); // or both const infos4 = await web.webinfos.select(\"Title\", \"Description\").filter(\"Title eq 'MyWebTitle'\")(); // get the top 4 ordered by Title const infos5 = await web.webinfos.top(4).orderBy(\"Title\")(); Note: webinfos returns IWebInfosData which is a subset of all the available fields on IWebInfo.","title":"webinfos"},{"location":"sp/webs/#update","text":"Updates this web instance with the supplied properties import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; // update the web's title and description const result = await web.update({ Title: \"New Title\", Description: \"My new description\", }); // a project implementation could wrap the update to provide type information for your expected fields: interface IWebUpdateProps { Title: string; Description: string; } function updateWeb(props: IWebUpdateProps): Promise<void> { web.update(props); }","title":"update"},{"location":"sp/webs/#delete-a-web","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; await web.delete();","title":"Delete a Web"},{"location":"sp/webs/#applytheme","text":"Applies the theme specified by the contents of each of the files specified in the arguments to the site import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { combine } from \"@pnp/core\"; const sp = spfi(\"https://{tenant}.sharepoint.com/sites/dev/subweb\").using(SPFx(this.context)); const web = sp.web; // the urls to the color and font need to both be from the catalog at the root // these urls can be constants or calculated from existing urls const colorUrl = combine(\"/\", \"sites/dev\", \"_catalogs/theme/15/palette011.spcolor\"); // this gives us the same result const fontUrl = \"/sites/dev/_catalogs/theme/15/fontscheme007.spfont\"; // apply the font and color, no background image, and don't share this theme await web.applyTheme(colorUrl, fontUrl, \"\", false);","title":"applyTheme"},{"location":"sp/webs/#applywebtemplate-availablewebtemplates","text":"Applies the specified site definition or site template to the Web site that has no template applied to it. This is seldom used outside provisioning scenarios. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; const templates = (await web.availableWebTemplates().select(\"Name\")<{ Name: string }[]>()).filter(t => /ENTERWIKI#0/i.test(t.Name)); // apply the wiki template const template = templates.length > 0 ? templates[0].Name : \"STS#0\"; await web.applyWebTemplate(template);","title":"applyWebTemplate &amp; availableWebTemplates"},{"location":"sp/webs/#getchanges","text":"Returns the collection of changes from the change log that have occurred within the web, based on the specified query. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; const sp = spfi(...); const web = sp.web; // get the web changes including add, update, and delete const changes = await web.getChanges({ Add: true, ChangeTokenEnd: undefined, ChangeTokenStart: undefined, DeleteObject: true, Update: true, Web: true, });","title":"getChanges"},{"location":"sp/webs/#maptoicon","text":"Returns the name of the image file for the icon that is used to represent the specified file import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { combine } from \"@pnp/core\"; const iconFileName = await web.mapToIcon(\"test.docx\"); // iconPath === \"icdocx.png\" // which you can need to map to a real url const iconFullPath = `https://{tenant}.sharepoint.com/sites/dev/_layouts/images/${iconFileName}`; // OR dynamically const sp = spfi(...); const webData = await sp.web.select(\"Url\")(); const iconFullPath2 = combine(webData.Url, \"_layouts\", \"images\", iconFileName); // OR within SPFx using the context const iconFullPath3 = combine(this.context.pageContext.web.absoluteUrl, \"_layouts\", \"images\", iconFileName); // You can also set size // 16x16 pixels = 0, 32x32 pixels = 1 const icon32FileName = await web.mapToIcon(\"test.docx\", 1);","title":"mapToIcon"},{"location":"sp/webs/#storage-entities","text":"import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/appcatalog\"; import { IStorageEntity } from \"@pnp/sp/webs\"; // needs to be unique, GUIDs are great const key = \"my-storage-key\"; const sp = spfi(...); // read an existing entity const entity: IStorageEntity = await sp.web.getStorageEntity(key); // setStorageEntity and removeStorageEntity must be called in the context of the tenant app catalog site // you can get the tenant app catalog using the getTenantAppCatalogWeb const tenantAppCatalogWeb = await sp.getTenantAppCatalogWeb(); tenantAppCatalogWeb.setStorageEntity(key, \"new value\"); // set other properties tenantAppCatalogWeb.setStorageEntity(key, \"another value\", \"description\", \"comments\"); const entity2: IStorageEntity = await sp.web.getStorageEntity(key); /* entity2 === { Value: \"another value\", Comment: \"comments\"; Description: \"description\", }; */ // you can also remove a storage entity await tenantAppCatalogWeb.removeStorageEntity(key);","title":"storage entities"},{"location":"sp/webs/#getappcatalog","text":"Returns this web as an IAppCatalog instance or creates a new IAppCatalog instance from the provided url. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { IApp } from \"@pnp/sp/appcatalog\"; const sp = spfi(...); const appWeb = sp.web.appcatalog; const app: IApp = appWeb.getAppById(\"{your app id}\"); // appWeb url === web url","title":"getAppCatalog"},{"location":"sp/webs/#client-side-pages","text":"You can create and load clientside page instances directly from a web. More details on working with clientside pages are available in the dedicated article. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/clientside-pages/web\"; const sp = spfi(...); // simplest add a page example const page = await sp.web.addClientsidePage(\"mypage1\"); // simplest load a page example const page = await sp.web.loadClientsidePage(\"/sites/dev/sitepages/mypage3.aspx\");","title":"client-side-pages"},{"location":"sp/webs/#contenttypes","text":"Allows access to the collection of content types in this web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/content-types/web\"; const sp = spfi(...); const cts = await sp.web.contentTypes(); // you can also select fields and use other odata operators const cts2 = await sp.web.contentTypes.select(\"Name\")();","title":"contentTypes"},{"location":"sp/webs/#features","text":"Allows access to the collection of content types in this web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/features/web\"; const sp = spfi(...); const features = await sp.web.features();","title":"features"},{"location":"sp/webs/#fields","text":"Allows access to the collection of fields in this web. import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/fields/web\"; const sp = spfi(...); const fields = await sp.web.fields();","title":"fields"},{"location":"sp/webs/#getfilebyserverrelativepath","text":"Gets a file by server relative url if your file name contains # and % characters import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/files/web\"; import { IFile } from \"@pnp/sp/files/types\"; const sp = spfi(...); const file: IFile = web.getFileByServerRelativePath(\"/sites/dev/library/my # file%.docx\");","title":"getFileByServerRelativePath"},{"location":"sp/webs/#folders","text":"Gets the collection of folders in this web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders/web\"; const sp = spfi(...); const folders = await sp.web.folders(); // you can also filter and select as with any collection const folders2 = await sp.web.folders.select(\"ServerRelativeUrl\", \"TimeLastModified\").filter(\"ItemCount gt 0\")(); // or get the most recently modified folder const folders2 = await sp.web.folders.orderBy(\"TimeLastModified\").top(1)();","title":"folders"},{"location":"sp/webs/#rootfolder","text":"Gets the root folder of the web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders/web\"; const sp = spfi(...); const folder = await sp.web.rootFolder();","title":"rootFolder"},{"location":"sp/webs/#getfolderbyserverrelativepath","text":"Gets a folder by server relative url if your folder name contains # and % characters import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/folders/web\"; import { IFolder } from \"@pnp/sp/folders\"; const sp = spfi(...); const folder: IFolder = web.getFolderByServerRelativePath(\"/sites/dev/library/my # folder%/\");","title":"getFolderByServerRelativePath"},{"location":"sp/webs/#hubsitedata","text":"Gets hub site data for the current web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/hubsites/web\"; const sp = spfi(...); // get the data and force a refresh const data = await sp.web.hubSiteData(true);","title":"hubSiteData"},{"location":"sp/webs/#synchubsitetheme","text":"Applies theme updates from the parent hub site collection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/hubsites/web\"; const sp = spfi(...); await sp.web.syncHubSiteTheme();","title":"syncHubSiteTheme"},{"location":"sp/webs/#lists","text":"Gets the collection of all lists that are contained in the Web site import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { ILists } from \"@pnp/sp/lists\"; const sp = spfi(...); const lists: ILists = sp.web.lists; // you can always order the lists and select properties const data = await lists.select(\"Title\").orderBy(\"Title\")(); // and use other odata operators as well const data2 = await sp.web.lists.top(3).orderBy(\"LastItemModifiedDate\")();","title":"lists"},{"location":"sp/webs/#siteuserinfolist","text":"Gets the UserInfo list of the site collection that contains the Web site import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { IList } from \"@pnp/sp/lists\"; const sp = spfi(...); const list: IList = sp.web.siteUserInfoList; const data = await list(); // or chain off that list to get additional details const items = await list.items.top(2)();","title":"siteUserInfoList"},{"location":"sp/webs/#defaultdocumentlibrary","text":"Get a reference the default documents library of a web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { IList } from \"@pnp/sp/lists/web\"; const sp = spfi(...); const list: IList = sp.web.defaultDocumentLibrary;","title":"defaultDocumentLibrary"},{"location":"sp/webs/#customlisttemplates","text":"Gets the collection of all list definitions and list templates that are available import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/lists/web\"; import { IList } from \"@pnp/sp/lists\"; const sp = spfi(...); const templates = await sp.web.customListTemplates(); // odata operators chain off the collection as expected const templates2 = await sp.web.customListTemplates.select(\"Title\")();","title":"customListTemplates"},{"location":"sp/webs/#getlist","text":"Gets a list by server relative url (list's root folder) import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { IList } from \"@pnp/sp/lists/web\"; const sp = spfi(...); const list: IList = sp.web.getList(\"/sites/dev/lists/test\"); const listData = await list();","title":"getList"},{"location":"sp/webs/#getcatalog","text":"Returns the list gallery on the site Name Value WebTemplateCatalog 111 WebPartCatalog 113 ListTemplateCatalog 114 MasterPageCatalog 116 SolutionCatalog 121 ThemeCatalog 123 DesignCatalog 124 AppDataCatalog 125 import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import { IList } from \"@pnp/sp/lists\"; const sp = spfi(...); const templateCatalog: IList = await sp.web.getCatalog(111); const themeCatalog: IList = await sp.web.getCatalog(123);","title":"getCatalog"},{"location":"sp/webs/#navigation","text":"Gets a navigation object that represents navigation on the Web site, including the Quick Launch area and the top navigation bar import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/navigation/web\"; import { INavigation } from \"@pnp/sp/navigation\"; const sp = spfi(...); const nav: INavigation = sp.web.navigation; import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/navigation/web\"; import { IRegionalSettings } from \"@pnp/sp/navigation\"; const sp = spfi(...); const settings: IRegionalSettings = sp.web.regionalSettings; const settingsData = await settings(); import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/related-items/web\"; import { IRelatedItemManager, IRelatedItem } from \"@pnp/sp/related-items\"; const sp = spfi(...); const manager: IRelatedItemManager = sp.web.relatedItems; const data: IRelatedItem[] = await manager.getRelatedItems(\"{list name}\", 4);","title":"navigation"},{"location":"sp/webs/#security-imports","text":"Please see information around the available security methods in the security article .","title":"security imports"},{"location":"sp/webs/#sharing-imports","text":"Please see information around the available sharing methods in the sharing article .","title":"sharing imports"},{"location":"sp/webs/#sitegroups","text":"The site groups import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); const groups = await sp.web.siteGroups(); const groups2 = await sp.web.siteGroups.top(2)();","title":"siteGroups"},{"location":"sp/webs/#associatedownergroup","text":"The web's owner group import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); const group = await sp.web.associatedOwnerGroup(); const users = await sp.web.associatedOwnerGroup.users();","title":"associatedOwnerGroup"},{"location":"sp/webs/#associatedmembergroup","text":"The web's member group import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); const group = await sp.web.associatedMemberGroup(); const users = await sp.web.associatedMemberGroup.users();","title":"associatedMemberGroup"},{"location":"sp/webs/#associatedvisitorgroup","text":"The web's visitor group import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); const group = await sp.web.associatedVisitorGroup(); const users = await sp.web.associatedVisitorGroup.users();","title":"associatedVisitorGroup"},{"location":"sp/webs/#createdefaultassociatedgroups","text":"Creates the default associated groups (Members, Owners, Visitors) and gives them the default permissions on the site. The target site must have unique permissions and no associated members / owners / visitors groups import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-groups/web\"; const sp = spfi(...); await sp.web.createDefaultAssociatedGroups(\"Contoso\", \"{first owner login}\"); // copy the role assignments await sp.web.createDefaultAssociatedGroups(\"Contoso\", \"{first owner login}\", true); // don't clear sub assignments await sp.web.createDefaultAssociatedGroups(\"Contoso\", \"{first owner login}\", false, false); // specify secondary owner, don't copy permissions, clear sub scopes await sp.web.createDefaultAssociatedGroups(\"Contoso\", \"{first owner login}\", false, true, \"{second owner login}\");","title":"createDefaultAssociatedGroups"},{"location":"sp/webs/#siteusers","text":"The site users import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); const users = await sp.web.siteUsers(); const users2 = await sp.web.siteUsers.top(5)(); const users3 = await sp.web.siteUsers.filter(`startswith(LoginName, '${encodeURIComponent(\"i:0#.f|m\")}')`)();","title":"siteUsers"},{"location":"sp/webs/#currentuser","text":"Information on the current user import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; const sp = spfi(...); const user = await sp.web.currentUser(); // check the login name of the current user const user2 = await sp.web.currentUser.select(\"LoginName\")();","title":"currentUser"},{"location":"sp/webs/#ensureuser","text":"Checks whether the specified login name belongs to a valid user in the web. If the user doesn't exist, adds the user to the web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; import { IWebEnsureUserResult } from \"@pnp/sp/site-users/\"; const sp = spfi(...); const result: IWebEnsureUserResult = await sp.web.ensureUser(\"i:0#.f|membership|user@domain.onmicrosoft.com\");","title":"ensureUser"},{"location":"sp/webs/#getuserbyid","text":"Returns the user corresponding to the specified member identifier for the current web import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/site-users/web\"; import { ISiteUser } from \"@pnp/sp/site-users/\"; const sp = spfi(...); const user: ISiteUser = sp.web.getUserById(23); const userData = await user(); const userData2 = await user.select(\"LoginName\")();","title":"getUserById"},{"location":"sp/webs/#usercustomactions","text":"Gets a newly refreshed collection of the SPWeb's SPUserCustomActionCollection import { spfi } from \"@pnp/sp\"; import \"@pnp/sp/webs\"; import \"@pnp/sp/user-custom-actions/web\"; import { IUserCustomActions } from \"@pnp/sp/user-custom-actions\"; const sp = spfi(...); const actions: IUserCustomActions = sp.web.userCustomActions; const actionsData = await actions();","title":"userCustomActions"},{"location":"sp/webs/#iwebinfosdata","text":"Some web operations return a subset of web information defined by the IWebInfosData interface, shown below. In those cases only these fields are available for select, orderby, and other odata operations. interface IWebInfosData { Configuration: number; Created: string; Description: string; Id: string; Language: number; LastItemModifiedDate: string; LastItemUserModifiedDate: string; ServerRelativeUrl: string; Title: string; WebTemplate: string; WebTemplateId: number; }","title":"IWebInfosData"}]}